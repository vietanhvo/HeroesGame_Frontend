
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__qc_index__.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}
require('./assets/Library/web3.min');
require('./assets/Script/ActiveParticle');
require('./assets/Script/Character');
require('./assets/Script/Game');
require('./assets/Script/Win');

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Character.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '6436bdJeqtI0ZWTwZL1yd4d', 'Character');
// Script/Character.ts

"use strict";
// Learn TypeScript:
//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html
// Learn Attribute:
//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var Character = /** @class */ (function (_super) {
    __extends(Character, _super);
    function Character() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.hp = 100;
        _this.dame = 1;
        return _this;
    }
    __decorate([
        property
    ], Character.prototype, "hp", void 0);
    __decorate([
        property
    ], Character.prototype, "dame", void 0);
    Character = __decorate([
        ccclass
    ], Character);
    return Character;
}(cc.Component));
exports.default = Character;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxDaGFyYWN0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLG9CQUFvQjtBQUNwQix3RUFBd0U7QUFDeEUsbUJBQW1CO0FBQ25CLGtGQUFrRjtBQUNsRiw4QkFBOEI7QUFDOUIsa0ZBQWtGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFNUUsSUFBQSxLQUFzQixFQUFFLENBQUMsVUFBVSxFQUFsQyxPQUFPLGFBQUEsRUFBRSxRQUFRLGNBQWlCLENBQUM7QUFHMUM7SUFBdUMsNkJBQVk7SUFBbkQ7UUFBQSxxRUFPQztRQUpHLFFBQUUsR0FBRyxHQUFHLENBQUM7UUFFVCxVQUFJLEdBQUcsQ0FBQyxDQUFDOztJQUViLENBQUM7SUFKRztRQURDLFFBQVE7eUNBQ0E7SUFFVDtRQURDLFFBQVE7MkNBQ0E7SUFMUSxTQUFTO1FBRDdCLE9BQU87T0FDYSxTQUFTLENBTzdCO0lBQUQsZ0JBQUM7Q0FQRCxBQU9DLENBUHNDLEVBQUUsQ0FBQyxTQUFTLEdBT2xEO2tCQVBvQixTQUFTIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGVhcm4gVHlwZVNjcmlwdDpcclxuLy8gIC0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvdHlwZXNjcmlwdC5odG1sXHJcbi8vIExlYXJuIEF0dHJpYnV0ZTpcclxuLy8gIC0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvcmVmZXJlbmNlL2F0dHJpYnV0ZXMuaHRtbFxyXG4vLyBMZWFybiBsaWZlLWN5Y2xlIGNhbGxiYWNrczpcclxuLy8gIC0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvbGlmZS1jeWNsZS1jYWxsYmFja3MuaHRtbFxyXG5cclxuY29uc3Qge2NjY2xhc3MsIHByb3BlcnR5fSA9IGNjLl9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzc1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGFyYWN0ZXIgZXh0ZW5kcyBjYy5Db21wb25lbnQge1xyXG5cclxuICAgIEBwcm9wZXJ0eVxyXG4gICAgaHAgPSAxMDA7XHJcbiAgICBAcHJvcGVydHlcclxuICAgIGRhbWUgPSAxO1xyXG4gICAgXHJcbn1cclxuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/ActiveParticle.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'fbb10wZ1CVPPZK1dMjkVhVw', 'ActiveParticle');
// Script/ActiveParticle.ts

"use strict";
// Learn TypeScript:
//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html
// Learn Attribute:
//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var ActiveParticle = /** @class */ (function (_super) {
    __extends(ActiveParticle, _super);
    function ActiveParticle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ActiveParticle.prototype.onEnable = function () {
        if (this.node.parent.name == "bullet1" || this.node.parent.name == "bullet11")
            this.node.getComponent(sp.Skeleton).setAnimation(0, "atk_demo", false);
        else if (this.node.parent.name == "bullet2")
            this.node.getComponent(sp.Skeleton).setAnimation(0, "atk1", false);
        else {
            this.node.getComponent(sp.Skeleton).setAnimation(0, "atk", false);
        }
    };
    ActiveParticle = __decorate([
        ccclass
    ], ActiveParticle);
    return ActiveParticle;
}(cc.Component));
exports.default = ActiveParticle;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxBY3RpdmVQYXJ0aWNsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsb0JBQW9CO0FBQ3BCLHdFQUF3RTtBQUN4RSxtQkFBbUI7QUFDbkIsa0ZBQWtGO0FBQ2xGLDhCQUE4QjtBQUM5QixrRkFBa0Y7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUU1RSxJQUFBLEtBQXNCLEVBQUUsQ0FBQyxVQUFVLEVBQWxDLE9BQU8sYUFBQSxFQUFFLFFBQVEsY0FBaUIsQ0FBQztBQUcxQztJQUE0QyxrQ0FBWTtJQUF4RDs7SUFZQSxDQUFDO0lBVkcsaUNBQVEsR0FBUjtRQUNJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLFNBQVMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksVUFBVTtZQUN6RSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDdEUsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksU0FBUztZQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFFdkU7WUFDSSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDckU7SUFDTCxDQUFDO0lBWGdCLGNBQWM7UUFEbEMsT0FBTztPQUNhLGNBQWMsQ0FZbEM7SUFBRCxxQkFBQztDQVpELEFBWUMsQ0FaMkMsRUFBRSxDQUFDLFNBQVMsR0FZdkQ7a0JBWm9CLGNBQWMiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMZWFybiBUeXBlU2NyaXB0OlxyXG4vLyAgLSBodHRwczovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL2VuL3NjcmlwdGluZy90eXBlc2NyaXB0Lmh0bWxcclxuLy8gTGVhcm4gQXR0cmlidXRlOlxyXG4vLyAgLSBodHRwczovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL2VuL3NjcmlwdGluZy9yZWZlcmVuY2UvYXR0cmlidXRlcy5odG1sXHJcbi8vIExlYXJuIGxpZmUtY3ljbGUgY2FsbGJhY2tzOlxyXG4vLyAgLSBodHRwczovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL2VuL3NjcmlwdGluZy9saWZlLWN5Y2xlLWNhbGxiYWNrcy5odG1sXHJcblxyXG5jb25zdCB7Y2NjbGFzcywgcHJvcGVydHl9ID0gY2MuX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjdGl2ZVBhcnRpY2xlIGV4dGVuZHMgY2MuQ29tcG9uZW50IHtcclxuXHJcbiAgICBvbkVuYWJsZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5ub2RlLnBhcmVudC5uYW1lID09IFwiYnVsbGV0MVwiIHx8IHRoaXMubm9kZS5wYXJlbnQubmFtZSA9PSBcImJ1bGxldDExXCIpXHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5nZXRDb21wb25lbnQoc3AuU2tlbGV0b24pLnNldEFuaW1hdGlvbigwLCBcImF0a19kZW1vXCIsIGZhbHNlKTtcclxuICAgICAgICBlbHNlIGlmICh0aGlzLm5vZGUucGFyZW50Lm5hbWUgPT0gXCJidWxsZXQyXCIpXHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5nZXRDb21wb25lbnQoc3AuU2tlbGV0b24pLnNldEFuaW1hdGlvbigwLCBcImF0azFcIiwgZmFsc2UpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5nZXRDb21wb25lbnQoc3AuU2tlbGV0b24pLnNldEFuaW1hdGlvbigwLCBcImF0a1wiLCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Win.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '800ccvPOKlDh4MpKLZF9Uyn', 'Win');
// Script/Win.ts

"use strict";
// Learn TypeScript:
//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html
// Learn Attribute:
//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var NewClass = /** @class */ (function (_super) {
    __extends(NewClass, _super);
    function NewClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NewClass.prototype.onEnable = function () {
        this.schedule(this.addExp, 0.01);
    };
    NewClass.prototype.addExp = function () {
        this.exp.progress += 0.01;
        if (this.exp.progress >= 1)
            this.unschedule(this.addExp);
    };
    __decorate([
        property(cc.ProgressBar)
    ], NewClass.prototype, "exp", void 0);
    NewClass = __decorate([
        ccclass
    ], NewClass);
    return NewClass;
}(cc.Component));
exports.default = NewClass;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxXaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLG9CQUFvQjtBQUNwQix3RUFBd0U7QUFDeEUsbUJBQW1CO0FBQ25CLGtGQUFrRjtBQUNsRiw4QkFBOEI7QUFDOUIsa0ZBQWtGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFNUUsSUFBQSxLQUFzQixFQUFFLENBQUMsVUFBVSxFQUFsQyxPQUFPLGFBQUEsRUFBRSxRQUFRLGNBQWlCLENBQUM7QUFHMUM7SUFBc0MsNEJBQVk7SUFBbEQ7O0lBY0EsQ0FBQztJQVRHLDJCQUFRLEdBQVI7UUFDSSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELHlCQUFNLEdBQU47UUFDSSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUM7UUFDMUIsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsSUFBSSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFWRDtRQURDLFFBQVEsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDO3lDQUNOO0lBSEYsUUFBUTtRQUQ1QixPQUFPO09BQ2EsUUFBUSxDQWM1QjtJQUFELGVBQUM7Q0FkRCxBQWNDLENBZHFDLEVBQUUsQ0FBQyxTQUFTLEdBY2pEO2tCQWRvQixRQUFRIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGVhcm4gVHlwZVNjcmlwdDpcclxuLy8gIC0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvdHlwZXNjcmlwdC5odG1sXHJcbi8vIExlYXJuIEF0dHJpYnV0ZTpcclxuLy8gIC0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvcmVmZXJlbmNlL2F0dHJpYnV0ZXMuaHRtbFxyXG4vLyBMZWFybiBsaWZlLWN5Y2xlIGNhbGxiYWNrczpcclxuLy8gIC0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvbGlmZS1jeWNsZS1jYWxsYmFja3MuaHRtbFxyXG5cclxuY29uc3Qge2NjY2xhc3MsIHByb3BlcnR5fSA9IGNjLl9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzc1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOZXdDbGFzcyBleHRlbmRzIGNjLkNvbXBvbmVudCB7XHJcblxyXG4gICAgQHByb3BlcnR5KGNjLlByb2dyZXNzQmFyKVxyXG4gICAgZXhwOiBjYy5Qcm9ncmVzc0JhclxyXG5cclxuICAgIG9uRW5hYmxlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc2NoZWR1bGUodGhpcy5hZGRFeHAsIDAuMDEpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEV4cCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmV4cC5wcm9ncmVzcyArPSAwLjAxO1xyXG4gICAgICAgIGlmICh0aGlzLmV4cC5wcm9ncmVzcyA+PSAxKVxyXG4gICAgICAgICAgICB0aGlzLnVuc2NoZWR1bGUodGhpcy5hZGRFeHApO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Game.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '533d062sChHRJ0sYHBmtHUM', 'Game');
// Script/Game.ts

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios = require("axios");
var instance = axios.create({
    withCredentials: true,
    baseURL: "http://127.0.0.1:8000",
});
window.hero = 1;
window.monster = 0;
window.heroSkin = 3;
window.heroId = 2;
window.level = 1;
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var t = cc.tween;
var testnet = false;
var SOUND;
(function (SOUND) {
    SOUND[SOUND["WIN"] = 0] = "WIN";
    SOUND[SOUND["LOSE"] = 1] = "LOSE";
    SOUND[SOUND["E1"] = 2] = "E1";
    SOUND[SOUND["E2"] = 3] = "E2";
    SOUND[SOUND["E3"] = 4] = "E3";
    SOUND[SOUND["E4"] = 5] = "E4";
    SOUND[SOUND["H1"] = 6] = "H1";
    SOUND[SOUND["H2"] = 7] = "H2";
    SOUND[SOUND["H3"] = 8] = "H3";
})(SOUND || (SOUND = {}));
var Game = /** @class */ (function (_super) {
    __extends(Game, _super);
    function Game() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.hpHero = null;
        _this.animHpHero = null;
        _this.hpMonster = null;
        _this.animHpMonster = null;
        _this.heroes = [];
        _this.monsters = [];
        _this.percentWaitResponse = 10;
        _this.dameMonster = 0.01;
        _this.dameHero = 0.01;
        _this.stars = [];
        _this.sounds = [];
        _this.currentHero = null;
        _this.currentMonster = null;
        _this.hp = null;
        _this.wait = true;
        _this.contractABI = null;
        _this.winLabel = [];
        _this.loseLabel = [];
        _this.failedLabel = null;
        _this.token = 0;
        _this.exp = 1;
        _this.tx = "";
        _this.countTx = 0;
        return _this;
    }
    Game.prototype.playSound = function (soundId, loop, delay) {
        var _this = this;
        if (loop === void 0) { loop = false; }
        if (delay === void 0) { delay = 0; }
        this.scheduleOnce(function () {
            cc.audioEngine.playEffect(_this.sounds[soundId], loop);
        }, delay);
    };
    Game.prototype.onLoad = function () {
        this.shadowHero.y = -390;
        this.shadowMonster.y = -390;
    };
    Game.prototype.updateSkin = function (skeleton) {
        if (window.heroSkin <= 2) {
            skeleton.setSkin("skin1");
        }
        else if (window.heroSkin <= 4) {
            skeleton.setSkin("skin2");
        }
        else {
            skeleton.setSkin("skin3");
        }
    };
    Game.prototype.start = function () {
        var _this = this;
        var params = new URL(window.location.href).searchParams;
        window.hero = params.get("h");
        window.monster = params.get("m") - 1;
        window.heroId = params.get("heroid");
        window.heroSkin = params.get("s");
        window.level = params.get("l");
        this.currentHero = this.heroes[window.hero];
        this.currentMonster = this.monsters[window.monster];
        this.updateSkin(this.currentHero);
        this.scheduleOnce(this.battle, 1);
        t(this.node)
            .call(function () {
            /*  */
            _this.currentHero.setAnimation(0, "run", true);
            t(_this.currentHero.node)
                .to(2, { x: -400 })
                .call(function () {
                _this.currentHero.setAnimation(0, "idle", true);
            })
                .start();
            _this.currentMonster.setAnimation(0, "run", true);
            t(_this.currentMonster.node)
                .to(2, { x: 400 })
                .call(function () {
                _this.currentMonster.setAnimation(0, "idle", true);
            })
                .start();
        })
            .delay(2)
            .call(function () {
            _this.hpHero.node.active = true;
            _this.hpMonster.node.active = true;
        })
            .delay(1)
            .call(function () {
            _this.battleStartAnim.node.active = true;
            _this.battleStartAnim.setAnimation(0, "animation", true);
            _this.scheduleOnce(function () {
                _this.battleStartAnim.node.active = false;
            }, 1);
        })
            .delay(3)
            .call(function () {
            _this.currentHero.setStartListener(function (track) {
                if (track.animation.name == "atk") {
                    if (window.hero != 0)
                        _this.scheduleOnce(function () {
                            _this.blink(_this.currentMonster.node);
                        }, 0.5);
                    else
                        _this.scheduleOnce(function () {
                            _this.blink(_this.currentMonster.node);
                        }, 0.3);
                }
            });
            //Warrior
            if (window.hero == 1) {
                // fix
                _this.currentHero.setAnimation(0, "run", true);
                t(_this.currentHero.node)
                    .by(0.5, { x: 450 })
                    .call(function () {
                    _this.heroAttack();
                    _this.schedule(_this.heroAttack, 1);
                })
                    .start();
            }
            //Ranger
            else if (window.hero == 0) {
                // fix
                _this.heroAttack();
                _this.schedule(_this.heroAttack, 0.5);
            }
            //Assassin
            else if (window.hero == 2) {
                _this.currentHero.setAnimation(0, "run", true);
                t(_this.currentHero.node)
                    .by(0.5, { x: 450 })
                    .call(function () {
                    _this.heroAttack();
                    _this.schedule(_this.heroAttack, 1);
                })
                    .start();
            }
            _this.currentMonster.setStartListener(function (track) {
                if (track.animation.name == "atk") {
                    if (window.monster == 3) {
                        _this.scheduleOnce(function () {
                            _this.blink(_this.currentHero.node);
                        }, 0.6);
                    }
                    else if (window.monster == 2) {
                        if (window.hero == 0) {
                            _this.scheduleOnce(function () {
                                _this.blink(_this.currentHero.node);
                            }, 0.8);
                        }
                        else {
                            _this.scheduleOnce(function () {
                                _this.blink(_this.currentHero.node);
                            }, 0.6);
                        }
                    }
                    else {
                        _this.scheduleOnce(function () {
                            _this.blink(_this.currentHero.node);
                        }, 0.2);
                    }
                    if (window.monster == 1) {
                        _this.bulletMonster.node.active = true;
                        if (window.hero == 1 || window.hero == 2)
                            // fix
                            _this.bulletMonster.play("monster_bullet_1");
                        else if (window.hero == 0)
                            // fix
                            _this.bulletMonster.play("monster_bullet_2");
                    }
                    else if (window.monster == 2) {
                        _this.scheduleOnce(function () {
                            _this.bulletMonster3.node.active = true;
                            _this.bulletMonster3.play("monster_bullet_3");
                        }, 0.5);
                    }
                    else if (window.monster == 3) {
                        _this.bulletMonster4.node.active = true;
                        _this.bulletMonster4.play("monster_bullet_4");
                    }
                    else {
                        _this.bulletMonster2.node.active = true;
                        if (window.hero == 1 || window.hero == 2)
                            // fix
                            _this.bulletMonster2.play("monster_bullet_1");
                        else if (window.hero == 0)
                            // fix
                            _this.bulletMonster2.play("monster_bullet_2");
                    }
                }
            });
            if (window.monster == 1) {
                if (window.hero == 0)
                    // fix
                    _this.schedule(_this.monsterAttack, 0.3);
                else
                    _this.schedule(_this.monsterAttack, 0.5);
            }
            else if (window.monster == 2) {
                _this.monsterAttack();
                _this.schedule(_this.monsterAttack, 1.5);
            }
            else if (window.monster == 3) {
                if (window.hero == 0) {
                    _this.currentMonster.setAnimation(0, "run", true);
                    t(_this.currentMonster.node)
                        .by(0.5, { position: cc.v2(-500, 0) })
                        .call(function () {
                        _this.monsterAttack();
                        _this.schedule(_this.monsterAttack, 1.2);
                    })
                        .start();
                }
                else {
                    _this.scheduleOnce(function () {
                        _this.monsterAttack();
                        _this.schedule(_this.monsterAttack, 1.2);
                    }, 0.5);
                }
            }
            else {
                _this.schedule(_this.monsterAttack, 1.1);
            }
            _this.currentHero.setCompleteListener(function (track) {
                if (track.animation.name == "atk") {
                    if (window.hero == 0) {
                        if (window.monster != 3)
                            _this.bulletRanger.play("ranger_bullet");
                        else
                            _this.bulletRanger.play("ranger_bullet2");
                    }
                    _this.hpMonster.progress -= _this.dameHero;
                    if (_this.hpMonster.progress < 0.1 && _this.wait) {
                        // 1 / 10 = 0.1
                        _this.hpMonster.progress = 0.1;
                    }
                    if (_this.hpMonster.progress <= 0.01) {
                        _this.playSound(SOUND.WIN, false, 0);
                        _this.unschedule(_this.heroAttack);
                        _this.unschedule(_this.monsterAttack);
                        _this.currentHero.setAnimation(0, "win", false);
                        // this.currentMonster.setAnimation(0, "die", false);
                        _this.currentMonster.setAnimation(0, "Die", false);
                        for (var i = 0; i < window.heroSkin; i++) {
                            _this.stars[i].active = true;
                        }
                        _this.scheduleOnce(function () {
                            _this.win.active = true;
                            if (window.hero == 1) {
                                // fix
                                _this.win.getChildByName("Warrior").active = true;
                                _this.win.getChildByName("Ranger").active = false;
                                _this.win.getChildByName("Assassin").active = false;
                                var sp = _this.win
                                    .getChildByName("Warrior")
                                    .getComponent("sp.Skeleton");
                                _this.updateSkin(sp);
                            }
                            else if (window.hero == 0) {
                                // fix
                                _this.win.getChildByName("Warrior").active = false;
                                _this.win.getChildByName("Ranger").active = true;
                                _this.win.getChildByName("Assassin").active = false;
                                var sp = _this.win
                                    .getChildByName("Ranger")
                                    .getComponent("sp.Skeleton");
                                _this.updateSkin(sp);
                            }
                            else if (window.hero == 2) {
                                _this.win.getChildByName("Warrior").active = false;
                                _this.win.getChildByName("Ranger").active = false;
                                _this.win.getChildByName("Assassin").active = true;
                                var sp = _this.win
                                    .getChildByName("Assassin")
                                    .getComponent("sp.Skeleton");
                                _this.updateSkin(sp);
                            }
                        }, 1);
                        return;
                    }
                }
            });
            _this.currentMonster.setCompleteListener(function (track) {
                if (track.animation.name == "atk") {
                    _this.hpHero.progress = _this.hpHero.progress - _this.dameMonster;
                    if (_this.wait && _this.hpHero.progress <= 0.1) {
                        _this.hpHero.progress = 0.1;
                    }
                    if (_this.hpHero.progress <= 0.01) {
                        _this.playSound(SOUND.LOSE, false, 0);
                        _this.unschedule(_this.monsterAttack);
                        _this.unschedule(_this.heroAttack);
                        _this.currentHero.setAnimation(0, "lose", false);
                        _this.currentMonster.setAnimation(0, "idle", false);
                        _this.scheduleOnce(function () {
                            _this.lose.active = true;
                        }, 1);
                        return;
                    }
                }
            });
        })
            .start();
    };
    Game.prototype.showFailed = function (msg) {
        this.failed.active = true;
        this.failedLabel.string = msg;
    };
    Game.prototype.battle = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, instance.post("/hero/battle", {
                                hero_id: parseInt(window.heroId),
                                monster_id: window.monster + 1,
                            })];
                    case 1:
                        res = _a.sent();
                        console.log(res.data);
                        if (res.data) {
                            this.token = 100;
                            this.exp = 100;
                            this.winGame();
                        }
                        else {
                            this.token = 0;
                            this.exp = 0;
                            this.loseGame();
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        err_1 = _a.sent();
                        console.log(err_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    Game.prototype.update = function () {
        this.shadowHero.x = this.currentHero.node.x;
        this.shadowMonster.x = this.currentMonster.node.x;
    };
    Game.prototype.heroAttack = function () {
        this.currentHero.setAnimation(0, "atk", false);
        if (window.hero == 0) {
            this.playSound(SOUND.H1, false, 0);
        }
        else if (window.hero == 1) {
            this.playSound(SOUND.H2, false, 0);
        }
        else {
            this.playSound(SOUND.H3, false, 0);
        }
    };
    Game.prototype.monsterAttack = function () {
        // cc.log("monster attack");
        this.currentMonster.setAnimation(0, "atk", false);
        if (window.monster == 0) {
            this.playSound(SOUND.E1, false, 0);
        }
        else if (window.monster == 1) {
            this.playSound(SOUND.E2, false, 0);
        }
        else if (window.monster == 2) {
            this.playSound(SOUND.E3, false, 0);
        }
        else {
            this.playSound(SOUND.E4, false, 0);
        }
    };
    Game.prototype.blink = function (node) {
        node.color = cc.Color.RED;
        t(node)
            .delay(0.1)
            .call(function () {
            node.color = cc.Color.WHITE;
        })
            .start();
    };
    Game.prototype.winGame = function () {
        this.wait = false;
        this.dameHero = 0.5;
        this.dameMonster = 0;
        this.winLabel[0].string = "+" + this.exp;
        this.winLabel[1].string = "+" + this.token;
        this.winLabel[2].string = "Level " + window.level;
    };
    Game.prototype.loseGame = function () {
        this.wait = false;
        this.dameMonster = 0.5;
        this.dameHero = 0;
        this.loseLabel[0].string = "+" + this.exp;
        this.loseLabel[1].string = "+" + this.token;
        this.loseLabel[2].string = "Level " + window.level;
    };
    __decorate([
        property(cc.ProgressBar)
    ], Game.prototype, "hpHero", void 0);
    __decorate([
        property(cc.Animation)
    ], Game.prototype, "animHpHero", void 0);
    __decorate([
        property(cc.ProgressBar)
    ], Game.prototype, "hpMonster", void 0);
    __decorate([
        property(cc.Animation)
    ], Game.prototype, "animHpMonster", void 0);
    __decorate([
        property([sp.Skeleton])
    ], Game.prototype, "heroes", void 0);
    __decorate([
        property([sp.Skeleton])
    ], Game.prototype, "monsters", void 0);
    __decorate([
        property(sp.Skeleton)
    ], Game.prototype, "battleStartAnim", void 0);
    __decorate([
        property(cc.Label)
    ], Game.prototype, "notification", void 0);
    __decorate([
        property
    ], Game.prototype, "percentWaitResponse", void 0);
    __decorate([
        property
    ], Game.prototype, "dameMonster", void 0);
    __decorate([
        property
    ], Game.prototype, "dameHero", void 0);
    __decorate([
        property(cc.Node)
    ], Game.prototype, "win", void 0);
    __decorate([
        property(cc.Node)
    ], Game.prototype, "lose", void 0);
    __decorate([
        property(cc.Node)
    ], Game.prototype, "failed", void 0);
    __decorate([
        property(cc.Animation)
    ], Game.prototype, "bulletMonster", void 0);
    __decorate([
        property(cc.Animation)
    ], Game.prototype, "bulletMonster2", void 0);
    __decorate([
        property(cc.Animation)
    ], Game.prototype, "bulletMonster3", void 0);
    __decorate([
        property(cc.Animation)
    ], Game.prototype, "bulletMonster4", void 0);
    __decorate([
        property(cc.Animation)
    ], Game.prototype, "bulletRanger", void 0);
    __decorate([
        property(cc.Node)
    ], Game.prototype, "shadowHero", void 0);
    __decorate([
        property(cc.Node)
    ], Game.prototype, "shadowMonster", void 0);
    __decorate([
        property([cc.Node])
    ], Game.prototype, "stars", void 0);
    __decorate([
        property([cc.AudioClip])
    ], Game.prototype, "sounds", void 0);
    __decorate([
        property(cc.JsonAsset)
    ], Game.prototype, "contractABI", void 0);
    __decorate([
        property([cc.Label])
    ], Game.prototype, "winLabel", void 0);
    __decorate([
        property([cc.Label])
    ], Game.prototype, "loseLabel", void 0);
    __decorate([
        property(cc.Label)
    ], Game.prototype, "failedLabel", void 0);
    Game = __decorate([
        ccclass
    ], Game);
    return Game;
}(cc.Component));
exports.default = Game;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxHYW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUUvQixJQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQzVCLGVBQWUsRUFBRSxJQUFJO0lBQ3JCLE9BQU8sRUFBRSx1QkFBdUI7Q0FDakMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7QUFDaEIsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFDbkIsTUFBTSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7QUFDcEIsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDbEIsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7QUFFWCxJQUFBLEtBQXdCLEVBQUUsQ0FBQyxVQUFVLEVBQW5DLE9BQU8sYUFBQSxFQUFFLFFBQVEsY0FBa0IsQ0FBQztBQUM1QyxJQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO0FBQ25CLElBQU0sT0FBTyxHQUFHLEtBQUssQ0FBQztBQUN0QixJQUFLLEtBVUo7QUFWRCxXQUFLLEtBQUs7SUFDUiwrQkFBRyxDQUFBO0lBQ0gsaUNBQUksQ0FBQTtJQUNKLDZCQUFFLENBQUE7SUFDRiw2QkFBRSxDQUFBO0lBQ0YsNkJBQUUsQ0FBQTtJQUNGLDZCQUFFLENBQUE7SUFDRiw2QkFBRSxDQUFBO0lBQ0YsNkJBQUUsQ0FBQTtJQUNGLDZCQUFFLENBQUE7QUFDSixDQUFDLEVBVkksS0FBSyxLQUFMLEtBQUssUUFVVDtBQUdEO0lBQWtDLHdCQUFZO0lBQTlDO1FBQUEscUVBMFpDO1FBeFpDLFlBQU0sR0FBbUIsSUFBSSxDQUFDO1FBRTlCLGdCQUFVLEdBQWlCLElBQUksQ0FBQztRQUVoQyxlQUFTLEdBQW1CLElBQUksQ0FBQztRQUVqQyxtQkFBYSxHQUFpQixJQUFJLENBQUM7UUFFbkMsWUFBTSxHQUFrQixFQUFFLENBQUM7UUFFM0IsY0FBUSxHQUFrQixFQUFFLENBQUM7UUFNN0IseUJBQW1CLEdBQUcsRUFBRSxDQUFDO1FBRXpCLGlCQUFXLEdBQUcsSUFBSSxDQUFDO1FBRW5CLGNBQVEsR0FBRyxJQUFJLENBQUM7UUFzQmhCLFdBQUssR0FBYyxFQUFFLENBQUM7UUFHdEIsWUFBTSxHQUFtQixFQUFFLENBQUM7UUFFNUIsaUJBQVcsR0FBRyxJQUFJLENBQUM7UUFDbkIsb0JBQWMsR0FBRyxJQUFJLENBQUM7UUFDdEIsUUFBRSxHQUFHLElBQUksQ0FBQztRQUNWLFVBQUksR0FBRyxJQUFJLENBQUM7UUFFWixpQkFBVyxHQUFpQixJQUFJLENBQUM7UUFFakMsY0FBUSxHQUFlLEVBQUUsQ0FBQztRQUUxQixlQUFTLEdBQWUsRUFBRSxDQUFDO1FBRTNCLGlCQUFXLEdBQWEsSUFBSSxDQUFDO1FBQzdCLFdBQUssR0FBRyxDQUFDLENBQUM7UUFDVixTQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ1IsUUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNSLGFBQU8sR0FBRyxDQUFDLENBQUM7O0lBMFZkLENBQUM7SUF6VkMsd0JBQVMsR0FBVCxVQUFVLE9BQWUsRUFBRSxJQUFxQixFQUFFLEtBQWlCO1FBQW5FLGlCQUlDO1FBSjBCLHFCQUFBLEVBQUEsWUFBcUI7UUFBRSxzQkFBQSxFQUFBLFNBQWlCO1FBQ2pFLElBQUksQ0FBQyxZQUFZLENBQUM7WUFDaEIsRUFBRSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4RCxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDWixDQUFDO0lBQ0QscUJBQU0sR0FBTjtRQUNFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO0lBQzlCLENBQUM7SUFDRCx5QkFBVSxHQUFWLFVBQVcsUUFBUTtRQUNqQixJQUFJLE1BQU0sQ0FBQyxRQUFRLElBQUksQ0FBQyxFQUFFO1lBQ3hCLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDM0I7YUFBTSxJQUFJLE1BQU0sQ0FBQyxRQUFRLElBQUksQ0FBQyxFQUFFO1lBQy9CLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDM0I7YUFBTTtZQUNMLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDM0I7SUFDSCxDQUFDO0lBQ0Qsb0JBQUssR0FBTDtRQUFBLGlCQWtQQztRQWpQQyxJQUFJLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQztRQUV4RCxNQUFNLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsTUFBTSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyQyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFckMsTUFBTSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUvQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTVDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO2FBQ1QsSUFBSSxDQUFDO1lBQ0osTUFBTTtZQUNOLEtBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDOUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO2lCQUNyQixFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7aUJBQ2xCLElBQUksQ0FBQztnQkFDSixLQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ2pELENBQUMsQ0FBQztpQkFDRCxLQUFLLEVBQUUsQ0FBQztZQUNYLEtBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDakQsQ0FBQyxDQUFDLEtBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDO2lCQUN4QixFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO2lCQUNqQixJQUFJLENBQUM7Z0JBQ0osS0FBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNwRCxDQUFDLENBQUM7aUJBQ0QsS0FBSyxFQUFFLENBQUM7UUFDYixDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQ1IsSUFBSSxDQUFDO1lBQ0osS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztZQUMvQixLQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ3BDLENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDUixJQUFJLENBQUM7WUFDSixLQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1lBQ3hDLEtBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDeEQsS0FBSSxDQUFDLFlBQVksQ0FBQztnQkFDaEIsS0FBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztZQUMzQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDUixDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQ1IsSUFBSSxDQUFDO1lBQ0osS0FBSSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFDLEtBQUs7Z0JBQ3RDLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLElBQUksS0FBSyxFQUFFO29CQUNqQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQzt3QkFDbEIsS0FBSSxDQUFDLFlBQVksQ0FBQzs0QkFDaEIsS0FBSSxDQUFDLEtBQUssQ0FBQyxLQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUN2QyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7O3dCQUVSLEtBQUksQ0FBQyxZQUFZLENBQUM7NEJBQ2hCLEtBQUksQ0FBQyxLQUFLLENBQUMsS0FBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDdkMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2lCQUNYO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDSCxTQUFTO1lBQ1QsSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRTtnQkFDcEIsTUFBTTtnQkFDTixLQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUM5QyxDQUFDLENBQUMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7cUJBQ3JCLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7cUJBQ25CLElBQUksQ0FBQztvQkFDSixLQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7b0JBQ2xCLEtBQUksQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDcEMsQ0FBQyxDQUFDO3FCQUNELEtBQUssRUFBRSxDQUFDO2FBQ1o7WUFDRCxRQUFRO2lCQUNILElBQUksTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUU7Z0JBQ3pCLE1BQU07Z0JBQ04sS0FBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO2dCQUNsQixLQUFJLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUM7YUFDckM7WUFDRCxVQUFVO2lCQUNMLElBQUksTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUU7Z0JBQ3pCLEtBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQzlDLENBQUMsQ0FBQyxLQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztxQkFDckIsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztxQkFDbkIsSUFBSSxDQUFDO29CQUNKLEtBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztvQkFDbEIsS0FBSSxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUNwQyxDQUFDLENBQUM7cUJBQ0QsS0FBSyxFQUFFLENBQUM7YUFDWjtZQUNELEtBQUksQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsVUFBQyxLQUFLO2dCQUN6QyxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxJQUFJLEtBQUssRUFBRTtvQkFDakMsSUFBSSxNQUFNLENBQUMsT0FBTyxJQUFJLENBQUMsRUFBRTt3QkFDdkIsS0FBSSxDQUFDLFlBQVksQ0FBQzs0QkFDaEIsS0FBSSxDQUFDLEtBQUssQ0FBQyxLQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNwQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7cUJBQ1Q7eUJBQU0sSUFBSSxNQUFNLENBQUMsT0FBTyxJQUFJLENBQUMsRUFBRTt3QkFDOUIsSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRTs0QkFDcEIsS0FBSSxDQUFDLFlBQVksQ0FBQztnQ0FDaEIsS0FBSSxDQUFDLEtBQUssQ0FBQyxLQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDOzRCQUNwQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7eUJBQ1Q7NkJBQU07NEJBQ0wsS0FBSSxDQUFDLFlBQVksQ0FBQztnQ0FDaEIsS0FBSSxDQUFDLEtBQUssQ0FBQyxLQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDOzRCQUNwQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7eUJBQ1Q7cUJBQ0Y7eUJBQU07d0JBQ0wsS0FBSSxDQUFDLFlBQVksQ0FBQzs0QkFDaEIsS0FBSSxDQUFDLEtBQUssQ0FBQyxLQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNwQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7cUJBQ1Q7b0JBQ0QsSUFBSSxNQUFNLENBQUMsT0FBTyxJQUFJLENBQUMsRUFBRTt3QkFDdkIsS0FBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQzt3QkFDdEMsSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUM7NEJBQ3RDLE1BQU07NEJBQ04sS0FBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQzs2QkFDekMsSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUM7NEJBQ3ZCLE1BQU07NEJBQ04sS0FBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztxQkFDL0M7eUJBQU0sSUFBSSxNQUFNLENBQUMsT0FBTyxJQUFJLENBQUMsRUFBRTt3QkFDOUIsS0FBSSxDQUFDLFlBQVksQ0FBQzs0QkFDaEIsS0FBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQzs0QkFDdkMsS0FBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQzt3QkFDL0MsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO3FCQUNUO3lCQUFNLElBQUksTUFBTSxDQUFDLE9BQU8sSUFBSSxDQUFDLEVBQUU7d0JBQzlCLEtBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7d0JBQ3ZDLEtBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7cUJBQzlDO3lCQUFNO3dCQUNMLEtBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7d0JBQ3ZDLElBQUksTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDOzRCQUN0QyxNQUFNOzRCQUNOLEtBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7NkJBQzFDLElBQUksTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDOzRCQUN2QixNQUFNOzRCQUNOLEtBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7cUJBQ2hEO2lCQUNGO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLE1BQU0sQ0FBQyxPQUFPLElBQUksQ0FBQyxFQUFFO2dCQUN2QixJQUFJLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQztvQkFDbEIsTUFBTTtvQkFDTixLQUFJLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDLENBQUM7O29CQUNwQyxLQUFJLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDLENBQUM7YUFDN0M7aUJBQU0sSUFBSSxNQUFNLENBQUMsT0FBTyxJQUFJLENBQUMsRUFBRTtnQkFDOUIsS0FBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO2dCQUNyQixLQUFJLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDLENBQUM7YUFDeEM7aUJBQU0sSUFBSSxNQUFNLENBQUMsT0FBTyxJQUFJLENBQUMsRUFBRTtnQkFDOUIsSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRTtvQkFDcEIsS0FBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztvQkFDakQsQ0FBQyxDQUFDLEtBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDO3lCQUN4QixFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQzt5QkFDckMsSUFBSSxDQUFDO3dCQUNKLEtBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQzt3QkFDckIsS0FBSSxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUN6QyxDQUFDLENBQUM7eUJBQ0QsS0FBSyxFQUFFLENBQUM7aUJBQ1o7cUJBQU07b0JBQ0wsS0FBSSxDQUFDLFlBQVksQ0FBQzt3QkFDaEIsS0FBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO3dCQUNyQixLQUFJLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDLENBQUM7b0JBQ3pDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztpQkFDVDthQUNGO2lCQUFNO2dCQUNMLEtBQUksQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLGFBQWEsRUFBRSxHQUFHLENBQUMsQ0FBQzthQUN4QztZQUNELEtBQUksQ0FBQyxXQUFXLENBQUMsbUJBQW1CLENBQUMsVUFBQyxLQUFLO2dCQUN6QyxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxJQUFJLEtBQUssRUFBRTtvQkFDakMsSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRTt3QkFDcEIsSUFBSSxNQUFNLENBQUMsT0FBTyxJQUFJLENBQUM7NEJBQUUsS0FBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7OzRCQUM1RCxLQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO3FCQUMvQztvQkFDRCxLQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsSUFBSSxLQUFJLENBQUMsUUFBUSxDQUFDO29CQUN6QyxJQUFJLEtBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLEdBQUcsSUFBSSxLQUFJLENBQUMsSUFBSSxFQUFFO3dCQUM5QyxlQUFlO3dCQUNmLEtBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQztxQkFDL0I7b0JBRUQsSUFBSSxLQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsSUFBSSxJQUFJLEVBQUU7d0JBQ25DLEtBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7d0JBQ3BDLEtBQUksQ0FBQyxVQUFVLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO3dCQUNqQyxLQUFJLENBQUMsVUFBVSxDQUFDLEtBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQzt3QkFDcEMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQzt3QkFDL0MscURBQXFEO3dCQUNyRCxLQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUNsRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRTs0QkFDeEMsS0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO3lCQUM3Qjt3QkFDRCxLQUFJLENBQUMsWUFBWSxDQUFDOzRCQUNoQixLQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7NEJBQ3ZCLElBQUksTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUU7Z0NBQ3BCLE1BQU07Z0NBQ04sS0FBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztnQ0FDakQsS0FBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztnQ0FDakQsS0FBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztnQ0FDbkQsSUFBSSxFQUFFLEdBQUcsS0FBSSxDQUFDLEdBQUc7cUNBQ2QsY0FBYyxDQUFDLFNBQVMsQ0FBQztxQ0FDekIsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dDQUMvQixLQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDOzZCQUNyQjtpQ0FBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFO2dDQUMzQixNQUFNO2dDQUNOLEtBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7Z0NBQ2xELEtBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7Z0NBQ2hELEtBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7Z0NBQ25ELElBQUksRUFBRSxHQUFHLEtBQUksQ0FBQyxHQUFHO3FDQUNkLGNBQWMsQ0FBQyxRQUFRLENBQUM7cUNBQ3hCLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztnQ0FDL0IsS0FBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQzs2QkFDckI7aUNBQU0sSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRTtnQ0FDM0IsS0FBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztnQ0FDbEQsS0FBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztnQ0FDakQsS0FBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztnQ0FDbEQsSUFBSSxFQUFFLEdBQUcsS0FBSSxDQUFDLEdBQUc7cUNBQ2QsY0FBYyxDQUFDLFVBQVUsQ0FBQztxQ0FDMUIsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dDQUMvQixLQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDOzZCQUNyQjt3QkFDSCxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7d0JBQ04sT0FBTztxQkFDUjtpQkFDRjtZQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0gsS0FBSSxDQUFDLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFDLEtBQUs7Z0JBQzVDLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLElBQUksS0FBSyxFQUFFO29CQUNqQyxLQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxLQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDO29CQUMvRCxJQUFJLEtBQUksQ0FBQyxJQUFJLElBQUksS0FBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLElBQUksR0FBRyxFQUFFO3dCQUM1QyxLQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUM7cUJBQzVCO29CQUVELElBQUksS0FBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLElBQUksSUFBSSxFQUFFO3dCQUNoQyxLQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO3dCQUNyQyxLQUFJLENBQUMsVUFBVSxDQUFDLEtBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQzt3QkFDcEMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxLQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7d0JBQ2pDLEtBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQ2hELEtBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQ25ELEtBQUksQ0FBQyxZQUFZLENBQUM7NEJBQ2hCLEtBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQzt3QkFDMUIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO3dCQUNOLE9BQU87cUJBQ1I7aUJBQ0Y7WUFDSCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQzthQUNELEtBQUssRUFBRSxDQUFDO0lBQ2IsQ0FBQztJQUVELHlCQUFVLEdBQVYsVUFBVyxHQUFHO1FBQ1osSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQzFCLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztJQUNoQyxDQUFDO0lBRUsscUJBQU0sR0FBWjs7Ozs7Ozt3QkFFZ0IscUJBQU0sUUFBUSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUU7Z0NBQzlDLE9BQU8sRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztnQ0FDaEMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQzs2QkFDL0IsQ0FBQyxFQUFBOzt3QkFISSxHQUFHLEdBQUcsU0FHVjt3QkFDRixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDdEIsSUFBSSxHQUFHLENBQUMsSUFBSSxFQUFFOzRCQUNaLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDOzRCQUNqQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQzs0QkFFZixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7eUJBQ2hCOzZCQUFNOzRCQUNMLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDOzRCQUNmLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDOzRCQUViLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQzt5QkFDakI7Ozs7d0JBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFHLENBQUMsQ0FBQzs7Ozs7O0tBRXBCO0lBQ0QscUJBQU0sR0FBTjtRQUNFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELHlCQUFVLEdBQVY7UUFDRSxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQy9DLElBQUksTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNwQzthQUFNLElBQUksTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUU7WUFDM0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNwQzthQUFNO1lBQ0wsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNwQztJQUNILENBQUM7SUFFRCw0QkFBYSxHQUFiO1FBQ0UsNEJBQTRCO1FBQzVCLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEQsSUFBSSxNQUFNLENBQUMsT0FBTyxJQUFJLENBQUMsRUFBRTtZQUN2QixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3BDO2FBQU0sSUFBSSxNQUFNLENBQUMsT0FBTyxJQUFJLENBQUMsRUFBRTtZQUM5QixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3BDO2FBQU0sSUFBSSxNQUFNLENBQUMsT0FBTyxJQUFJLENBQUMsRUFBRTtZQUM5QixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3BDO2FBQU07WUFDTCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3BDO0lBQ0gsQ0FBQztJQUNELG9CQUFLLEdBQUwsVUFBTSxJQUFJO1FBQ1IsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUMxQixDQUFDLENBQUMsSUFBSSxDQUFDO2FBQ0osS0FBSyxDQUFDLEdBQUcsQ0FBQzthQUNWLElBQUksQ0FBQztZQUNKLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDOUIsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxFQUFFLENBQUM7SUFDYixDQUFDO0lBRUQsc0JBQU8sR0FBUDtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLE1BQUksSUFBSSxDQUFDLEdBQUssQ0FBQztRQUN6QyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxNQUFJLElBQUksQ0FBQyxLQUFPLENBQUM7UUFDM0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsV0FBUyxNQUFNLENBQUMsS0FBTyxDQUFDO0lBQ3BELENBQUM7SUFFRCx1QkFBUSxHQUFSO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFDbEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUM7UUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsTUFBSSxJQUFJLENBQUMsR0FBSyxDQUFDO1FBQzFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLE1BQUksSUFBSSxDQUFDLEtBQU8sQ0FBQztRQUM1QyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxXQUFTLE1BQU0sQ0FBQyxLQUFPLENBQUM7SUFDckQsQ0FBQztJQXZaRDtRQURDLFFBQVEsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDO3dDQUNLO0lBRTlCO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUM7NENBQ1M7SUFFaEM7UUFEQyxRQUFRLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQzsyQ0FDUTtJQUVqQztRQURDLFFBQVEsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDOytDQUNZO0lBRW5DO1FBREMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dDQUNHO0lBRTNCO1FBREMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDOzBDQUNLO0lBRTdCO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUM7aURBQ087SUFFN0I7UUFEQyxRQUFRLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQzs4Q0FDSTtJQUV2QjtRQURDLFFBQVE7cURBQ2dCO0lBRXpCO1FBREMsUUFBUTs2Q0FDVTtJQUVuQjtRQURDLFFBQVE7MENBQ087SUFFaEI7UUFEQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztxQ0FDTDtJQUViO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7c0NBQ0o7SUFFZDtRQURDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO3dDQUNGO0lBRWhCO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUM7K0NBQ0s7SUFFNUI7UUFEQyxRQUFRLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQztnREFDTTtJQUU3QjtRQURDLFFBQVEsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDO2dEQUNNO0lBRTdCO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUM7Z0RBQ007SUFFN0I7UUFEQyxRQUFRLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQzs4Q0FDSTtJQUUzQjtRQURDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDOzRDQUNFO0lBRXBCO1FBREMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7K0NBQ0s7SUFFdkI7UUFEQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7dUNBQ0U7SUFHdEI7UUFEQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7d0NBQ0c7SUFPNUI7UUFEQyxRQUFRLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQzs2Q0FDVTtJQUVqQztRQURDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQzswQ0FDSztJQUUxQjtRQURDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQzsyQ0FDTTtJQUUzQjtRQURDLFFBQVEsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDOzZDQUNVO0lBNURWLElBQUk7UUFEeEIsT0FBTztPQUNhLElBQUksQ0EwWnhCO0lBQUQsV0FBQztDQTFaRCxBQTBaQyxDQTFaaUMsRUFBRSxDQUFDLFNBQVMsR0EwWjdDO2tCQTFab0IsSUFBSSIsImZpbGUiOiIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGF4aW9zID0gcmVxdWlyZShcImF4aW9zXCIpO1xyXG5cclxuY29uc3QgaW5zdGFuY2UgPSBheGlvcy5jcmVhdGUoe1xyXG4gIHdpdGhDcmVkZW50aWFsczogdHJ1ZSxcclxuICBiYXNlVVJMOiBcImh0dHA6Ly8xMjcuMC4wLjE6ODAwMFwiLFxyXG59KTtcclxuXHJcbndpbmRvdy5oZXJvID0gMTtcclxud2luZG93Lm1vbnN0ZXIgPSAwO1xyXG53aW5kb3cuaGVyb1NraW4gPSAzO1xyXG53aW5kb3cuaGVyb0lkID0gMjtcclxud2luZG93LmxldmVsID0gMTtcclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IGNjLl9kZWNvcmF0b3I7XHJcbmNvbnN0IHQgPSBjYy50d2VlbjtcclxuY29uc3QgdGVzdG5ldCA9IGZhbHNlO1xyXG5lbnVtIFNPVU5EIHtcclxuICBXSU4sXHJcbiAgTE9TRSxcclxuICBFMSxcclxuICBFMixcclxuICBFMyxcclxuICBFNCxcclxuICBIMSxcclxuICBIMixcclxuICBIMyxcclxufVxyXG5cclxuQGNjY2xhc3NcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZSBleHRlbmRzIGNjLkNvbXBvbmVudCB7XHJcbiAgQHByb3BlcnR5KGNjLlByb2dyZXNzQmFyKVxyXG4gIGhwSGVybzogY2MuUHJvZ3Jlc3NCYXIgPSBudWxsO1xyXG4gIEBwcm9wZXJ0eShjYy5BbmltYXRpb24pXHJcbiAgYW5pbUhwSGVybzogY2MuQW5pbWF0aW9uID0gbnVsbDtcclxuICBAcHJvcGVydHkoY2MuUHJvZ3Jlc3NCYXIpXHJcbiAgaHBNb25zdGVyOiBjYy5Qcm9ncmVzc0JhciA9IG51bGw7XHJcbiAgQHByb3BlcnR5KGNjLkFuaW1hdGlvbilcclxuICBhbmltSHBNb25zdGVyOiBjYy5BbmltYXRpb24gPSBudWxsO1xyXG4gIEBwcm9wZXJ0eShbc3AuU2tlbGV0b25dKVxyXG4gIGhlcm9lczogc3AuU2tlbGV0b25bXSA9IFtdO1xyXG4gIEBwcm9wZXJ0eShbc3AuU2tlbGV0b25dKVxyXG4gIG1vbnN0ZXJzOiBzcC5Ta2VsZXRvbltdID0gW107XHJcbiAgQHByb3BlcnR5KHNwLlNrZWxldG9uKVxyXG4gIGJhdHRsZVN0YXJ0QW5pbTogc3AuU2tlbGV0b247XHJcbiAgQHByb3BlcnR5KGNjLkxhYmVsKVxyXG4gIG5vdGlmaWNhdGlvbjogY2MuTGFiZWw7XHJcbiAgQHByb3BlcnR5XHJcbiAgcGVyY2VudFdhaXRSZXNwb25zZSA9IDEwO1xyXG4gIEBwcm9wZXJ0eVxyXG4gIGRhbWVNb25zdGVyID0gMC4wMTtcclxuICBAcHJvcGVydHlcclxuICBkYW1lSGVybyA9IDAuMDE7XHJcbiAgQHByb3BlcnR5KGNjLk5vZGUpXHJcbiAgd2luOiBjYy5Ob2RlO1xyXG4gIEBwcm9wZXJ0eShjYy5Ob2RlKVxyXG4gIGxvc2U6IGNjLk5vZGU7XHJcbiAgQHByb3BlcnR5KGNjLk5vZGUpXHJcbiAgZmFpbGVkOiBjYy5Ob2RlO1xyXG4gIEBwcm9wZXJ0eShjYy5BbmltYXRpb24pXHJcbiAgYnVsbGV0TW9uc3RlcjogY2MuQW5pbWF0aW9uO1xyXG4gIEBwcm9wZXJ0eShjYy5BbmltYXRpb24pXHJcbiAgYnVsbGV0TW9uc3RlcjI6IGNjLkFuaW1hdGlvbjtcclxuICBAcHJvcGVydHkoY2MuQW5pbWF0aW9uKVxyXG4gIGJ1bGxldE1vbnN0ZXIzOiBjYy5BbmltYXRpb247XHJcbiAgQHByb3BlcnR5KGNjLkFuaW1hdGlvbilcclxuICBidWxsZXRNb25zdGVyNDogY2MuQW5pbWF0aW9uO1xyXG4gIEBwcm9wZXJ0eShjYy5BbmltYXRpb24pXHJcbiAgYnVsbGV0UmFuZ2VyOiBjYy5BbmltYXRpb247XHJcbiAgQHByb3BlcnR5KGNjLk5vZGUpXHJcbiAgc2hhZG93SGVybzogY2MuTm9kZTtcclxuICBAcHJvcGVydHkoY2MuTm9kZSlcclxuICBzaGFkb3dNb25zdGVyOiBjYy5Ob2RlO1xyXG4gIEBwcm9wZXJ0eShbY2MuTm9kZV0pXHJcbiAgc3RhcnM6IGNjLk5vZGVbXSA9IFtdO1xyXG5cclxuICBAcHJvcGVydHkoW2NjLkF1ZGlvQ2xpcF0pXHJcbiAgc291bmRzOiBjYy5BdWRpb0NsaXBbXSA9IFtdO1xyXG5cclxuICBjdXJyZW50SGVybyA9IG51bGw7XHJcbiAgY3VycmVudE1vbnN0ZXIgPSBudWxsO1xyXG4gIGhwID0gbnVsbDtcclxuICB3YWl0ID0gdHJ1ZTtcclxuICBAcHJvcGVydHkoY2MuSnNvbkFzc2V0KVxyXG4gIGNvbnRyYWN0QUJJOiBjYy5Kc29uQXNzZXQgPSBudWxsO1xyXG4gIEBwcm9wZXJ0eShbY2MuTGFiZWxdKVxyXG4gIHdpbkxhYmVsOiBjYy5MYWJlbFtdID0gW107XHJcbiAgQHByb3BlcnR5KFtjYy5MYWJlbF0pXHJcbiAgbG9zZUxhYmVsOiBjYy5MYWJlbFtdID0gW107XHJcbiAgQHByb3BlcnR5KGNjLkxhYmVsKVxyXG4gIGZhaWxlZExhYmVsOiBjYy5MYWJlbCA9IG51bGw7XHJcbiAgdG9rZW4gPSAwO1xyXG4gIGV4cCA9IDE7XHJcbiAgdHggPSBcIlwiO1xyXG4gIGNvdW50VHggPSAwO1xyXG4gIHBsYXlTb3VuZChzb3VuZElkOiBudW1iZXIsIGxvb3A6IGJvb2xlYW4gPSBmYWxzZSwgZGVsYXk6IG51bWJlciA9IDApIHtcclxuICAgIHRoaXMuc2NoZWR1bGVPbmNlKCgpID0+IHtcclxuICAgICAgY2MuYXVkaW9FbmdpbmUucGxheUVmZmVjdCh0aGlzLnNvdW5kc1tzb3VuZElkXSwgbG9vcCk7XHJcbiAgICB9LCBkZWxheSk7XHJcbiAgfVxyXG4gIG9uTG9hZCgpOiB2b2lkIHtcclxuICAgIHRoaXMuc2hhZG93SGVyby55ID0gLTM5MDtcclxuICAgIHRoaXMuc2hhZG93TW9uc3Rlci55ID0gLTM5MDtcclxuICB9XHJcbiAgdXBkYXRlU2tpbihza2VsZXRvbikge1xyXG4gICAgaWYgKHdpbmRvdy5oZXJvU2tpbiA8PSAyKSB7XHJcbiAgICAgIHNrZWxldG9uLnNldFNraW4oXCJza2luMVwiKTtcclxuICAgIH0gZWxzZSBpZiAod2luZG93Lmhlcm9Ta2luIDw9IDQpIHtcclxuICAgICAgc2tlbGV0b24uc2V0U2tpbihcInNraW4yXCIpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc2tlbGV0b24uc2V0U2tpbihcInNraW4zXCIpO1xyXG4gICAgfVxyXG4gIH1cclxuICBzdGFydCgpOiB2b2lkIHtcclxuICAgIGxldCBwYXJhbXMgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKS5zZWFyY2hQYXJhbXM7XHJcblxyXG4gICAgd2luZG93Lmhlcm8gPSBwYXJhbXMuZ2V0KFwiaFwiKTtcclxuICAgIHdpbmRvdy5tb25zdGVyID0gcGFyYW1zLmdldChcIm1cIikgLSAxO1xyXG4gICAgd2luZG93Lmhlcm9JZCA9IHBhcmFtcy5nZXQoXCJoZXJvaWRcIik7XHJcblxyXG4gICAgd2luZG93Lmhlcm9Ta2luID0gcGFyYW1zLmdldChcInNcIik7XHJcbiAgICB3aW5kb3cubGV2ZWwgPSBwYXJhbXMuZ2V0KFwibFwiKTtcclxuXHJcbiAgICB0aGlzLmN1cnJlbnRIZXJvID0gdGhpcy5oZXJvZXNbd2luZG93Lmhlcm9dO1xyXG5cclxuICAgIHRoaXMuY3VycmVudE1vbnN0ZXIgPSB0aGlzLm1vbnN0ZXJzW3dpbmRvdy5tb25zdGVyXTtcclxuICAgIHRoaXMudXBkYXRlU2tpbih0aGlzLmN1cnJlbnRIZXJvKTtcclxuICAgIHRoaXMuc2NoZWR1bGVPbmNlKHRoaXMuYmF0dGxlLCAxKTtcclxuICAgIHQodGhpcy5ub2RlKVxyXG4gICAgICAuY2FsbCgoKSA9PiB7XHJcbiAgICAgICAgLyogICovXHJcbiAgICAgICAgdGhpcy5jdXJyZW50SGVyby5zZXRBbmltYXRpb24oMCwgXCJydW5cIiwgdHJ1ZSk7XHJcbiAgICAgICAgdCh0aGlzLmN1cnJlbnRIZXJvLm5vZGUpXHJcbiAgICAgICAgICAudG8oMiwgeyB4OiAtNDAwIH0pXHJcbiAgICAgICAgICAuY2FsbCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEhlcm8uc2V0QW5pbWF0aW9uKDAsIFwiaWRsZVwiLCB0cnVlKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAuc3RhcnQoKTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRNb25zdGVyLnNldEFuaW1hdGlvbigwLCBcInJ1blwiLCB0cnVlKTtcclxuICAgICAgICB0KHRoaXMuY3VycmVudE1vbnN0ZXIubm9kZSlcclxuICAgICAgICAgIC50bygyLCB7IHg6IDQwMCB9KVxyXG4gICAgICAgICAgLmNhbGwoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRNb25zdGVyLnNldEFuaW1hdGlvbigwLCBcImlkbGVcIiwgdHJ1ZSk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgLnN0YXJ0KCk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5kZWxheSgyKVxyXG4gICAgICAuY2FsbCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5ocEhlcm8ubm9kZS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuaHBNb25zdGVyLm5vZGUuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgfSlcclxuICAgICAgLmRlbGF5KDEpXHJcbiAgICAgIC5jYWxsKCgpID0+IHtcclxuICAgICAgICB0aGlzLmJhdHRsZVN0YXJ0QW5pbS5ub2RlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5iYXR0bGVTdGFydEFuaW0uc2V0QW5pbWF0aW9uKDAsIFwiYW5pbWF0aW9uXCIsIHRydWUpO1xyXG4gICAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKCgpID0+IHtcclxuICAgICAgICAgIHRoaXMuYmF0dGxlU3RhcnRBbmltLm5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgfSwgMSk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5kZWxheSgzKVxyXG4gICAgICAuY2FsbCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50SGVyby5zZXRTdGFydExpc3RlbmVyKCh0cmFjaykgPT4ge1xyXG4gICAgICAgICAgaWYgKHRyYWNrLmFuaW1hdGlvbi5uYW1lID09IFwiYXRrXCIpIHtcclxuICAgICAgICAgICAgaWYgKHdpbmRvdy5oZXJvICE9IDApXHJcbiAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZU9uY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ibGluayh0aGlzLmN1cnJlbnRNb25zdGVyLm5vZGUpO1xyXG4gICAgICAgICAgICAgIH0sIDAuNSk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJsaW5rKHRoaXMuY3VycmVudE1vbnN0ZXIubm9kZSk7XHJcbiAgICAgICAgICAgICAgfSwgMC4zKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICAvL1dhcnJpb3JcclxuICAgICAgICBpZiAod2luZG93Lmhlcm8gPT0gMSkge1xyXG4gICAgICAgICAgLy8gZml4XHJcbiAgICAgICAgICB0aGlzLmN1cnJlbnRIZXJvLnNldEFuaW1hdGlvbigwLCBcInJ1blwiLCB0cnVlKTtcclxuICAgICAgICAgIHQodGhpcy5jdXJyZW50SGVyby5ub2RlKVxyXG4gICAgICAgICAgICAuYnkoMC41LCB7IHg6IDQ1MCB9KVxyXG4gICAgICAgICAgICAuY2FsbCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgdGhpcy5oZXJvQXR0YWNrKCk7XHJcbiAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZSh0aGlzLmhlcm9BdHRhY2ssIDEpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhcnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9SYW5nZXJcclxuICAgICAgICBlbHNlIGlmICh3aW5kb3cuaGVybyA9PSAwKSB7XHJcbiAgICAgICAgICAvLyBmaXhcclxuICAgICAgICAgIHRoaXMuaGVyb0F0dGFjaygpO1xyXG4gICAgICAgICAgdGhpcy5zY2hlZHVsZSh0aGlzLmhlcm9BdHRhY2ssIDAuNSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vQXNzYXNzaW5cclxuICAgICAgICBlbHNlIGlmICh3aW5kb3cuaGVybyA9PSAyKSB7XHJcbiAgICAgICAgICB0aGlzLmN1cnJlbnRIZXJvLnNldEFuaW1hdGlvbigwLCBcInJ1blwiLCB0cnVlKTtcclxuICAgICAgICAgIHQodGhpcy5jdXJyZW50SGVyby5ub2RlKVxyXG4gICAgICAgICAgICAuYnkoMC41LCB7IHg6IDQ1MCB9KVxyXG4gICAgICAgICAgICAuY2FsbCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgdGhpcy5oZXJvQXR0YWNrKCk7XHJcbiAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZSh0aGlzLmhlcm9BdHRhY2ssIDEpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhcnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jdXJyZW50TW9uc3Rlci5zZXRTdGFydExpc3RlbmVyKCh0cmFjaykgPT4ge1xyXG4gICAgICAgICAgaWYgKHRyYWNrLmFuaW1hdGlvbi5uYW1lID09IFwiYXRrXCIpIHtcclxuICAgICAgICAgICAgaWYgKHdpbmRvdy5tb25zdGVyID09IDMpIHtcclxuICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJsaW5rKHRoaXMuY3VycmVudEhlcm8ubm9kZSk7XHJcbiAgICAgICAgICAgICAgfSwgMC42KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cubW9uc3RlciA9PSAyKSB7XHJcbiAgICAgICAgICAgICAgaWYgKHdpbmRvdy5oZXJvID09IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5ibGluayh0aGlzLmN1cnJlbnRIZXJvLm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfSwgMC44KTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZU9uY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLmJsaW5rKHRoaXMuY3VycmVudEhlcm8ubm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9LCAwLjYpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJsaW5rKHRoaXMuY3VycmVudEhlcm8ubm9kZSk7XHJcbiAgICAgICAgICAgICAgfSwgMC4yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAod2luZG93Lm1vbnN0ZXIgPT0gMSkge1xyXG4gICAgICAgICAgICAgIHRoaXMuYnVsbGV0TW9uc3Rlci5ub2RlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgaWYgKHdpbmRvdy5oZXJvID09IDEgfHwgd2luZG93Lmhlcm8gPT0gMilcclxuICAgICAgICAgICAgICAgIC8vIGZpeFxyXG4gICAgICAgICAgICAgICAgdGhpcy5idWxsZXRNb25zdGVyLnBsYXkoXCJtb25zdGVyX2J1bGxldF8xXCIpO1xyXG4gICAgICAgICAgICAgIGVsc2UgaWYgKHdpbmRvdy5oZXJvID09IDApXHJcbiAgICAgICAgICAgICAgICAvLyBmaXhcclxuICAgICAgICAgICAgICAgIHRoaXMuYnVsbGV0TW9uc3Rlci5wbGF5KFwibW9uc3Rlcl9idWxsZXRfMlwiKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cubW9uc3RlciA9PSAyKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZU9uY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idWxsZXRNb25zdGVyMy5ub2RlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1bGxldE1vbnN0ZXIzLnBsYXkoXCJtb25zdGVyX2J1bGxldF8zXCIpO1xyXG4gICAgICAgICAgICAgIH0sIDAuNSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAod2luZG93Lm1vbnN0ZXIgPT0gMykge1xyXG4gICAgICAgICAgICAgIHRoaXMuYnVsbGV0TW9uc3RlcjQubm9kZS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgIHRoaXMuYnVsbGV0TW9uc3RlcjQucGxheShcIm1vbnN0ZXJfYnVsbGV0XzRcIik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5idWxsZXRNb25zdGVyMi5ub2RlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgaWYgKHdpbmRvdy5oZXJvID09IDEgfHwgd2luZG93Lmhlcm8gPT0gMilcclxuICAgICAgICAgICAgICAgIC8vIGZpeFxyXG4gICAgICAgICAgICAgICAgdGhpcy5idWxsZXRNb25zdGVyMi5wbGF5KFwibW9uc3Rlcl9idWxsZXRfMVwiKTtcclxuICAgICAgICAgICAgICBlbHNlIGlmICh3aW5kb3cuaGVybyA9PSAwKVxyXG4gICAgICAgICAgICAgICAgLy8gZml4XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1bGxldE1vbnN0ZXIyLnBsYXkoXCJtb25zdGVyX2J1bGxldF8yXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHdpbmRvdy5tb25zdGVyID09IDEpIHtcclxuICAgICAgICAgIGlmICh3aW5kb3cuaGVybyA9PSAwKVxyXG4gICAgICAgICAgICAvLyBmaXhcclxuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZSh0aGlzLm1vbnN0ZXJBdHRhY2ssIDAuMyk7XHJcbiAgICAgICAgICBlbHNlIHRoaXMuc2NoZWR1bGUodGhpcy5tb25zdGVyQXR0YWNrLCAwLjUpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAod2luZG93Lm1vbnN0ZXIgPT0gMikge1xyXG4gICAgICAgICAgdGhpcy5tb25zdGVyQXR0YWNrKCk7XHJcbiAgICAgICAgICB0aGlzLnNjaGVkdWxlKHRoaXMubW9uc3RlckF0dGFjaywgMS41KTtcclxuICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5tb25zdGVyID09IDMpIHtcclxuICAgICAgICAgIGlmICh3aW5kb3cuaGVybyA9PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudE1vbnN0ZXIuc2V0QW5pbWF0aW9uKDAsIFwicnVuXCIsIHRydWUpO1xyXG4gICAgICAgICAgICB0KHRoaXMuY3VycmVudE1vbnN0ZXIubm9kZSlcclxuICAgICAgICAgICAgICAuYnkoMC41LCB7IHBvc2l0aW9uOiBjYy52MigtNTAwLCAwKSB9KVxyXG4gICAgICAgICAgICAgIC5jYWxsKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMubW9uc3RlckF0dGFjaygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZSh0aGlzLm1vbnN0ZXJBdHRhY2ssIDEuMik7XHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAuc3RhcnQoKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgICB0aGlzLm1vbnN0ZXJBdHRhY2soKTtcclxuICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlKHRoaXMubW9uc3RlckF0dGFjaywgMS4yKTtcclxuICAgICAgICAgICAgfSwgMC41KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5zY2hlZHVsZSh0aGlzLm1vbnN0ZXJBdHRhY2ssIDEuMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY3VycmVudEhlcm8uc2V0Q29tcGxldGVMaXN0ZW5lcigodHJhY2spID0+IHtcclxuICAgICAgICAgIGlmICh0cmFjay5hbmltYXRpb24ubmFtZSA9PSBcImF0a1wiKSB7XHJcbiAgICAgICAgICAgIGlmICh3aW5kb3cuaGVybyA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgaWYgKHdpbmRvdy5tb25zdGVyICE9IDMpIHRoaXMuYnVsbGV0UmFuZ2VyLnBsYXkoXCJyYW5nZXJfYnVsbGV0XCIpO1xyXG4gICAgICAgICAgICAgIGVsc2UgdGhpcy5idWxsZXRSYW5nZXIucGxheShcInJhbmdlcl9idWxsZXQyXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuaHBNb25zdGVyLnByb2dyZXNzIC09IHRoaXMuZGFtZUhlcm87XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmhwTW9uc3Rlci5wcm9ncmVzcyA8IDAuMSAmJiB0aGlzLndhaXQpIHtcclxuICAgICAgICAgICAgICAvLyAxIC8gMTAgPSAwLjFcclxuICAgICAgICAgICAgICB0aGlzLmhwTW9uc3Rlci5wcm9ncmVzcyA9IDAuMTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuaHBNb25zdGVyLnByb2dyZXNzIDw9IDAuMDEpIHtcclxuICAgICAgICAgICAgICB0aGlzLnBsYXlTb3VuZChTT1VORC5XSU4sIGZhbHNlLCAwKTtcclxuICAgICAgICAgICAgICB0aGlzLnVuc2NoZWR1bGUodGhpcy5oZXJvQXR0YWNrKTtcclxuICAgICAgICAgICAgICB0aGlzLnVuc2NoZWR1bGUodGhpcy5tb25zdGVyQXR0YWNrKTtcclxuICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRIZXJvLnNldEFuaW1hdGlvbigwLCBcIndpblwiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgLy8gdGhpcy5jdXJyZW50TW9uc3Rlci5zZXRBbmltYXRpb24oMCwgXCJkaWVcIiwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgIHRoaXMuY3VycmVudE1vbnN0ZXIuc2V0QW5pbWF0aW9uKDAsIFwiRGllXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdpbmRvdy5oZXJvU2tpbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJzW2ldLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMud2luLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAod2luZG93Lmhlcm8gPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAvLyBmaXhcclxuICAgICAgICAgICAgICAgICAgdGhpcy53aW4uZ2V0Q2hpbGRCeU5hbWUoXCJXYXJyaW9yXCIpLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMud2luLmdldENoaWxkQnlOYW1lKFwiUmFuZ2VyXCIpLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLndpbi5nZXRDaGlsZEJ5TmFtZShcIkFzc2Fzc2luXCIpLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICBsZXQgc3AgPSB0aGlzLndpblxyXG4gICAgICAgICAgICAgICAgICAgIC5nZXRDaGlsZEJ5TmFtZShcIldhcnJpb3JcIilcclxuICAgICAgICAgICAgICAgICAgICAuZ2V0Q29tcG9uZW50KFwic3AuU2tlbGV0b25cIik7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU2tpbihzcCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5oZXJvID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgLy8gZml4XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMud2luLmdldENoaWxkQnlOYW1lKFwiV2FycmlvclwiKS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgdGhpcy53aW4uZ2V0Q2hpbGRCeU5hbWUoXCJSYW5nZXJcIikuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgdGhpcy53aW4uZ2V0Q2hpbGRCeU5hbWUoXCJBc3Nhc3NpblwiKS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgbGV0IHNwID0gdGhpcy53aW5cclxuICAgICAgICAgICAgICAgICAgICAuZ2V0Q2hpbGRCeU5hbWUoXCJSYW5nZXJcIilcclxuICAgICAgICAgICAgICAgICAgICAuZ2V0Q29tcG9uZW50KFwic3AuU2tlbGV0b25cIik7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU2tpbihzcCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5oZXJvID09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy53aW4uZ2V0Q2hpbGRCeU5hbWUoXCJXYXJyaW9yXCIpLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLndpbi5nZXRDaGlsZEJ5TmFtZShcIlJhbmdlclwiKS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgdGhpcy53aW4uZ2V0Q2hpbGRCeU5hbWUoXCJBc3Nhc3NpblwiKS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICBsZXQgc3AgPSB0aGlzLndpblxyXG4gICAgICAgICAgICAgICAgICAgIC5nZXRDaGlsZEJ5TmFtZShcIkFzc2Fzc2luXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmdldENvbXBvbmVudChcInNwLlNrZWxldG9uXCIpO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVNraW4oc3ApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0sIDEpO1xyXG4gICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY3VycmVudE1vbnN0ZXIuc2V0Q29tcGxldGVMaXN0ZW5lcigodHJhY2spID0+IHtcclxuICAgICAgICAgIGlmICh0cmFjay5hbmltYXRpb24ubmFtZSA9PSBcImF0a1wiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaHBIZXJvLnByb2dyZXNzID0gdGhpcy5ocEhlcm8ucHJvZ3Jlc3MgLSB0aGlzLmRhbWVNb25zdGVyO1xyXG4gICAgICAgICAgICBpZiAodGhpcy53YWl0ICYmIHRoaXMuaHBIZXJvLnByb2dyZXNzIDw9IDAuMSkge1xyXG4gICAgICAgICAgICAgIHRoaXMuaHBIZXJvLnByb2dyZXNzID0gMC4xO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5ocEhlcm8ucHJvZ3Jlc3MgPD0gMC4wMSkge1xyXG4gICAgICAgICAgICAgIHRoaXMucGxheVNvdW5kKFNPVU5ELkxPU0UsIGZhbHNlLCAwKTtcclxuICAgICAgICAgICAgICB0aGlzLnVuc2NoZWR1bGUodGhpcy5tb25zdGVyQXR0YWNrKTtcclxuICAgICAgICAgICAgICB0aGlzLnVuc2NoZWR1bGUodGhpcy5oZXJvQXR0YWNrKTtcclxuICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRIZXJvLnNldEFuaW1hdGlvbigwLCBcImxvc2VcIiwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgIHRoaXMuY3VycmVudE1vbnN0ZXIuc2V0QW5pbWF0aW9uKDAsIFwiaWRsZVwiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZU9uY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb3NlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgfSwgMSk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5zdGFydCgpO1xyXG4gIH1cclxuXHJcbiAgc2hvd0ZhaWxlZChtc2cpIHtcclxuICAgIHRoaXMuZmFpbGVkLmFjdGl2ZSA9IHRydWU7XHJcbiAgICB0aGlzLmZhaWxlZExhYmVsLnN0cmluZyA9IG1zZztcclxuICB9XHJcblxyXG4gIGFzeW5jIGJhdHRsZSgpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGluc3RhbmNlLnBvc3QoXCIvaGVyby9iYXR0bGVcIiwge1xyXG4gICAgICAgIGhlcm9faWQ6IHBhcnNlSW50KHdpbmRvdy5oZXJvSWQpLFxyXG4gICAgICAgIG1vbnN0ZXJfaWQ6IHdpbmRvdy5tb25zdGVyICsgMSxcclxuICAgICAgfSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKHJlcy5kYXRhKTtcclxuICAgICAgaWYgKHJlcy5kYXRhKSB7XHJcbiAgICAgICAgdGhpcy50b2tlbiA9IDEwMDtcclxuICAgICAgICB0aGlzLmV4cCA9IDEwMDtcclxuXHJcbiAgICAgICAgdGhpcy53aW5HYW1lKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy50b2tlbiA9IDA7XHJcbiAgICAgICAgdGhpcy5leHAgPSAwO1xyXG5cclxuICAgICAgICB0aGlzLmxvc2VHYW1lKCk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgfVxyXG4gIH1cclxuICB1cGRhdGUoKTogdm9pZCB7XHJcbiAgICB0aGlzLnNoYWRvd0hlcm8ueCA9IHRoaXMuY3VycmVudEhlcm8ubm9kZS54O1xyXG4gICAgdGhpcy5zaGFkb3dNb25zdGVyLnggPSB0aGlzLmN1cnJlbnRNb25zdGVyLm5vZGUueDtcclxuICB9XHJcblxyXG4gIGhlcm9BdHRhY2soKTogdm9pZCB7XHJcbiAgICB0aGlzLmN1cnJlbnRIZXJvLnNldEFuaW1hdGlvbigwLCBcImF0a1wiLCBmYWxzZSk7XHJcbiAgICBpZiAod2luZG93Lmhlcm8gPT0gMCkge1xyXG4gICAgICB0aGlzLnBsYXlTb3VuZChTT1VORC5IMSwgZmFsc2UsIDApO1xyXG4gICAgfSBlbHNlIGlmICh3aW5kb3cuaGVybyA9PSAxKSB7XHJcbiAgICAgIHRoaXMucGxheVNvdW5kKFNPVU5ELkgyLCBmYWxzZSwgMCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnBsYXlTb3VuZChTT1VORC5IMywgZmFsc2UsIDApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbW9uc3RlckF0dGFjaygpOiB2b2lkIHtcclxuICAgIC8vIGNjLmxvZyhcIm1vbnN0ZXIgYXR0YWNrXCIpO1xyXG4gICAgdGhpcy5jdXJyZW50TW9uc3Rlci5zZXRBbmltYXRpb24oMCwgXCJhdGtcIiwgZmFsc2UpO1xyXG4gICAgaWYgKHdpbmRvdy5tb25zdGVyID09IDApIHtcclxuICAgICAgdGhpcy5wbGF5U291bmQoU09VTkQuRTEsIGZhbHNlLCAwKTtcclxuICAgIH0gZWxzZSBpZiAod2luZG93Lm1vbnN0ZXIgPT0gMSkge1xyXG4gICAgICB0aGlzLnBsYXlTb3VuZChTT1VORC5FMiwgZmFsc2UsIDApO1xyXG4gICAgfSBlbHNlIGlmICh3aW5kb3cubW9uc3RlciA9PSAyKSB7XHJcbiAgICAgIHRoaXMucGxheVNvdW5kKFNPVU5ELkUzLCBmYWxzZSwgMCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnBsYXlTb3VuZChTT1VORC5FNCwgZmFsc2UsIDApO1xyXG4gICAgfVxyXG4gIH1cclxuICBibGluayhub2RlKTogdm9pZCB7XHJcbiAgICBub2RlLmNvbG9yID0gY2MuQ29sb3IuUkVEO1xyXG4gICAgdChub2RlKVxyXG4gICAgICAuZGVsYXkoMC4xKVxyXG4gICAgICAuY2FsbCgoKSA9PiB7XHJcbiAgICAgICAgbm9kZS5jb2xvciA9IGNjLkNvbG9yLldISVRFO1xyXG4gICAgICB9KVxyXG4gICAgICAuc3RhcnQoKTtcclxuICB9XHJcblxyXG4gIHdpbkdhbWUoKTogdm9pZCB7XHJcbiAgICB0aGlzLndhaXQgPSBmYWxzZTtcclxuICAgIHRoaXMuZGFtZUhlcm8gPSAwLjU7XHJcbiAgICB0aGlzLmRhbWVNb25zdGVyID0gMDtcclxuICAgIHRoaXMud2luTGFiZWxbMF0uc3RyaW5nID0gYCske3RoaXMuZXhwfWA7XHJcbiAgICB0aGlzLndpbkxhYmVsWzFdLnN0cmluZyA9IGArJHt0aGlzLnRva2VufWA7XHJcbiAgICB0aGlzLndpbkxhYmVsWzJdLnN0cmluZyA9IGBMZXZlbCAke3dpbmRvdy5sZXZlbH1gO1xyXG4gIH1cclxuXHJcbiAgbG9zZUdhbWUoKTogdm9pZCB7XHJcbiAgICB0aGlzLndhaXQgPSBmYWxzZTtcclxuICAgIHRoaXMuZGFtZU1vbnN0ZXIgPSAwLjU7XHJcbiAgICB0aGlzLmRhbWVIZXJvID0gMDtcclxuICAgIHRoaXMubG9zZUxhYmVsWzBdLnN0cmluZyA9IGArJHt0aGlzLmV4cH1gO1xyXG4gICAgdGhpcy5sb3NlTGFiZWxbMV0uc3RyaW5nID0gYCske3RoaXMudG9rZW59YDtcclxuICAgIHRoaXMubG9zZUxhYmVsWzJdLnN0cmluZyA9IGBMZXZlbCAke3dpbmRvdy5sZXZlbH1gO1xyXG4gIH1cclxufVxyXG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Library/web3.min.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}(function (global){
"use strict";
cc._RF.push(module, '1c0076FAtZPlpGe9Wxxlgqf', 'web3.min');
// Library/web3.min.js

"use strict";

var _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
  return typeof e;
} : function (e) {
  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
},
    _typeof = "function" == typeof Symbol && "symbol" === _typeof2(Symbol.iterator) ? function (e) {
  return void 0 === e ? "undefined" : _typeof2(e);
} : function (e) {
  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : void 0 === e ? "undefined" : _typeof2(e);
};

!function (e) {
  if ("object" === ("undefined" == typeof exports ? "undefined" : _typeof(exports)) && "undefined" != typeof module) module.exports = e();else if ("function" == typeof define && define.amd) define([], e);else {
    ("undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this).Web3 = e();
  }
}(function () {
  var define, module, exports;
  return function o(a, s, u) {
    function c(t, e) {
      if (!s[t]) {
        if (!a[t]) {
          var r = "function" == typeof require && require;
          if (!e && r) return r(t, !0);
          if (f) return f(t, !0);
          var n = new Error("Cannot find module '" + t + "'");
          throw n.code = "MODULE_NOT_FOUND", n;
        }

        var i = s[t] = {
          exports: {}
        };
        a[t][0].call(i.exports, function (e) {
          return c(a[t][1][e] || e);
        }, i, i.exports, o, a, s, u);
      }

      return s[t].exports;
    }

    for (var f = "function" == typeof require && require, e = 0; e < u.length; e++) {
      c(u[e]);
    }

    return c;
  }({
    1: [function (e, t, r) {
      var n = r;
      n.bignum = e("bn.js"), n.define = e("./asn1/api").define, n.base = e("./asn1/base"), n.constants = e("./asn1/constants"), n.decoders = e("./asn1/decoders"), n.encoders = e("./asn1/encoders");
    }, {
      "./asn1/api": 2,
      "./asn1/base": 4,
      "./asn1/constants": 8,
      "./asn1/decoders": 10,
      "./asn1/encoders": 13,
      "bn.js": "BN"
    }],
    2: [function (e, t, r) {
      var n = e("../asn1"),
          i = e("inherits");

      function o(e, t) {
        this.name = e, this.body = t, this.decoders = {}, this.encoders = {};
      }

      r.define = function (e, t) {
        return new o(e, t);
      }, o.prototype._createNamed = function (t) {
        var r;

        try {
          r = e("vm").runInThisContext("(function " + this.name + "(entity) {\n  this._initNamed(entity);\n})");
        } catch (e) {
          r = function r(e) {
            this._initNamed(e);
          };
        }

        return i(r, t), r.prototype._initNamed = function (e) {
          t.call(this, e);
        }, new r(this);
      }, o.prototype._getDecoder = function (e) {
        return e = e || "der", this.decoders.hasOwnProperty(e) || (this.decoders[e] = this._createNamed(n.decoders[e])), this.decoders[e];
      }, o.prototype.decode = function (e, t, r) {
        return this._getDecoder(t).decode(e, r);
      }, o.prototype._getEncoder = function (e) {
        return e = e || "der", this.encoders.hasOwnProperty(e) || (this.encoders[e] = this._createNamed(n.encoders[e])), this.encoders[e];
      }, o.prototype.encode = function (e, t, r) {
        return this._getEncoder(t).encode(e, r);
      };
    }, {
      "../asn1": 1,
      inherits: 102,
      vm: 169
    }],
    3: [function (e, t, r) {
      var n = e("inherits"),
          i = e("../base").Reporter,
          o = e("buffer").Buffer;

      function a(e, t) {
        i.call(this, t), o.isBuffer(e) ? (this.base = e, this.offset = 0, this.length = e.length) : this.error("Input not Buffer");
      }

      function s(e, t) {
        if (Array.isArray(e)) this.length = 0, this.value = e.map(function (e) {
          return e instanceof s || (e = new s(e, t)), this.length += e.length, e;
        }, this);else if ("number" == typeof e) {
          if (!(0 <= e && e <= 255)) return t.error("non-byte EncoderBuffer value");
          this.value = e, this.length = 1;
        } else if ("string" == typeof e) this.value = e, this.length = o.byteLength(e);else {
          if (!o.isBuffer(e)) return t.error("Unsupported type: " + (void 0 === e ? "undefined" : _typeof(e)));
          this.value = e, this.length = e.length;
        }
      }

      n(a, i), (r.DecoderBuffer = a).prototype.save = function () {
        return {
          offset: this.offset,
          reporter: i.prototype.save.call(this)
        };
      }, a.prototype.restore = function (e) {
        var t = new a(this.base);
        return t.offset = e.offset, t.length = this.offset, this.offset = e.offset, i.prototype.restore.call(this, e.reporter), t;
      }, a.prototype.isEmpty = function () {
        return this.offset === this.length;
      }, a.prototype.readUInt8 = function (e) {
        return this.offset + 1 <= this.length ? this.base.readUInt8(this.offset++, !0) : this.error(e || "DecoderBuffer overrun");
      }, a.prototype.skip = function (e, t) {
        if (!(this.offset + e <= this.length)) return this.error(t || "DecoderBuffer overrun");
        var r = new a(this.base);
        return r._reporterState = this._reporterState, r.offset = this.offset, r.length = this.offset + e, this.offset += e, r;
      }, a.prototype.raw = function (e) {
        return this.base.slice(e ? e.offset : this.offset, this.length);
      }, (r.EncoderBuffer = s).prototype.join = function (t, r) {
        return t || (t = new o(this.length)), r || (r = 0), 0 === this.length || (Array.isArray(this.value) ? this.value.forEach(function (e) {
          e.join(t, r), r += e.length;
        }) : ("number" == typeof this.value ? t[r] = this.value : "string" == typeof this.value ? t.write(this.value, r) : o.isBuffer(this.value) && this.value.copy(t, r), r += this.length)), t;
      };
    }, {
      "../base": 4,
      buffer: 47,
      inherits: 102
    }],
    4: [function (e, t, r) {
      var n = r;
      n.Reporter = e("./reporter").Reporter, n.DecoderBuffer = e("./buffer").DecoderBuffer, n.EncoderBuffer = e("./buffer").EncoderBuffer, n.Node = e("./node");
    }, {
      "./buffer": 3,
      "./node": 5,
      "./reporter": 6
    }],
    5: [function (e, t, r) {
      var f = e("../base").Reporter,
          n = e("../base").EncoderBuffer,
          l = e("../base").DecoderBuffer,
          i = e("minimalistic-assert"),
          o = ["seq", "seqof", "set", "setof", "objid", "bool", "gentime", "utctime", "null_", "enum", "int", "objDesc", "bitstr", "bmpstr", "charstr", "genstr", "graphstr", "ia5str", "iso646str", "numstr", "octstr", "printstr", "t61str", "unistr", "utf8str", "videostr"],
          a = ["key", "obj", "use", "optional", "explicit", "implicit", "def", "choice", "any", "contains"].concat(o);

      function s(e, t) {
        var r = {};
        (this._baseState = r).enc = e, r.parent = t || null, r.children = null, r.tag = null, r.args = null, r.reverseArgs = null, r.choice = null, r.optional = !1, r.any = !1, r.obj = !1, r.use = null, r.useDecoder = null, r.key = null, r["default"] = null, r.explicit = null, r.implicit = null, r.contains = null, r.parent || (r.children = [], this._wrap());
      }

      t.exports = s;
      var u = ["enc", "parent", "children", "tag", "args", "reverseArgs", "choice", "optional", "any", "obj", "use", "alteredUse", "key", "default", "explicit", "implicit", "contains"];
      s.prototype.clone = function () {
        var t = this._baseState,
            r = {};
        u.forEach(function (e) {
          r[e] = t[e];
        });
        var e = new this.constructor(r.parent);
        return e._baseState = r, e;
      }, s.prototype._wrap = function () {
        var r = this._baseState;
        a.forEach(function (t) {
          this[t] = function () {
            var e = new this.constructor(this);
            return r.children.push(e), e[t].apply(e, arguments);
          };
        }, this);
      }, s.prototype._init = function (e) {
        var t = this._baseState;
        i(null === t.parent), e.call(this), t.children = t.children.filter(function (e) {
          return e._baseState.parent === this;
        }, this), i.equal(t.children.length, 1, "Root node can have only one child");
      }, s.prototype._useArgs = function (e) {
        var t = this._baseState,
            r = e.filter(function (e) {
          return e instanceof this.constructor;
        }, this);
        e = e.filter(function (e) {
          return !(e instanceof this.constructor);
        }, this), 0 !== r.length && (i(null === t.children), (t.children = r).forEach(function (e) {
          e._baseState.parent = this;
        }, this)), 0 !== e.length && (i(null === t.args), t.args = e, t.reverseArgs = e.map(function (r) {
          if ("object" !== (void 0 === r ? "undefined" : _typeof(r)) || r.constructor !== Object) return r;
          var n = {};
          return Object.keys(r).forEach(function (e) {
            e == (0 | e) && (e |= 0);
            var t = r[e];
            n[t] = e;
          }), n;
        }));
      }, ["_peekTag", "_decodeTag", "_use", "_decodeStr", "_decodeObjid", "_decodeTime", "_decodeNull", "_decodeInt", "_decodeBool", "_decodeList", "_encodeComposite", "_encodeStr", "_encodeObjid", "_encodeTime", "_encodeNull", "_encodeInt", "_encodeBool"].forEach(function (t) {
        s.prototype[t] = function () {
          var e = this._baseState;
          throw new Error(t + " not implemented for encoding: " + e.enc);
        };
      }), o.forEach(function (r) {
        s.prototype[r] = function () {
          var e = this._baseState,
              t = Array.prototype.slice.call(arguments);
          return i(null === e.tag), e.tag = r, this._useArgs(t), this;
        };
      }), s.prototype.use = function (e) {
        i(e);
        var t = this._baseState;
        return i(null === t.use), t.use = e, this;
      }, s.prototype.optional = function () {
        return this._baseState.optional = !0, this;
      }, s.prototype.def = function (e) {
        var t = this._baseState;
        return i(null === t["default"]), t["default"] = e, t.optional = !0, this;
      }, s.prototype.explicit = function (e) {
        var t = this._baseState;
        return i(null === t.explicit && null === t.implicit), t.explicit = e, this;
      }, s.prototype.implicit = function (e) {
        var t = this._baseState;
        return i(null === t.explicit && null === t.implicit), t.implicit = e, this;
      }, s.prototype.obj = function () {
        var e = this._baseState,
            t = Array.prototype.slice.call(arguments);
        return e.obj = !0, 0 !== t.length && this._useArgs(t), this;
      }, s.prototype.key = function (e) {
        var t = this._baseState;
        return i(null === t.key), t.key = e, this;
      }, s.prototype.any = function () {
        return this._baseState.any = !0, this;
      }, s.prototype.choice = function (t) {
        var e = this._baseState;
        return i(null === e.choice), e.choice = t, this._useArgs(Object.keys(t).map(function (e) {
          return t[e];
        })), this;
      }, s.prototype.contains = function (e) {
        var t = this._baseState;
        return i(null === t.use), t.contains = e, this;
      }, s.prototype._decode = function (t, r) {
        var e = this._baseState;
        if (null === e.parent) return t.wrapResult(e.children[0]._decode(t, r));
        var n,
            i = e["default"],
            o = !0,
            a = null;

        if (null !== e.key && (a = t.enterKey(e.key)), e.optional) {
          var s = null;

          if (null !== e.explicit ? s = e.explicit : null !== e.implicit ? s = e.implicit : null !== e.tag && (s = e.tag), null !== s || e.any) {
            if (o = this._peekTag(t, s, e.any), t.isError(o)) return o;
          } else {
            var u = t.save();

            try {
              null === e.choice ? this._decodeGeneric(e.tag, t, r) : this._decodeChoice(t, r), o = !0;
            } catch (e) {
              o = !1;
            }

            t.restore(u);
          }
        }

        if (e.obj && o && (n = t.enterObject()), o) {
          if (null !== e.explicit) {
            var c = this._decodeTag(t, e.explicit);

            if (t.isError(c)) return c;
            t = c;
          }

          var f = t.offset;

          if (null === e.use && null === e.choice) {
            if (e.any) u = t.save();

            var h = this._decodeTag(t, null !== e.implicit ? e.implicit : e.tag, e.any);

            if (t.isError(h)) return h;
            e.any ? i = t.raw(u) : t = h;
          }

          if (r && r.track && null !== e.tag && r.track(t.path(), f, t.length, "tagged"), r && r.track && null !== e.tag && r.track(t.path(), t.offset, t.length, "content"), i = e.any ? i : null === e.choice ? this._decodeGeneric(e.tag, t, r) : this._decodeChoice(t, r), t.isError(i)) return i;

          if (e.any || null !== e.choice || null === e.children || e.children.forEach(function (e) {
            e._decode(t, r);
          }), e.contains && ("octstr" === e.tag || "bitstr" === e.tag)) {
            var d = new l(i);
            i = this._getUse(e.contains, t._reporterState.obj)._decode(d, r);
          }
        }

        return e.obj && o && (i = t.leaveObject(n)), null === e.key || null === i && !0 !== o ? null !== a && t.exitKey(a) : t.leaveKey(a, e.key, i), i;
      }, s.prototype._decodeGeneric = function (e, t, r) {
        var n = this._baseState;
        return "seq" === e || "set" === e ? null : "seqof" === e || "setof" === e ? this._decodeList(t, e, n.args[0], r) : /str$/.test(e) ? this._decodeStr(t, e, r) : "objid" === e && n.args ? this._decodeObjid(t, n.args[0], n.args[1], r) : "objid" === e ? this._decodeObjid(t, null, null, r) : "gentime" === e || "utctime" === e ? this._decodeTime(t, e, r) : "null_" === e ? this._decodeNull(t, r) : "bool" === e ? this._decodeBool(t, r) : "objDesc" === e ? this._decodeStr(t, e, r) : "int" === e || "enum" === e ? this._decodeInt(t, n.args && n.args[0], r) : null !== n.use ? this._getUse(n.use, t._reporterState.obj)._decode(t, r) : t.error("unknown tag: " + e);
      }, s.prototype._getUse = function (e, t) {
        var r = this._baseState;
        return r.useDecoder = this._use(e, t), i(null === r.useDecoder._baseState.parent), r.useDecoder = r.useDecoder._baseState.children[0], r.implicit !== r.useDecoder._baseState.implicit && (r.useDecoder = r.useDecoder.clone(), r.useDecoder._baseState.implicit = r.implicit), r.useDecoder;
      }, s.prototype._decodeChoice = function (i, o) {
        var a = this._baseState,
            s = null,
            u = !1;
        return Object.keys(a.choice).some(function (e) {
          var t = i.save(),
              r = a.choice[e];

          try {
            var n = r._decode(i, o);

            if (i.isError(n)) return !1;
            s = {
              type: e,
              value: n
            }, u = !0;
          } catch (e) {
            return i.restore(t), !1;
          }

          return !0;
        }, this), u ? s : i.error("Choice not matched");
      }, s.prototype._createEncoderBuffer = function (e) {
        return new n(e, this.reporter);
      }, s.prototype._encode = function (e, t, r) {
        var n = this._baseState;

        if (null === n["default"] || n["default"] !== e) {
          var i = this._encodeValue(e, t, r);

          if (void 0 !== i && !this._skipDefault(i, t, r)) return i;
        }
      }, s.prototype._encodeValue = function (n, i, e) {
        var t = this._baseState;
        if (null === t.parent) return t.children[0]._encode(n, i || new f());
        var r = null;

        if (this.reporter = i, t.optional && void 0 === n) {
          if (null === t["default"]) return;
          n = t["default"];
        }

        var o = null,
            a = !1;
        if (t.any) r = this._createEncoderBuffer(n);else if (t.choice) r = this._encodeChoice(n, i);else if (t.contains) o = this._getUse(t.contains, e)._encode(n, i), a = !0;else if (t.children) o = t.children.map(function (e) {
          if ("null_" === e._baseState.tag) return e._encode(null, i, n);
          if (null === e._baseState.key) return i.error("Child should have a key");
          var t = i.enterKey(e._baseState.key);
          if ("object" !== (void 0 === n ? "undefined" : _typeof(n))) return i.error("Child expected, but input is not object");

          var r = e._encode(n[e._baseState.key], i, n);

          return i.leaveKey(t), r;
        }, this).filter(function (e) {
          return e;
        }), o = this._createEncoderBuffer(o);else if ("seqof" === t.tag || "setof" === t.tag) {
          if (!t.args || 1 !== t.args.length) return i.error("Too many args for : " + t.tag);
          if (!Array.isArray(n)) return i.error("seqof/setof, but data is not Array");
          var s = this.clone();
          s._baseState.implicit = null, o = this._createEncoderBuffer(n.map(function (e) {
            var t = this._baseState;
            return this._getUse(t.args[0], n)._encode(e, i);
          }, s));
        } else null !== t.use ? r = this._getUse(t.use, e)._encode(n, i) : (o = this._encodePrimitive(t.tag, n), a = !0);

        if (!t.any && null === t.choice) {
          var u = null !== t.implicit ? t.implicit : t.tag,
              c = null === t.implicit ? "universal" : "context";
          null === u ? null === t.use && i.error("Tag could be omitted only for .use()") : null === t.use && (r = this._encodeComposite(u, a, c, o));
        }

        return null !== t.explicit && (r = this._encodeComposite(t.explicit, !1, "context", r)), r;
      }, s.prototype._encodeChoice = function (e, t) {
        var r = this._baseState,
            n = r.choice[e.type];
        return n || i(!1, e.type + " not found in " + JSON.stringify(Object.keys(r.choice))), n._encode(e.value, t);
      }, s.prototype._encodePrimitive = function (e, t) {
        var r = this._baseState;
        if (/str$/.test(e)) return this._encodeStr(t, e);
        if ("objid" === e && r.args) return this._encodeObjid(t, r.reverseArgs[0], r.args[1]);
        if ("objid" === e) return this._encodeObjid(t, null, null);
        if ("gentime" === e || "utctime" === e) return this._encodeTime(t, e);
        if ("null_" === e) return this._encodeNull();
        if ("int" === e || "enum" === e) return this._encodeInt(t, r.args && r.reverseArgs[0]);
        if ("bool" === e) return this._encodeBool(t);
        if ("objDesc" === e) return this._encodeStr(t, e);
        throw new Error("Unsupported tag: " + e);
      }, s.prototype._isNumstr = function (e) {
        return /^[0-9 ]*$/.test(e);
      }, s.prototype._isPrintstr = function (e) {
        return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(e);
      };
    }, {
      "../base": 4,
      "minimalistic-assert": 107
    }],
    6: [function (e, t, r) {
      var n = e("inherits");

      function i(e) {
        this._reporterState = {
          obj: null,
          path: [],
          options: e || {},
          errors: []
        };
      }

      function o(e, t) {
        this.path = e, this.rethrow(t);
      }

      (r.Reporter = i).prototype.isError = function (e) {
        return e instanceof o;
      }, i.prototype.save = function () {
        var e = this._reporterState;
        return {
          obj: e.obj,
          pathLen: e.path.length
        };
      }, i.prototype.restore = function (e) {
        var t = this._reporterState;
        t.obj = e.obj, t.path = t.path.slice(0, e.pathLen);
      }, i.prototype.enterKey = function (e) {
        return this._reporterState.path.push(e);
      }, i.prototype.exitKey = function (e) {
        var t = this._reporterState;
        t.path = t.path.slice(0, e - 1);
      }, i.prototype.leaveKey = function (e, t, r) {
        var n = this._reporterState;
        this.exitKey(e), null !== n.obj && (n.obj[t] = r);
      }, i.prototype.path = function () {
        return this._reporterState.path.join("/");
      }, i.prototype.enterObject = function () {
        var e = this._reporterState,
            t = e.obj;
        return e.obj = {}, t;
      }, i.prototype.leaveObject = function (e) {
        var t = this._reporterState,
            r = t.obj;
        return t.obj = e, r;
      }, i.prototype.error = function (e) {
        var t,
            r = this._reporterState,
            n = e instanceof o;
        if (t = n ? e : new o(r.path.map(function (e) {
          return "[" + JSON.stringify(e) + "]";
        }).join(""), e.message || e, e.stack), !r.options.partial) throw t;
        return n || r.errors.push(t), t;
      }, i.prototype.wrapResult = function (e) {
        var t = this._reporterState;
        return t.options.partial ? {
          result: this.isError(e) ? null : e,
          errors: t.errors
        } : e;
      }, n(o, Error), o.prototype.rethrow = function (e) {
        if (this.message = e + " at: " + (this.path || "(shallow)"), Error.captureStackTrace && Error.captureStackTrace(this, o), !this.stack) try {
          throw new Error(this.message);
        } catch (e) {
          this.stack = e.stack;
        }
        return this;
      };
    }, {
      inherits: 102
    }],
    7: [function (e, t, r) {
      var n = e("../constants");
      r.tagClass = {
        0: "universal",
        1: "application",
        2: "context",
        3: "private"
      }, r.tagClassByName = n._reverse(r.tagClass), r.tag = {
        0: "end",
        1: "bool",
        2: "int",
        3: "bitstr",
        4: "octstr",
        5: "null_",
        6: "objid",
        7: "objDesc",
        8: "external",
        9: "real",
        10: "enum",
        11: "embed",
        12: "utf8str",
        13: "relativeOid",
        16: "seq",
        17: "set",
        18: "numstr",
        19: "printstr",
        20: "t61str",
        21: "videostr",
        22: "ia5str",
        23: "utctime",
        24: "gentime",
        25: "graphstr",
        26: "iso646str",
        27: "genstr",
        28: "unistr",
        29: "charstr",
        30: "bmpstr"
      }, r.tagByName = n._reverse(r.tag);
    }, {
      "../constants": 8
    }],
    8: [function (e, t, r) {
      var n = r;
      n._reverse = function (r) {
        var n = {};
        return Object.keys(r).forEach(function (e) {
          (0 | e) == e && (e |= 0);
          var t = r[e];
          n[t] = e;
        }), n;
      }, n.der = e("./der");
    }, {
      "./der": 7
    }],
    9: [function (e, t, r) {
      var n = e("inherits"),
          i = e("../../asn1"),
          o = i.base,
          a = i.bignum,
          s = i.constants.der;

      function u(e) {
        this.enc = "der", this.name = e.name, this.entity = e, this.tree = new c(), this.tree._init(e.body);
      }

      function c(e) {
        o.Node.call(this, "der", e);
      }

      function f(e, t) {
        var r = e.readUInt8(t);
        if (e.isError(r)) return r;
        var n = s.tagClass[r >> 6],
            i = 0 == (32 & r);

        if (31 == (31 & r)) {
          var o = r;

          for (r = 0; 128 == (128 & o);) {
            if (o = e.readUInt8(t), e.isError(o)) return o;
            r <<= 7, r |= 127 & o;
          }
        } else r &= 31;

        return {
          cls: n,
          primitive: i,
          tag: r,
          tagStr: s.tag[r]
        };
      }

      function h(e, t, r) {
        var n = e.readUInt8(r);
        if (e.isError(n)) return n;
        if (!t && 128 === n) return null;
        if (0 == (128 & n)) return n;
        var i = 127 & n;
        if (4 < i) return e.error("length octect is too long");

        for (var o = n = 0; o < i; o++) {
          n <<= 8;
          var a = e.readUInt8(r);
          if (e.isError(a)) return a;
          n |= a;
        }

        return n;
      }

      (t.exports = u).prototype.decode = function (e, t) {
        return e instanceof o.DecoderBuffer || (e = new o.DecoderBuffer(e, t)), this.tree._decode(e, t);
      }, n(c, o.Node), c.prototype._peekTag = function (e, t, r) {
        if (e.isEmpty()) return !1;
        var n = e.save(),
            i = f(e, 'Failed to peek tag: "' + t + '"');
        return e.isError(i) ? i : (e.restore(n), i.tag === t || i.tagStr === t || i.tagStr + "of" === t || r);
      }, c.prototype._decodeTag = function (e, t, r) {
        var n = f(e, 'Failed to decode tag of "' + t + '"');
        if (e.isError(n)) return n;
        var i = h(e, n.primitive, 'Failed to get length of "' + t + '"');
        if (e.isError(i)) return i;
        if (!r && n.tag !== t && n.tagStr !== t && n.tagStr + "of" !== t) return e.error('Failed to match tag: "' + t + '"');
        if (n.primitive || null !== i) return e.skip(i, 'Failed to match body of: "' + t + '"');

        var o = e.save(),
            a = this._skipUntilEnd(e, 'Failed to skip indefinite length body: "' + this.tag + '"');

        return e.isError(a) ? a : (i = e.offset - o.offset, e.restore(o), e.skip(i, 'Failed to match body of: "' + t + '"'));
      }, c.prototype._skipUntilEnd = function (e, t) {
        for (;;) {
          var r = f(e, t);
          if (e.isError(r)) return r;
          var n,
              i = h(e, r.primitive, t);
          if (e.isError(i)) return i;
          if (n = r.primitive || null !== i ? e.skip(i) : this._skipUntilEnd(e, t), e.isError(n)) return n;
          if ("end" === r.tagStr) break;
        }
      }, c.prototype._decodeList = function (e, t, r, n) {
        for (var i = []; !e.isEmpty();) {
          var o = this._peekTag(e, "end");

          if (e.isError(o)) return o;
          var a = r.decode(e, "der", n);
          if (e.isError(a) && o) break;
          i.push(a);
        }

        return i;
      }, c.prototype._decodeStr = function (e, t) {
        if ("bitstr" === t) {
          var r = e.readUInt8();
          return e.isError(r) ? r : {
            unused: r,
            data: e.raw()
          };
        }

        if ("bmpstr" === t) {
          var n = e.raw();
          if (n.length % 2 == 1) return e.error("Decoding of string type: bmpstr length mismatch");

          for (var i = "", o = 0; o < n.length / 2; o++) {
            i += String.fromCharCode(n.readUInt16BE(2 * o));
          }

          return i;
        }

        if ("numstr" === t) {
          var a = e.raw().toString("ascii");
          return this._isNumstr(a) ? a : e.error("Decoding of string type: numstr unsupported characters");
        }

        if ("octstr" === t) return e.raw();
        if ("objDesc" === t) return e.raw();

        if ("printstr" === t) {
          var s = e.raw().toString("ascii");
          return this._isPrintstr(s) ? s : e.error("Decoding of string type: printstr unsupported characters");
        }

        return /str$/.test(t) ? e.raw().toString() : e.error("Decoding of string type: " + t + " unsupported");
      }, c.prototype._decodeObjid = function (e, t, r) {
        for (var n, i = [], o = 0; !e.isEmpty();) {
          var a = e.readUInt8();
          o <<= 7, o |= 127 & a, 0 == (128 & a) && (i.push(o), o = 0);
        }

        128 & a && i.push(o);
        var s = i[0] / 40 | 0,
            u = i[0] % 40;

        if (n = r ? i : [s, u].concat(i.slice(1)), t) {
          var c = t[n.join(" ")];
          void 0 === c && (c = t[n.join(".")]), void 0 !== c && (n = c);
        }

        return n;
      }, c.prototype._decodeTime = function (e, t) {
        var r = e.raw().toString();
        if ("gentime" === t) var n = 0 | r.slice(0, 4),
            i = 0 | r.slice(4, 6),
            o = 0 | r.slice(6, 8),
            a = 0 | r.slice(8, 10),
            s = 0 | r.slice(10, 12),
            u = 0 | r.slice(12, 14);else {
          if ("utctime" !== t) return e.error("Decoding " + t + " time is not supported yet");
          n = 0 | r.slice(0, 2), i = 0 | r.slice(2, 4), o = 0 | r.slice(4, 6), a = 0 | r.slice(6, 8), s = 0 | r.slice(8, 10), u = 0 | r.slice(10, 12);
          n = n < 70 ? 2e3 + n : 1900 + n;
        }
        return Date.UTC(n, i - 1, o, a, s, u, 0);
      }, c.prototype._decodeNull = function (e) {
        return null;
      }, c.prototype._decodeBool = function (e) {
        var t = e.readUInt8();
        return e.isError(t) ? t : 0 !== t;
      }, c.prototype._decodeInt = function (e, t) {
        var r = e.raw(),
            n = new a(r);
        return t && (n = t[n.toString(10)] || n), n;
      }, c.prototype._use = function (e, t) {
        return "function" == typeof e && (e = e(t)), e._getDecoder("der").tree;
      };
    }, {
      "../../asn1": 1,
      inherits: 102
    }],
    10: [function (e, t, r) {
      var n = r;
      n.der = e("./der"), n.pem = e("./pem");
    }, {
      "./der": 9,
      "./pem": 11
    }],
    11: [function (e, t, r) {
      var n = e("inherits"),
          h = e("buffer").Buffer,
          d = e("./der");

      function i(e) {
        d.call(this, e), this.enc = "pem";
      }

      n(i, d), (t.exports = i).prototype.decode = function (e, t) {
        for (var r = e.toString().split(/[\r\n]+/g), n = t.label.toUpperCase(), i = /^-----(BEGIN|END) ([^-]+)-----$/, o = -1, a = -1, s = 0; s < r.length; s++) {
          var u = r[s].match(i);

          if (null !== u && u[2] === n) {
            if (-1 !== o) {
              if ("END" !== u[1]) break;
              a = s;
              break;
            }

            if ("BEGIN" !== u[1]) break;
            o = s;
          }
        }

        if (-1 === o || -1 === a) throw new Error("PEM section not found for: " + n);
        var c = r.slice(o + 1, a).join("");
        c.replace(/[^a-z0-9\+\/=]+/gi, "");
        var f = new h(c, "base64");
        return d.prototype.decode.call(this, f, t);
      };
    }, {
      "./der": 9,
      buffer: 47,
      inherits: 102
    }],
    12: [function (e, t, r) {
      var n = e("inherits"),
          c = e("buffer").Buffer,
          i = e("../../asn1"),
          o = i.base,
          f = i.constants.der;

      function a(e) {
        this.enc = "der", this.name = e.name, this.entity = e, this.tree = new s(), this.tree._init(e.body);
      }

      function s(e) {
        o.Node.call(this, "der", e);
      }

      function u(e) {
        return e < 10 ? "0" + e : e;
      }

      (t.exports = a).prototype.encode = function (e, t) {
        return this.tree._encode(e, t).join();
      }, n(s, o.Node), s.prototype._encodeComposite = function (e, t, r, n) {
        var i,
            o = function (e, t, r, n) {
          var i;
          "seqof" === e ? e = "seq" : "setof" === e && (e = "set");
          if (f.tagByName.hasOwnProperty(e)) i = f.tagByName[e];else {
            if ("number" != typeof e || (0 | e) !== e) return n.error("Unknown tag: " + e);
            i = e;
          }
          if (31 <= i) return n.error("Multi-octet tag encoding unsupported");
          t || (i |= 32);
          return i |= f.tagClassByName[r || "universal"] << 6;
        }(e, t, r, this.reporter);

        if (n.length < 128) return (i = new c(2))[0] = o, i[1] = n.length, this._createEncoderBuffer([i, n]);

        for (var a = 1, s = n.length; 256 <= s; s >>= 8) {
          a++;
        }

        (i = new c(2 + a))[0] = o, i[1] = 128 | a;
        s = 1 + a;

        for (var u = n.length; 0 < u; s--, u >>= 8) {
          i[s] = 255 & u;
        }

        return this._createEncoderBuffer([i, n]);
      }, s.prototype._encodeStr = function (e, t) {
        if ("bitstr" === t) return this._createEncoderBuffer([0 | e.unused, e.data]);

        if ("bmpstr" === t) {
          for (var r = new c(2 * e.length), n = 0; n < e.length; n++) {
            r.writeUInt16BE(e.charCodeAt(n), 2 * n);
          }

          return this._createEncoderBuffer(r);
        }

        return "numstr" === t ? this._isNumstr(e) ? this._createEncoderBuffer(e) : this.reporter.error("Encoding of string type: numstr supports only digits and space") : "printstr" === t ? this._isPrintstr(e) ? this._createEncoderBuffer(e) : this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark") : /str$/.test(t) ? this._createEncoderBuffer(e) : "objDesc" === t ? this._createEncoderBuffer(e) : this.reporter.error("Encoding of string type: " + t + " unsupported");
      }, s.prototype._encodeObjid = function (e, t, r) {
        if ("string" == typeof e) {
          if (!t) return this.reporter.error("string objid given, but no values map found");
          if (!t.hasOwnProperty(e)) return this.reporter.error("objid not found in values map");
          e = t[e].split(/[\s\.]+/g);

          for (var n = 0; n < e.length; n++) {
            e[n] |= 0;
          }
        } else if (Array.isArray(e)) {
          e = e.slice();

          for (n = 0; n < e.length; n++) {
            e[n] |= 0;
          }
        }

        if (!Array.isArray(e)) return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(e));

        if (!r) {
          if (40 <= e[1]) return this.reporter.error("Second objid identifier OOB");
          e.splice(0, 2, 40 * e[0] + e[1]);
        }

        var i = 0;

        for (n = 0; n < e.length; n++) {
          var o = e[n];

          for (i++; 128 <= o; o >>= 7) {
            i++;
          }
        }

        var a = new c(i),
            s = a.length - 1;

        for (n = e.length - 1; 0 <= n; n--) {
          o = e[n];

          for (a[s--] = 127 & o; 0 < (o >>= 7);) {
            a[s--] = 128 | 127 & o;
          }
        }

        return this._createEncoderBuffer(a);
      }, s.prototype._encodeTime = function (e, t) {
        var r,
            n = new Date(e);
        return "gentime" === t ? r = [u(n.getFullYear()), u(n.getUTCMonth() + 1), u(n.getUTCDate()), u(n.getUTCHours()), u(n.getUTCMinutes()), u(n.getUTCSeconds()), "Z"].join("") : "utctime" === t ? r = [u(n.getFullYear() % 100), u(n.getUTCMonth() + 1), u(n.getUTCDate()), u(n.getUTCHours()), u(n.getUTCMinutes()), u(n.getUTCSeconds()), "Z"].join("") : this.reporter.error("Encoding " + t + " time is not supported yet"), this._encodeStr(r, "octstr");
      }, s.prototype._encodeNull = function () {
        return this._createEncoderBuffer("");
      }, s.prototype._encodeInt = function (e, t) {
        if ("string" == typeof e) {
          if (!t) return this.reporter.error("String int or enum given, but no values map");
          if (!t.hasOwnProperty(e)) return this.reporter.error("Values map doesn't contain: " + JSON.stringify(e));
          e = t[e];
        }

        if ("number" != typeof e && !c.isBuffer(e)) {
          var r = e.toArray();
          !e.sign && 128 & r[0] && r.unshift(0), e = new c(r);
        }

        if (c.isBuffer(e)) {
          var n = e.length;
          0 === e.length && n++;
          var i = new c(n);
          return e.copy(i), 0 === e.length && (i[0] = 0), this._createEncoderBuffer(i);
        }

        if (e < 128) return this._createEncoderBuffer(e);
        if (e < 256) return this._createEncoderBuffer([0, e]);
        n = 1;

        for (var o = e; 256 <= o; o >>= 8) {
          n++;
        }

        for (o = (i = new Array(n)).length - 1; 0 <= o; o--) {
          i[o] = 255 & e, e >>= 8;
        }

        return 128 & i[0] && i.unshift(0), this._createEncoderBuffer(new c(i));
      }, s.prototype._encodeBool = function (e) {
        return this._createEncoderBuffer(e ? 255 : 0);
      }, s.prototype._use = function (e, t) {
        return "function" == typeof e && (e = e(t)), e._getEncoder("der").tree;
      }, s.prototype._skipDefault = function (e, t, r) {
        var n,
            i = this._baseState;
        if (null === i["default"]) return !1;
        var o = e.join();
        if (void 0 === i.defaultBuffer && (i.defaultBuffer = this._encodeValue(i["default"], t, r).join()), o.length !== i.defaultBuffer.length) return !1;

        for (n = 0; n < o.length; n++) {
          if (o[n] !== i.defaultBuffer[n]) return !1;
        }

        return !0;
      };
    }, {
      "../../asn1": 1,
      buffer: 47,
      inherits: 102
    }],
    13: [function (e, t, r) {
      var n = r;
      n.der = e("./der"), n.pem = e("./pem");
    }, {
      "./der": 12,
      "./pem": 14
    }],
    14: [function (e, t, r) {
      var n = e("inherits"),
          o = e("./der");

      function i(e) {
        o.call(this, e), this.enc = "pem";
      }

      n(i, o), (t.exports = i).prototype.encode = function (e, t) {
        for (var r = o.prototype.encode.call(this, e).toString("base64"), n = ["-----BEGIN " + t.label + "-----"], i = 0; i < r.length; i += 64) {
          n.push(r.slice(i, i + 64));
        }

        return n.push("-----END " + t.label + "-----"), n.join("\n");
      };
    }, {
      "./der": 12,
      inherits: 102
    }],
    15: [function (e, t, r) {
      r.byteLength = function (e) {
        var t = l(e),
            r = t[0],
            n = t[1];
        return 3 * (r + n) / 4 - n;
      }, r.toByteArray = function (e) {
        for (var t, r = l(e), n = r[0], i = r[1], o = new d((c = n, f = i, 3 * (c + f) / 4 - f)), a = 0, s = 0 < i ? n - 4 : n, u = 0; u < s; u += 4) {
          t = h[e.charCodeAt(u)] << 18 | h[e.charCodeAt(u + 1)] << 12 | h[e.charCodeAt(u + 2)] << 6 | h[e.charCodeAt(u + 3)], o[a++] = t >> 16 & 255, o[a++] = t >> 8 & 255, o[a++] = 255 & t;
        }

        var c, f;
        2 === i && (t = h[e.charCodeAt(u)] << 2 | h[e.charCodeAt(u + 1)] >> 4, o[a++] = 255 & t);
        1 === i && (t = h[e.charCodeAt(u)] << 10 | h[e.charCodeAt(u + 1)] << 4 | h[e.charCodeAt(u + 2)] >> 2, o[a++] = t >> 8 & 255, o[a++] = 255 & t);
        return o;
      }, r.fromByteArray = function (e) {
        for (var t, r = e.length, n = r % 3, i = [], o = 0, a = r - n; o < a; o += 16383) {
          i.push(u(e, o, a < o + 16383 ? a : o + 16383));
        }

        1 === n ? (t = e[r - 1], i.push(s[t >> 2] + s[t << 4 & 63] + "==")) : 2 === n && (t = (e[r - 2] << 8) + e[r - 1], i.push(s[t >> 10] + s[t >> 4 & 63] + s[t << 2 & 63] + "="));
        return i.join("");
      };

      for (var s = [], h = [], d = "undefined" != typeof Uint8Array ? Uint8Array : Array, n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", i = 0, o = n.length; i < o; ++i) {
        s[i] = n[i], h[n.charCodeAt(i)] = i;
      }

      function l(e) {
        var t = e.length;
        if (0 < t % 4) throw new Error("Invalid string. Length must be a multiple of 4");
        var r = e.indexOf("=");
        return -1 === r && (r = t), [r, r === t ? 0 : 4 - r % 4];
      }

      function u(e, t, r) {
        for (var n, i, o = [], a = t; a < r; a += 3) {
          n = (e[a] << 16 & 16711680) + (e[a + 1] << 8 & 65280) + (255 & e[a + 2]), o.push(s[(i = n) >> 18 & 63] + s[i >> 12 & 63] + s[i >> 6 & 63] + s[63 & i]);
        }

        return o.join("");
      }

      h["-".charCodeAt(0)] = 62, h["_".charCodeAt(0)] = 63;
    }, {}],
    16: [function (e, t, r) {
      var n;

      function i(e) {
        this.rand = e;
      }

      if (t.exports = function (e) {
        return n || (n = new i(null)), n.generate(e);
      }, (t.exports.Rand = i).prototype.generate = function (e) {
        return this._rand(e);
      }, i.prototype._rand = function (e) {
        if (this.rand.getBytes) return this.rand.getBytes(e);

        for (var t = new Uint8Array(e), r = 0; r < t.length; r++) {
          t[r] = this.rand.getByte();
        }

        return t;
      }, "object" === ("undefined" == typeof self ? "undefined" : _typeof(self))) self.crypto && self.crypto.getRandomValues ? i.prototype._rand = function (e) {
        var t = new Uint8Array(e);
        return self.crypto.getRandomValues(t), t;
      } : self.msCrypto && self.msCrypto.getRandomValues ? i.prototype._rand = function (e) {
        var t = new Uint8Array(e);
        return self.msCrypto.getRandomValues(t), t;
      } : "object" === ("undefined" == typeof window ? "undefined" : _typeof(window)) && (i.prototype._rand = function () {
        throw new Error("Not implemented yet");
      });else try {
        var o = e("crypto");
        if ("function" != typeof o.randomBytes) throw new Error("Not supported");

        i.prototype._rand = function (e) {
          return o.randomBytes(e);
        };
      } catch (e) {}
    }, {
      crypto: 17
    }],
    17: [function (e, t, r) {}, {}],
    18: [function (e, t, r) {
      var i = e("safe-buffer").Buffer;

      function o(e) {
        i.isBuffer(e) || (e = i.from(e));

        for (var t = e.length / 4 | 0, r = new Array(t), n = 0; n < t; n++) {
          r[n] = e.readUInt32BE(4 * n);
        }

        return r;
      }

      function n(e) {
        for (; 0 < e.length; e++) {
          e[0] = 0;
        }
      }

      function a(e, t, r, n, i) {
        for (var o, a, s, u, c = r[0], f = r[1], h = r[2], d = r[3], l = e[0] ^ t[0], p = e[1] ^ t[1], b = e[2] ^ t[2], y = e[3] ^ t[3], m = 4, v = 1; v < i; v++) {
          o = c[l >>> 24] ^ f[p >>> 16 & 255] ^ h[b >>> 8 & 255] ^ d[255 & y] ^ t[m++], a = c[p >>> 24] ^ f[b >>> 16 & 255] ^ h[y >>> 8 & 255] ^ d[255 & l] ^ t[m++], s = c[b >>> 24] ^ f[y >>> 16 & 255] ^ h[l >>> 8 & 255] ^ d[255 & p] ^ t[m++], u = c[y >>> 24] ^ f[l >>> 16 & 255] ^ h[p >>> 8 & 255] ^ d[255 & b] ^ t[m++], l = o, p = a, b = s, y = u;
        }

        return o = (n[l >>> 24] << 24 | n[p >>> 16 & 255] << 16 | n[b >>> 8 & 255] << 8 | n[255 & y]) ^ t[m++], a = (n[p >>> 24] << 24 | n[b >>> 16 & 255] << 16 | n[y >>> 8 & 255] << 8 | n[255 & l]) ^ t[m++], s = (n[b >>> 24] << 24 | n[y >>> 16 & 255] << 16 | n[l >>> 8 & 255] << 8 | n[255 & p]) ^ t[m++], u = (n[y >>> 24] << 24 | n[l >>> 16 & 255] << 16 | n[p >>> 8 & 255] << 8 | n[255 & b]) ^ t[m++], [o >>>= 0, a >>>= 0, s >>>= 0, u >>>= 0];
      }

      var h = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54],
          d = function () {
        for (var e = new Array(256), t = 0; t < 256; t++) {
          e[t] = t < 128 ? t << 1 : t << 1 ^ 283;
        }

        for (var r = [], n = [], i = [[], [], [], []], o = [[], [], [], []], a = 0, s = 0, u = 0; u < 256; ++u) {
          var c = s ^ s << 1 ^ s << 2 ^ s << 3 ^ s << 4;
          c = c >>> 8 ^ 255 & c ^ 99;
          var f = e[n[r[a] = c] = a],
              h = e[f],
              d = e[h],
              l = 257 * e[c] ^ 16843008 * c;
          i[0][a] = l << 24 | l >>> 8, i[1][a] = l << 16 | l >>> 16, i[2][a] = l << 8 | l >>> 24, i[3][a] = l, l = 16843009 * d ^ 65537 * h ^ 257 * f ^ 16843008 * a, o[0][c] = l << 24 | l >>> 8, o[1][c] = l << 16 | l >>> 16, o[2][c] = l << 8 | l >>> 24, o[3][c] = l, 0 === a ? a = s = 1 : (a = f ^ e[e[e[d ^ f]]], s ^= e[e[s]]);
        }

        return {
          SBOX: r,
          INV_SBOX: n,
          SUB_MIX: i,
          INV_SUB_MIX: o
        };
      }();

      function s(e) {
        this._key = o(e), this._reset();
      }

      s.blockSize = 16, s.keySize = 32, s.prototype.blockSize = s.blockSize, s.prototype.keySize = s.keySize, s.prototype._reset = function () {
        for (var e = this._key, t = e.length, r = t + 6, n = 4 * (r + 1), i = [], o = 0; o < t; o++) {
          i[o] = e[o];
        }

        for (o = t; o < n; o++) {
          var a = i[o - 1];
          o % t == 0 ? (a = a << 8 | a >>> 24, a = d.SBOX[a >>> 24] << 24 | d.SBOX[a >>> 16 & 255] << 16 | d.SBOX[a >>> 8 & 255] << 8 | d.SBOX[255 & a], a ^= h[o / t | 0] << 24) : 6 < t && o % t == 4 && (a = d.SBOX[a >>> 24] << 24 | d.SBOX[a >>> 16 & 255] << 16 | d.SBOX[a >>> 8 & 255] << 8 | d.SBOX[255 & a]), i[o] = i[o - t] ^ a;
        }

        for (var s = [], u = 0; u < n; u++) {
          var c = n - u,
              f = i[c - (u % 4 ? 0 : 4)];
          s[u] = u < 4 || c <= 4 ? f : d.INV_SUB_MIX[0][d.SBOX[f >>> 24]] ^ d.INV_SUB_MIX[1][d.SBOX[f >>> 16 & 255]] ^ d.INV_SUB_MIX[2][d.SBOX[f >>> 8 & 255]] ^ d.INV_SUB_MIX[3][d.SBOX[255 & f]];
        }

        this._nRounds = r, this._keySchedule = i, this._invKeySchedule = s;
      }, s.prototype.encryptBlockRaw = function (e) {
        return a(e = o(e), this._keySchedule, d.SUB_MIX, d.SBOX, this._nRounds);
      }, s.prototype.encryptBlock = function (e) {
        var t = this.encryptBlockRaw(e),
            r = i.allocUnsafe(16);
        return r.writeUInt32BE(t[0], 0), r.writeUInt32BE(t[1], 4), r.writeUInt32BE(t[2], 8), r.writeUInt32BE(t[3], 12), r;
      }, s.prototype.decryptBlock = function (e) {
        var t = (e = o(e))[1];
        e[1] = e[3], e[3] = t;
        var r = a(e, this._invKeySchedule, d.INV_SUB_MIX, d.INV_SBOX, this._nRounds),
            n = i.allocUnsafe(16);
        return n.writeUInt32BE(r[0], 0), n.writeUInt32BE(r[3], 4), n.writeUInt32BE(r[2], 8), n.writeUInt32BE(r[1], 12), n;
      }, s.prototype.scrub = function () {
        n(this._keySchedule), n(this._invKeySchedule), n(this._key);
      }, t.exports.AES = s;
    }, {
      "safe-buffer": 149
    }],
    19: [function (e, t, r) {
      var a = e("./aes"),
          c = e("safe-buffer").Buffer,
          s = e("cipher-base"),
          n = e("inherits"),
          f = e("./ghash"),
          i = e("buffer-xor"),
          h = e("./incr32");

      function o(e, t, r, n) {
        s.call(this);
        var i = c.alloc(4, 0);
        this._cipher = new a.AES(t);

        var o = this._cipher.encryptBlock(i);

        this._ghash = new f(o), r = function (e, t, r) {
          if (12 === t.length) return e._finID = c.concat([t, c.from([0, 0, 0, 1])]), c.concat([t, c.from([0, 0, 0, 2])]);
          var n = new f(r),
              i = t.length,
              o = i % 16;
          n.update(t), o && (o = 16 - o, n.update(c.alloc(o, 0))), n.update(c.alloc(8, 0));
          var a = 8 * i,
              s = c.alloc(8);
          s.writeUIntBE(a, 0, 8), n.update(s), e._finID = n.state;
          var u = c.from(e._finID);
          return h(u), u;
        }(this, r, o), this._prev = c.from(r), this._cache = c.allocUnsafe(0), this._secCache = c.allocUnsafe(0), this._decrypt = n, this._alen = 0, this._len = 0, this._mode = e, this._authTag = null, this._called = !1;
      }

      n(o, s), o.prototype._update = function (e) {
        if (!this._called && this._alen) {
          var t = 16 - this._alen % 16;
          t < 16 && (t = c.alloc(t, 0), this._ghash.update(t));
        }

        this._called = !0;

        var r = this._mode.encrypt(this, e);

        return this._decrypt ? this._ghash.update(e) : this._ghash.update(r), this._len += e.length, r;
      }, o.prototype._final = function () {
        if (this._decrypt && !this._authTag) throw new Error("Unsupported state or unable to authenticate data");
        var e = i(this._ghash["final"](8 * this._alen, 8 * this._len), this._cipher.encryptBlock(this._finID));
        if (this._decrypt && function (e, t) {
          var r = 0;
          e.length !== t.length && r++;

          for (var n = Math.min(e.length, t.length), i = 0; i < n; ++i) {
            r += e[i] ^ t[i];
          }

          return r;
        }(e, this._authTag)) throw new Error("Unsupported state or unable to authenticate data");
        this._authTag = e, this._cipher.scrub();
      }, o.prototype.getAuthTag = function () {
        if (this._decrypt || !c.isBuffer(this._authTag)) throw new Error("Attempting to get auth tag in unsupported state");
        return this._authTag;
      }, o.prototype.setAuthTag = function (e) {
        if (!this._decrypt) throw new Error("Attempting to set auth tag in unsupported state");
        this._authTag = e;
      }, o.prototype.setAAD = function (e) {
        if (this._called) throw new Error("Attempting to set AAD in unsupported state");
        this._ghash.update(e), this._alen += e.length;
      }, t.exports = o;
    }, {
      "./aes": 18,
      "./ghash": 23,
      "./incr32": 24,
      "buffer-xor": 46,
      "cipher-base": 49,
      inherits: 102,
      "safe-buffer": 149
    }],
    20: [function (e, t, r) {
      var n = e("./encrypter"),
          i = e("./decrypter"),
          o = e("./modes/list.json");
      r.createCipher = r.Cipher = n.createCipher, r.createCipheriv = r.Cipheriv = n.createCipheriv, r.createDecipher = r.Decipher = i.createDecipher, r.createDecipheriv = r.Decipheriv = i.createDecipheriv, r.listCiphers = r.getCiphers = function () {
        return Object.keys(o);
      };
    }, {
      "./decrypter": 21,
      "./encrypter": 22,
      "./modes/list.json": 32
    }],
    21: [function (e, t, r) {
      var i = e("./authCipher"),
          o = e("safe-buffer").Buffer,
          a = e("./modes"),
          s = e("./streamCipher"),
          n = e("cipher-base"),
          u = e("./aes"),
          c = e("evp_bytestokey");

      function f(e, t, r) {
        n.call(this), this._cache = new h(), this._last = void 0, this._cipher = new u.AES(t), this._prev = o.from(r), this._mode = e, this._autopadding = !0;
      }

      function h() {
        this.cache = o.allocUnsafe(0);
      }

      function d(e, t, r) {
        var n = a[e.toLowerCase()];
        if (!n) throw new TypeError("invalid suite type");
        if ("string" == typeof r && (r = o.from(r)), "GCM" !== n.mode && r.length !== n.iv) throw new TypeError("invalid iv length " + r.length);
        if ("string" == typeof t && (t = o.from(t)), t.length !== n.key / 8) throw new TypeError("invalid key length " + t.length);
        return "stream" === n.type ? new s(n.module, t, r, !0) : "auth" === n.type ? new i(n.module, t, r, !0) : new f(n.module, t, r);
      }

      e("inherits")(f, n), f.prototype._update = function (e) {
        var t, r;

        this._cache.add(e);

        for (var n = []; t = this._cache.get(this._autopadding);) {
          r = this._mode.decrypt(this, t), n.push(r);
        }

        return o.concat(n);
      }, f.prototype._final = function () {
        var e = this._cache.flush();

        if (this._autopadding) return function (e) {
          var t = e[15];
          if (t < 1 || 16 < t) throw new Error("unable to decrypt data");
          var r = -1;

          for (; ++r < t;) {
            if (e[r + (16 - t)] !== t) throw new Error("unable to decrypt data");
          }

          if (16 === t) return;
          return e.slice(0, 16 - t);
        }(this._mode.decrypt(this, e));
        if (e) throw new Error("data not multiple of block length");
      }, f.prototype.setAutoPadding = function (e) {
        return this._autopadding = !!e, this;
      }, h.prototype.add = function (e) {
        this.cache = o.concat([this.cache, e]);
      }, h.prototype.get = function (e) {
        var t;

        if (e) {
          if (16 < this.cache.length) return t = this.cache.slice(0, 16), this.cache = this.cache.slice(16), t;
        } else if (16 <= this.cache.length) return t = this.cache.slice(0, 16), this.cache = this.cache.slice(16), t;

        return null;
      }, h.prototype.flush = function () {
        if (this.cache.length) return this.cache;
      }, r.createDecipher = function (e, t) {
        var r = a[e.toLowerCase()];
        if (!r) throw new TypeError("invalid suite type");
        var n = c(t, !1, r.key, r.iv);
        return d(e, n.key, n.iv);
      }, r.createDecipheriv = d;
    }, {
      "./aes": 18,
      "./authCipher": 19,
      "./modes": 31,
      "./streamCipher": 34,
      "cipher-base": 49,
      evp_bytestokey: 84,
      inherits: 102,
      "safe-buffer": 149
    }],
    22: [function (e, t, r) {
      var i = e("./modes"),
          o = e("./authCipher"),
          a = e("safe-buffer").Buffer,
          s = e("./streamCipher"),
          n = e("cipher-base"),
          u = e("./aes"),
          c = e("evp_bytestokey");

      function f(e, t, r) {
        n.call(this), this._cache = new d(), this._cipher = new u.AES(t), this._prev = a.from(r), this._mode = e, this._autopadding = !0;
      }

      e("inherits")(f, n), f.prototype._update = function (e) {
        var t, r;

        this._cache.add(e);

        for (var n = []; t = this._cache.get();) {
          r = this._mode.encrypt(this, t), n.push(r);
        }

        return a.concat(n);
      };
      var h = a.alloc(16, 16);

      function d() {
        this.cache = a.allocUnsafe(0);
      }

      function l(e, t, r) {
        var n = i[e.toLowerCase()];
        if (!n) throw new TypeError("invalid suite type");
        if ("string" == typeof t && (t = a.from(t)), t.length !== n.key / 8) throw new TypeError("invalid key length " + t.length);
        if ("string" == typeof r && (r = a.from(r)), "GCM" !== n.mode && r.length !== n.iv) throw new TypeError("invalid iv length " + r.length);
        return "stream" === n.type ? new s(n.module, t, r) : "auth" === n.type ? new o(n.module, t, r) : new f(n.module, t, r);
      }

      f.prototype._final = function () {
        var e = this._cache.flush();

        if (this._autopadding) return e = this._mode.encrypt(this, e), this._cipher.scrub(), e;
        if (!e.equals(h)) throw this._cipher.scrub(), new Error("data not multiple of block length");
      }, f.prototype.setAutoPadding = function (e) {
        return this._autopadding = !!e, this;
      }, d.prototype.add = function (e) {
        this.cache = a.concat([this.cache, e]);
      }, d.prototype.get = function () {
        if (15 < this.cache.length) {
          var e = this.cache.slice(0, 16);
          return this.cache = this.cache.slice(16), e;
        }

        return null;
      }, d.prototype.flush = function () {
        for (var e = 16 - this.cache.length, t = a.allocUnsafe(e), r = -1; ++r < e;) {
          t.writeUInt8(e, r);
        }

        return a.concat([this.cache, t]);
      }, r.createCipheriv = l, r.createCipher = function (e, t) {
        var r = i[e.toLowerCase()];
        if (!r) throw new TypeError("invalid suite type");
        var n = c(t, !1, r.key, r.iv);
        return l(e, n.key, n.iv);
      };
    }, {
      "./aes": 18,
      "./authCipher": 19,
      "./modes": 31,
      "./streamCipher": 34,
      "cipher-base": 49,
      evp_bytestokey: 84,
      inherits: 102,
      "safe-buffer": 149
    }],
    23: [function (e, t, r) {
      var n = e("safe-buffer").Buffer,
          i = n.alloc(16, 0);

      function a(e) {
        var t = n.allocUnsafe(16);
        return t.writeUInt32BE(e[0] >>> 0, 0), t.writeUInt32BE(e[1] >>> 0, 4), t.writeUInt32BE(e[2] >>> 0, 8), t.writeUInt32BE(e[3] >>> 0, 12), t;
      }

      function o(e) {
        this.h = e, this.state = n.alloc(16, 0), this.cache = n.allocUnsafe(0);
      }

      o.prototype.ghash = function (e) {
        for (var t = -1; ++t < e.length;) {
          this.state[t] ^= e[t];
        }

        this._multiply();
      }, o.prototype._multiply = function () {
        for (var e, t, r, n = [(e = this.h).readUInt32BE(0), e.readUInt32BE(4), e.readUInt32BE(8), e.readUInt32BE(12)], i = [0, 0, 0, 0], o = -1; ++o < 128;) {
          for (0 != (this.state[~~(o / 8)] & 1 << 7 - o % 8) && (i[0] ^= n[0], i[1] ^= n[1], i[2] ^= n[2], i[3] ^= n[3]), r = 0 != (1 & n[3]), t = 3; 0 < t; t--) {
            n[t] = n[t] >>> 1 | (1 & n[t - 1]) << 31;
          }

          n[0] = n[0] >>> 1, r && (n[0] = n[0] ^ 225 << 24);
        }

        this.state = a(i);
      }, o.prototype.update = function (e) {
        var t;

        for (this.cache = n.concat([this.cache, e]); 16 <= this.cache.length;) {
          t = this.cache.slice(0, 16), this.cache = this.cache.slice(16), this.ghash(t);
        }
      }, o.prototype["final"] = function (e, t) {
        return this.cache.length && this.ghash(n.concat([this.cache, i], 16)), this.ghash(a([0, e, 0, t])), this.state;
      }, t.exports = o;
    }, {
      "safe-buffer": 149
    }],
    24: [function (e, t, r) {
      t.exports = function (e) {
        for (var t, r = e.length; r--;) {
          if (255 !== (t = e.readUInt8(r))) {
            t++, e.writeUInt8(t, r);
            break;
          }

          e.writeUInt8(0, r);
        }
      };
    }, {}],
    25: [function (e, t, r) {
      var i = e("buffer-xor");
      r.encrypt = function (e, t) {
        var r = i(t, e._prev);
        return e._prev = e._cipher.encryptBlock(r), e._prev;
      }, r.decrypt = function (e, t) {
        var r = e._prev;
        e._prev = t;

        var n = e._cipher.decryptBlock(t);

        return i(n, r);
      };
    }, {
      "buffer-xor": 46
    }],
    26: [function (e, t, r) {
      var o = e("safe-buffer").Buffer,
          a = e("buffer-xor");

      function s(e, t, r) {
        var n = t.length,
            i = a(t, e._cache);
        return e._cache = e._cache.slice(n), e._prev = o.concat([e._prev, r ? t : i]), i;
      }

      r.encrypt = function (e, t, r) {
        for (var n, i = o.allocUnsafe(0); t.length;) {
          if (0 === e._cache.length && (e._cache = e._cipher.encryptBlock(e._prev), e._prev = o.allocUnsafe(0)), !(e._cache.length <= t.length)) {
            i = o.concat([i, s(e, t, r)]);
            break;
          }

          n = e._cache.length, i = o.concat([i, s(e, t.slice(0, n), r)]), t = t.slice(n);
        }

        return i;
      };
    }, {
      "buffer-xor": 46,
      "safe-buffer": 149
    }],
    27: [function (e, t, r) {
      var a = e("safe-buffer").Buffer;

      function s(e, t, r) {
        for (var n, i, o = -1, a = 0; ++o < 8;) {
          n = t & 1 << 7 - o ? 128 : 0, a += (128 & (i = e._cipher.encryptBlock(e._prev)[0] ^ n)) >> o % 8, e._prev = u(e._prev, r ? n : i);
        }

        return a;
      }

      function u(e, t) {
        var r = e.length,
            n = -1,
            i = a.allocUnsafe(e.length);

        for (e = a.concat([e, a.from([t])]); ++n < r;) {
          i[n] = e[n] << 1 | e[n + 1] >> 7;
        }

        return i;
      }

      r.encrypt = function (e, t, r) {
        for (var n = t.length, i = a.allocUnsafe(n), o = -1; ++o < n;) {
          i[o] = s(e, t[o], r);
        }

        return i;
      };
    }, {
      "safe-buffer": 149
    }],
    28: [function (e, t, r) {
      var f = e("safe-buffer").Buffer;

      r.encrypt = function (e, t, r) {
        for (var n, i, o, a, s = t.length, u = f.allocUnsafe(s), c = -1; ++c < s;) {
          u[c] = (n = e, i = t[c], o = r, void 0, a = n._cipher.encryptBlock(n._prev)[0] ^ i, n._prev = f.concat([n._prev.slice(1), f.from([o ? i : a])]), a);
        }

        return u;
      };
    }, {
      "safe-buffer": 149
    }],
    29: [function (e, t, r) {
      var f = e("buffer-xor"),
          h = e("safe-buffer").Buffer,
          d = e("../incr32");

      r.encrypt = function (e, t) {
        var r,
            n,
            i = Math.ceil(t.length / 16),
            o = e._cache.length;
        e._cache = h.concat([e._cache, h.allocUnsafe(16 * i)]);

        for (var a = 0; a < i; a++) {
          var s = (void 0, n = (r = e)._cipher.encryptBlockRaw(r._prev), d(r._prev), n),
              u = o + 16 * a;
          e._cache.writeUInt32BE(s[0], u + 0), e._cache.writeUInt32BE(s[1], u + 4), e._cache.writeUInt32BE(s[2], u + 8), e._cache.writeUInt32BE(s[3], u + 12);
        }

        var c = e._cache.slice(0, t.length);

        return e._cache = e._cache.slice(t.length), f(t, c);
      };
    }, {
      "../incr32": 24,
      "buffer-xor": 46,
      "safe-buffer": 149
    }],
    30: [function (e, t, r) {
      r.encrypt = function (e, t) {
        return e._cipher.encryptBlock(t);
      }, r.decrypt = function (e, t) {
        return e._cipher.decryptBlock(t);
      };
    }, {}],
    31: [function (e, t, r) {
      var n = {
        ECB: e("./ecb"),
        CBC: e("./cbc"),
        CFB: e("./cfb"),
        CFB8: e("./cfb8"),
        CFB1: e("./cfb1"),
        OFB: e("./ofb"),
        CTR: e("./ctr"),
        GCM: e("./ctr")
      },
          i = e("./list.json");

      for (var o in i) {
        i[o].module = n[i[o].mode];
      }

      t.exports = i;
    }, {
      "./cbc": 25,
      "./cfb": 26,
      "./cfb1": 27,
      "./cfb8": 28,
      "./ctr": 29,
      "./ecb": 30,
      "./list.json": 32,
      "./ofb": 33
    }],
    32: [function (e, t, r) {
      t.exports = {
        "aes-128-ecb": {
          cipher: "AES",
          key: 128,
          iv: 0,
          mode: "ECB",
          type: "block"
        },
        "aes-192-ecb": {
          cipher: "AES",
          key: 192,
          iv: 0,
          mode: "ECB",
          type: "block"
        },
        "aes-256-ecb": {
          cipher: "AES",
          key: 256,
          iv: 0,
          mode: "ECB",
          type: "block"
        },
        "aes-128-cbc": {
          cipher: "AES",
          key: 128,
          iv: 16,
          mode: "CBC",
          type: "block"
        },
        "aes-192-cbc": {
          cipher: "AES",
          key: 192,
          iv: 16,
          mode: "CBC",
          type: "block"
        },
        "aes-256-cbc": {
          cipher: "AES",
          key: 256,
          iv: 16,
          mode: "CBC",
          type: "block"
        },
        aes128: {
          cipher: "AES",
          key: 128,
          iv: 16,
          mode: "CBC",
          type: "block"
        },
        aes192: {
          cipher: "AES",
          key: 192,
          iv: 16,
          mode: "CBC",
          type: "block"
        },
        aes256: {
          cipher: "AES",
          key: 256,
          iv: 16,
          mode: "CBC",
          type: "block"
        },
        "aes-128-cfb": {
          cipher: "AES",
          key: 128,
          iv: 16,
          mode: "CFB",
          type: "stream"
        },
        "aes-192-cfb": {
          cipher: "AES",
          key: 192,
          iv: 16,
          mode: "CFB",
          type: "stream"
        },
        "aes-256-cfb": {
          cipher: "AES",
          key: 256,
          iv: 16,
          mode: "CFB",
          type: "stream"
        },
        "aes-128-cfb8": {
          cipher: "AES",
          key: 128,
          iv: 16,
          mode: "CFB8",
          type: "stream"
        },
        "aes-192-cfb8": {
          cipher: "AES",
          key: 192,
          iv: 16,
          mode: "CFB8",
          type: "stream"
        },
        "aes-256-cfb8": {
          cipher: "AES",
          key: 256,
          iv: 16,
          mode: "CFB8",
          type: "stream"
        },
        "aes-128-cfb1": {
          cipher: "AES",
          key: 128,
          iv: 16,
          mode: "CFB1",
          type: "stream"
        },
        "aes-192-cfb1": {
          cipher: "AES",
          key: 192,
          iv: 16,
          mode: "CFB1",
          type: "stream"
        },
        "aes-256-cfb1": {
          cipher: "AES",
          key: 256,
          iv: 16,
          mode: "CFB1",
          type: "stream"
        },
        "aes-128-ofb": {
          cipher: "AES",
          key: 128,
          iv: 16,
          mode: "OFB",
          type: "stream"
        },
        "aes-192-ofb": {
          cipher: "AES",
          key: 192,
          iv: 16,
          mode: "OFB",
          type: "stream"
        },
        "aes-256-ofb": {
          cipher: "AES",
          key: 256,
          iv: 16,
          mode: "OFB",
          type: "stream"
        },
        "aes-128-ctr": {
          cipher: "AES",
          key: 128,
          iv: 16,
          mode: "CTR",
          type: "stream"
        },
        "aes-192-ctr": {
          cipher: "AES",
          key: 192,
          iv: 16,
          mode: "CTR",
          type: "stream"
        },
        "aes-256-ctr": {
          cipher: "AES",
          key: 256,
          iv: 16,
          mode: "CTR",
          type: "stream"
        },
        "aes-128-gcm": {
          cipher: "AES",
          key: 128,
          iv: 12,
          mode: "GCM",
          type: "auth"
        },
        "aes-192-gcm": {
          cipher: "AES",
          key: 192,
          iv: 12,
          mode: "GCM",
          type: "auth"
        },
        "aes-256-gcm": {
          cipher: "AES",
          key: 256,
          iv: 12,
          mode: "GCM",
          type: "auth"
        }
      };
    }, {}],
    33: [function (e, t, r) {
      (function (i) {
        var o = e("buffer-xor");

        r.encrypt = function (e, t) {
          for (; e._cache.length < t.length;) {
            e._cache = i.concat([e._cache, (r = e, r._prev = r._cipher.encryptBlock(r._prev), r._prev)]);
          }

          var r,
              n = e._cache.slice(0, t.length);

          return e._cache = e._cache.slice(t.length), o(t, n);
        };
      }).call(this, e("buffer").Buffer);
    }, {
      buffer: 47,
      "buffer-xor": 46
    }],
    34: [function (e, t, r) {
      var i = e("./aes"),
          o = e("safe-buffer").Buffer,
          a = e("cipher-base");

      function n(e, t, r, n) {
        a.call(this), this._cipher = new i.AES(t), this._prev = o.from(r), this._cache = o.allocUnsafe(0), this._secCache = o.allocUnsafe(0), this._decrypt = n, this._mode = e;
      }

      e("inherits")(n, a), n.prototype._update = function (e) {
        return this._mode.encrypt(this, e, this._decrypt);
      }, n.prototype._final = function () {
        this._cipher.scrub();
      }, t.exports = n;
    }, {
      "./aes": 18,
      "cipher-base": 49,
      inherits: 102,
      "safe-buffer": 149
    }],
    35: [function (e, t, r) {
      var n = e("browserify-des"),
          i = e("browserify-aes/browser"),
          o = e("browserify-aes/modes"),
          a = e("browserify-des/modes"),
          s = e("evp_bytestokey");

      function u(e, t, r) {
        if (e = e.toLowerCase(), o[e]) return i.createCipheriv(e, t, r);
        if (a[e]) return new n({
          key: t,
          iv: r,
          mode: e
        });
        throw new TypeError("invalid suite type");
      }

      function c(e, t, r) {
        if (e = e.toLowerCase(), o[e]) return i.createDecipheriv(e, t, r);
        if (a[e]) return new n({
          key: t,
          iv: r,
          mode: e,
          decrypt: !0
        });
        throw new TypeError("invalid suite type");
      }

      r.createCipher = r.Cipher = function (e, t) {
        var r, n;
        if (e = e.toLowerCase(), o[e]) r = o[e].key, n = o[e].iv;else {
          if (!a[e]) throw new TypeError("invalid suite type");
          r = 8 * a[e].key, n = a[e].iv;
        }
        var i = s(t, !1, r, n);
        return u(e, i.key, i.iv);
      }, r.createCipheriv = r.Cipheriv = u, r.createDecipher = r.Decipher = function (e, t) {
        var r, n;
        if (e = e.toLowerCase(), o[e]) r = o[e].key, n = o[e].iv;else {
          if (!a[e]) throw new TypeError("invalid suite type");
          r = 8 * a[e].key, n = a[e].iv;
        }
        var i = s(t, !1, r, n);
        return c(e, i.key, i.iv);
      }, r.createDecipheriv = r.Decipheriv = c, r.listCiphers = r.getCiphers = function () {
        return Object.keys(a).concat(i.getCiphers());
      };
    }, {
      "browserify-aes/browser": 20,
      "browserify-aes/modes": 31,
      "browserify-des": 36,
      "browserify-des/modes": 37,
      evp_bytestokey: 84
    }],
    36: [function (n, i, e) {
      (function (a) {
        var s = n("cipher-base"),
            e = n("des.js"),
            t = n("inherits"),
            u = {
          "des-ede3-cbc": e.CBC.instantiate(e.EDE),
          "des-ede3": e.EDE,
          "des-ede-cbc": e.CBC.instantiate(e.EDE),
          "des-ede": e.EDE,
          "des-cbc": e.CBC.instantiate(e.DES),
          "des-ecb": e.DES
        };

        function r(e) {
          s.call(this);
          var t,
              r = e.mode.toLowerCase(),
              n = u[r];
          t = e.decrypt ? "decrypt" : "encrypt";
          var i = e.key;
          "des-ede" !== r && "des-ede-cbc" !== r || (i = a.concat([i, i.slice(0, 8)]));
          var o = e.iv;
          this._des = n.create({
            key: i,
            iv: o,
            type: t
          });
        }

        u.des = u["des-cbc"], u.des3 = u["des-ede3-cbc"], t(i.exports = r, s), r.prototype._update = function (e) {
          return new a(this._des.update(e));
        }, r.prototype._final = function () {
          return new a(this._des["final"]());
        };
      }).call(this, n("buffer").Buffer);
    }, {
      buffer: 47,
      "cipher-base": 49,
      "des.js": 57,
      inherits: 102
    }],
    37: [function (e, t, r) {
      r["des-ecb"] = {
        key: 8,
        iv: 0
      }, r["des-cbc"] = r.des = {
        key: 8,
        iv: 8
      }, r["des-ede3-cbc"] = r.des3 = {
        key: 24,
        iv: 8
      }, r["des-ede3"] = {
        key: 24,
        iv: 0
      }, r["des-ede-cbc"] = {
        key: 16,
        iv: 8
      }, r["des-ede"] = {
        key: 16,
        iv: 0
      };
    }, {}],
    38: [function (t, r, e) {
      (function (b) {
        var y = t("bn.js"),
            n = t("randombytes");

        function e(e, t) {
          var r,
              n,
              i = {
            blinder: (n = m(r = t)).toRed(y.mont(r.modulus)).redPow(new y(r.publicExponent)).fromRed(),
            unblinder: n.invm(r.modulus)
          },
              o = t.modulus.byteLength(),
              a = (y.mont(t.modulus), new y(e).mul(i.blinder).umod(t.modulus)),
              s = a.toRed(y.mont(t.prime1)),
              u = a.toRed(y.mont(t.prime2)),
              c = t.coefficient,
              f = t.prime1,
              h = t.prime2,
              d = s.redPow(t.exponent1),
              l = u.redPow(t.exponent2);
          d = d.fromRed(), l = l.fromRed();
          var p = d.isub(l).imul(c).umod(f);
          return p.imul(h), l.iadd(p), new b(l.imul(i.unblinder).umod(t.modulus).toArray(!1, o));
        }

        function m(e) {
          for (var t = e.modulus.byteLength(), r = new y(n(t)); 0 <= r.cmp(e.modulus) || !r.umod(e.prime1) || !r.umod(e.prime2);) {
            r = new y(n(t));
          }

          return r;
        }

        (r.exports = e).getr = m;
      }).call(this, t("buffer").Buffer);
    }, {
      "bn.js": "BN",
      buffer: 47,
      randombytes: 132
    }],
    39: [function (e, t, r) {
      t.exports = e("./browser/algorithms.json");
    }, {
      "./browser/algorithms.json": 40
    }],
    40: [function (e, t, r) {
      t.exports = {
        sha224WithRSAEncryption: {
          sign: "rsa",
          hash: "sha224",
          id: "302d300d06096086480165030402040500041c"
        },
        "RSA-SHA224": {
          sign: "ecdsa/rsa",
          hash: "sha224",
          id: "302d300d06096086480165030402040500041c"
        },
        sha256WithRSAEncryption: {
          sign: "rsa",
          hash: "sha256",
          id: "3031300d060960864801650304020105000420"
        },
        "RSA-SHA256": {
          sign: "ecdsa/rsa",
          hash: "sha256",
          id: "3031300d060960864801650304020105000420"
        },
        sha384WithRSAEncryption: {
          sign: "rsa",
          hash: "sha384",
          id: "3041300d060960864801650304020205000430"
        },
        "RSA-SHA384": {
          sign: "ecdsa/rsa",
          hash: "sha384",
          id: "3041300d060960864801650304020205000430"
        },
        sha512WithRSAEncryption: {
          sign: "rsa",
          hash: "sha512",
          id: "3051300d060960864801650304020305000440"
        },
        "RSA-SHA512": {
          sign: "ecdsa/rsa",
          hash: "sha512",
          id: "3051300d060960864801650304020305000440"
        },
        "RSA-SHA1": {
          sign: "rsa",
          hash: "sha1",
          id: "3021300906052b0e03021a05000414"
        },
        "ecdsa-with-SHA1": {
          sign: "ecdsa",
          hash: "sha1",
          id: ""
        },
        sha256: {
          sign: "ecdsa",
          hash: "sha256",
          id: ""
        },
        sha224: {
          sign: "ecdsa",
          hash: "sha224",
          id: ""
        },
        sha384: {
          sign: "ecdsa",
          hash: "sha384",
          id: ""
        },
        sha512: {
          sign: "ecdsa",
          hash: "sha512",
          id: ""
        },
        "DSA-SHA": {
          sign: "dsa",
          hash: "sha1",
          id: ""
        },
        "DSA-SHA1": {
          sign: "dsa",
          hash: "sha1",
          id: ""
        },
        DSA: {
          sign: "dsa",
          hash: "sha1",
          id: ""
        },
        "DSA-WITH-SHA224": {
          sign: "dsa",
          hash: "sha224",
          id: ""
        },
        "DSA-SHA224": {
          sign: "dsa",
          hash: "sha224",
          id: ""
        },
        "DSA-WITH-SHA256": {
          sign: "dsa",
          hash: "sha256",
          id: ""
        },
        "DSA-SHA256": {
          sign: "dsa",
          hash: "sha256",
          id: ""
        },
        "DSA-WITH-SHA384": {
          sign: "dsa",
          hash: "sha384",
          id: ""
        },
        "DSA-SHA384": {
          sign: "dsa",
          hash: "sha384",
          id: ""
        },
        "DSA-WITH-SHA512": {
          sign: "dsa",
          hash: "sha512",
          id: ""
        },
        "DSA-SHA512": {
          sign: "dsa",
          hash: "sha512",
          id: ""
        },
        "DSA-RIPEMD160": {
          sign: "dsa",
          hash: "rmd160",
          id: ""
        },
        ripemd160WithRSA: {
          sign: "rsa",
          hash: "rmd160",
          id: "3021300906052b2403020105000414"
        },
        "RSA-RIPEMD160": {
          sign: "rsa",
          hash: "rmd160",
          id: "3021300906052b2403020105000414"
        },
        md5WithRSAEncryption: {
          sign: "rsa",
          hash: "md5",
          id: "3020300c06082a864886f70d020505000410"
        },
        "RSA-MD5": {
          sign: "rsa",
          hash: "md5",
          id: "3020300c06082a864886f70d020505000410"
        }
      };
    }, {}],
    41: [function (e, t, r) {
      t.exports = {
        "1.3.132.0.10": "secp256k1",
        "1.3.132.0.33": "p224",
        "1.2.840.10045.3.1.1": "p192",
        "1.2.840.10045.3.1.7": "p256",
        "1.3.132.0.34": "p384",
        "1.3.132.0.35": "p521"
      };
    }, {}],
    42: [function (h, d, e) {
      (function (i) {
        var r = h("create-hash"),
            n = h("stream"),
            e = h("inherits"),
            o = h("./sign"),
            a = h("./verify"),
            s = h("./algorithms.json");

        function t(e) {
          n.Writable.call(this);
          var t = s[e];
          if (!t) throw new Error("Unknown message digest");
          this._hashType = t.hash, this._hash = r(t.hash), this._tag = t.id, this._signType = t.sign;
        }

        function u(e) {
          n.Writable.call(this);
          var t = s[e];
          if (!t) throw new Error("Unknown message digest");
          this._hash = r(t.hash), this._tag = t.id, this._signType = t.sign;
        }

        function c(e) {
          return new t(e);
        }

        function f(e) {
          return new u(e);
        }

        Object.keys(s).forEach(function (e) {
          s[e].id = new i(s[e].id, "hex"), s[e.toLowerCase()] = s[e];
        }), e(t, n.Writable), t.prototype._write = function (e, t, r) {
          this._hash.update(e), r();
        }, t.prototype.update = function (e, t) {
          return "string" == typeof e && (e = new i(e, t)), this._hash.update(e), this;
        }, t.prototype.sign = function (e, t) {
          this.end();

          var r = this._hash.digest(),
              n = o(r, e, this._hashType, this._signType, this._tag);

          return t ? n.toString(t) : n;
        }, e(u, n.Writable), u.prototype._write = function (e, t, r) {
          this._hash.update(e), r();
        }, u.prototype.update = function (e, t) {
          return "string" == typeof e && (e = new i(e, t)), this._hash.update(e), this;
        }, u.prototype.verify = function (e, t, r) {
          "string" == typeof t && (t = new i(t, r)), this.end();

          var n = this._hash.digest();

          return a(t, n, e, this._signType, this._tag);
        }, d.exports = {
          Sign: c,
          Verify: f,
          createSign: c,
          createVerify: f
        };
      }).call(this, h("buffer").Buffer);
    }, {
      "./algorithms.json": 40,
      "./sign": 43,
      "./verify": 44,
      buffer: 47,
      "create-hash": 52,
      inherits: 102,
      stream: 158
    }],
    43: [function (e, t, r) {
      (function (b) {
        var c = e("create-hmac"),
            f = e("browserify-rsa"),
            h = e("elliptic").ec,
            y = e("bn.js"),
            d = e("parse-asn1"),
            l = e("./curves.json");

        function m(e, t, r, n) {
          if ((e = new b(e.toArray())).length < t.byteLength()) {
            var i = new b(t.byteLength() - e.length);
            i.fill(0), e = b.concat([i, e]);
          }

          var o = r.length,
              a = function (e, t) {
            e = (e = v(e, t)).mod(t);
            var r = new b(e.toArray());

            if (r.length < t.byteLength()) {
              var n = new b(t.byteLength() - r.length);
              n.fill(0), r = b.concat([n, r]);
            }

            return r;
          }(r, t),
              s = new b(o);

          s.fill(1);
          var u = new b(o);
          return u.fill(0), u = c(n, u).update(s).update(new b([0])).update(e).update(a).digest(), s = c(n, u).update(s).digest(), {
            k: u = c(n, u).update(s).update(new b([1])).update(e).update(a).digest(),
            v: s = c(n, u).update(s).digest()
          };
        }

        function v(e, t) {
          var r = new y(e),
              n = (e.length << 3) - t.bitLength();
          return 0 < n && r.ishrn(n), r;
        }

        function g(e, t, r) {
          var n, i;

          do {
            for (n = new b(0); 8 * n.length < e.bitLength();) {
              t.v = c(r, t.k).update(t.v).digest(), n = b.concat([n, t.v]);
            }

            i = v(n, e), t.k = c(r, t.k).update(t.v).update(new b([0])).digest(), t.v = c(r, t.k).update(t.v).digest();
          } while (-1 !== i.cmp(e));

          return i;
        }

        t.exports = function (e, t, r, n, i) {
          var o = d(t);

          if (o.curve) {
            if ("ecdsa" !== n && "ecdsa/rsa" !== n) throw new Error("wrong private key type");
            return function (e, t) {
              var r = l[t.curve.join(".")];
              if (!r) throw new Error("unknown curve " + t.curve.join("."));
              var n = new h(r).keyFromPrivate(t.privateKey).sign(e);
              return new b(n.toDER());
            }(e, o);
          }

          if ("dsa" === o.type) {
            if ("dsa" !== n) throw new Error("wrong private key type");
            return function (e, t, r) {
              for (var n, i, o, a, s = t.params.priv_key, u = t.params.p, c = t.params.q, f = t.params.g, h = new y(0), d = v(e, c).mod(c), l = !1, p = m(s, c, e, r); !1 === l;) {
                n = g(c, p, r), i = n, o = u, a = c, h = f.toRed(y.mont(o)).redPow(i).fromRed().mod(a), 0 === (l = n.invm(c).imul(d.add(s.mul(h))).mod(c)).cmpn(0) && (l = !1, h = new y(0));
              }

              return function (e, t) {
                e = e.toArray(), t = t.toArray(), 128 & e[0] && (e = [0].concat(e)), 128 & t[0] && (t = [0].concat(t));
                var r = [48, e.length + t.length + 4, 2, e.length];
                return r = r.concat(e, [2, t.length], t), new b(r);
              }(h, l);
            }(e, o, r);
          }

          if ("rsa" !== n && "ecdsa/rsa" !== n) throw new Error("wrong private key type");
          e = b.concat([i, e]);

          for (var a = o.modulus.byteLength(), s = [0, 1]; e.length + s.length + 1 < a;) {
            s.push(255);
          }

          s.push(0);

          for (var u = -1; ++u < e.length;) {
            s.push(e[u]);
          }

          return f(s, o);
        }, t.exports.getKey = m, t.exports.makeKey = g;
      }).call(this, e("buffer").Buffer);
    }, {
      "./curves.json": 41,
      "bn.js": "BN",
      "browserify-rsa": 38,
      buffer: 47,
      "create-hmac": 54,
      elliptic: 67,
      "parse-asn1": 114
    }],
    44: [function (e, t, r) {
      (function (d) {
        var l = e("bn.js"),
            p = e("elliptic").ec,
            b = e("parse-asn1"),
            y = e("./curves.json");

        function m(e, t) {
          if (e.cmpn(0) <= 0) throw new Error("invalid sig");
          if (e.cmp(t) >= t) throw new Error("invalid sig");
        }

        t.exports = function (e, t, r, n, i) {
          var o = b(r);

          if ("ec" === o.type) {
            if ("ecdsa" !== n && "ecdsa/rsa" !== n) throw new Error("wrong public key type");
            return function (e, t, r) {
              var n = y[r.data.algorithm.curve.join(".")];
              if (!n) throw new Error("unknown curve " + r.data.algorithm.curve.join("."));
              var i = new p(n),
                  o = r.data.subjectPrivateKey.data;
              return i.verify(t, e, o);
            }(e, t, o);
          }

          if ("dsa" === o.type) {
            if ("dsa" !== n) throw new Error("wrong public key type");
            return function (e, t, r) {
              var n = r.data.p,
                  i = r.data.q,
                  o = r.data.g,
                  a = r.data.pub_key,
                  s = b.signature.decode(e, "der"),
                  u = s.s,
                  c = s.r;
              m(u, i), m(c, i);
              var f = l.mont(n),
                  h = u.invm(i);
              return 0 === o.toRed(f).redPow(new l(t).mul(h).mod(i)).fromRed().mul(a.toRed(f).redPow(c.mul(h).mod(i)).fromRed()).mod(n).mod(i).cmp(c);
            }(e, t, o);
          }

          if ("rsa" !== n && "ecdsa/rsa" !== n) throw new Error("wrong public key type");
          t = d.concat([i, t]);

          for (var a = o.modulus.byteLength(), s = [1], u = 0; t.length + s.length + 2 < a;) {
            s.push(255), u++;
          }

          s.push(0);

          for (var c = -1; ++c < t.length;) {
            s.push(t[c]);
          }

          s = new d(s);
          var f = l.mont(o.modulus);
          e = (e = new l(e).toRed(f)).redPow(new l(o.publicExponent)), e = new d(e.fromRed().toArray());
          var h = u < 8 ? 1 : 0;

          for (a = Math.min(e.length, s.length), e.length !== s.length && (h = 1), c = -1; ++c < a;) {
            h |= e[c] ^ s[c];
          }

          return 0 === h;
        };
      }).call(this, e("buffer").Buffer);
    }, {
      "./curves.json": 41,
      "bn.js": "BN",
      buffer: 47,
      elliptic: 67,
      "parse-asn1": 114
    }],
    45: [function (e, t, r) {
      arguments[4][17][0].apply(r, arguments);
    }, {
      dup: 17
    }],
    46: [function (e, t, r) {
      (function (o) {
        t.exports = function (e, t) {
          for (var r = Math.min(e.length, t.length), n = new o(r), i = 0; i < r; ++i) {
            n[i] = e[i] ^ t[i];
          }

          return n;
        };
      }).call(this, e("buffer").Buffer);
    }, {
      buffer: 47
    }],
    47: [function (e, t, r) {
      var n = e("base64-js"),
          o = e("ieee754");
      r.Buffer = h, r.SlowBuffer = function (e) {
        +e != e && (e = 0);
        return h.alloc(+e);
      }, r.INSPECT_MAX_BYTES = 50;
      var i = 2147483647;

      function a(e) {
        if (i < e) throw new RangeError("Invalid typed array length");
        var t = new Uint8Array(e);
        return t.__proto__ = h.prototype, t;
      }

      function h(e, t, r) {
        if ("number" == typeof e) {
          if ("string" == typeof t) throw new Error("If encoding is specified then the first argument must be a string");
          return c(e);
        }

        return s(e, t, r);
      }

      function s(e, t, r) {
        if ("number" == typeof e) throw new TypeError('"value" argument must not be a number');
        return R(e) || e && R(e.buffer) ? function (e, t, r) {
          if (t < 0 || e.byteLength < t) throw new RangeError('"offset" is outside of buffer bounds');
          if (e.byteLength < t + (r || 0)) throw new RangeError('"length" is outside of buffer bounds');
          var n;
          n = void 0 === t && void 0 === r ? new Uint8Array(e) : void 0 === r ? new Uint8Array(e, t) : new Uint8Array(e, t, r);
          return n.__proto__ = h.prototype, n;
        }(e, t, r) : "string" == typeof e ? function (e, t) {
          "string" == typeof t && "" !== t || (t = "utf8");
          if (!h.isEncoding(t)) throw new TypeError("Unknown encoding: " + t);
          var r = 0 | l(e, t),
              n = a(r),
              i = n.write(e, t);
          i !== r && (n = n.slice(0, i));
          return n;
        }(e, t) : function (e) {
          if (h.isBuffer(e)) {
            var t = 0 | d(e.length),
                r = a(t);
            return 0 === r.length || e.copy(r, 0, 0, t), r;
          }

          if (e) {
            if (ArrayBuffer.isView(e) || "length" in e) return "number" != typeof e.length || O(e.length) ? a(0) : f(e);
            if ("Buffer" === e.type && Array.isArray(e.data)) return f(e.data);
          }

          throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object.");
        }(e);
      }

      function u(e) {
        if ("number" != typeof e) throw new TypeError('"size" argument must be of type number');
        if (e < 0) throw new RangeError('"size" argument must not be negative');
      }

      function c(e) {
        return u(e), a(e < 0 ? 0 : 0 | d(e));
      }

      function f(e) {
        for (var t = e.length < 0 ? 0 : 0 | d(e.length), r = a(t), n = 0; n < t; n += 1) {
          r[n] = 255 & e[n];
        }

        return r;
      }

      function d(e) {
        if (i <= e) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + i.toString(16) + " bytes");
        return 0 | e;
      }

      function l(e, t) {
        if (h.isBuffer(e)) return e.length;
        if (ArrayBuffer.isView(e) || R(e)) return e.byteLength;
        "string" != typeof e && (e = "" + e);
        var r = e.length;
        if (0 === r) return 0;

        for (var n = !1;;) {
          switch (t) {
            case "ascii":
            case "latin1":
            case "binary":
              return r;

            case "utf8":
            case "utf-8":
            case void 0:
              return B(e).length;

            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return 2 * r;

            case "hex":
              return r >>> 1;

            case "base64":
              return N(e).length;

            default:
              if (n) return B(e).length;
              t = ("" + t).toLowerCase(), n = !0;
          }
        }
      }

      function p(e, t, r) {
        var n = e[t];
        e[t] = e[r], e[r] = n;
      }

      function b(e, t, r, n, i) {
        if (0 === e.length) return -1;

        if ("string" == typeof r ? (n = r, r = 0) : 2147483647 < r ? r = 2147483647 : r < -2147483648 && (r = -2147483648), O(r = +r) && (r = i ? 0 : e.length - 1), r < 0 && (r = e.length + r), r >= e.length) {
          if (i) return -1;
          r = e.length - 1;
        } else if (r < 0) {
          if (!i) return -1;
          r = 0;
        }

        if ("string" == typeof t && (t = h.from(t, n)), h.isBuffer(t)) return 0 === t.length ? -1 : y(e, t, r, n, i);
        if ("number" == typeof t) return t &= 255, "function" == typeof Uint8Array.prototype.indexOf ? i ? Uint8Array.prototype.indexOf.call(e, t, r) : Uint8Array.prototype.lastIndexOf.call(e, t, r) : y(e, [t], r, n, i);
        throw new TypeError("val must be string, number or Buffer");
      }

      function y(e, t, r, n, i) {
        var o,
            a = 1,
            s = e.length,
            u = t.length;

        if (void 0 !== n && ("ucs2" === (n = String(n).toLowerCase()) || "ucs-2" === n || "utf16le" === n || "utf-16le" === n)) {
          if (e.length < 2 || t.length < 2) return -1;
          s /= a = 2, u /= 2, r /= 2;
        }

        function c(e, t) {
          return 1 === a ? e[t] : e.readUInt16BE(t * a);
        }

        if (i) {
          var f = -1;

          for (o = r; o < s; o++) {
            if (c(e, o) === c(t, -1 === f ? 0 : o - f)) {
              if (-1 === f && (f = o), o - f + 1 === u) return f * a;
            } else -1 !== f && (o -= o - f), f = -1;
          }
        } else for (s < r + u && (r = s - u), o = r; 0 <= o; o--) {
          for (var h = !0, d = 0; d < u; d++) {
            if (c(e, o + d) !== c(t, d)) {
              h = !1;
              break;
            }
          }

          if (h) return o;
        }

        return -1;
      }

      function m(e, t, r, n) {
        r = Number(r) || 0;
        var i = e.length - r;
        n ? i < (n = Number(n)) && (n = i) : n = i;
        var o = t.length;
        o / 2 < n && (n = o / 2);

        for (var a = 0; a < n; ++a) {
          var s = parseInt(t.substr(2 * a, 2), 16);
          if (O(s)) return a;
          e[r + a] = s;
        }

        return a;
      }

      function v(e, t, r, n) {
        return P(function (e) {
          for (var t = [], r = 0; r < e.length; ++r) {
            t.push(255 & e.charCodeAt(r));
          }

          return t;
        }(t), e, r, n);
      }

      function g(e, t, r) {
        return 0 === t && r === e.length ? n.fromByteArray(e) : n.fromByteArray(e.slice(t, r));
      }

      function w(e, t, r) {
        r = Math.min(e.length, r);

        for (var n = [], i = t; i < r;) {
          var o,
              a,
              s,
              u,
              c = e[i],
              f = null,
              h = 239 < c ? 4 : 223 < c ? 3 : 191 < c ? 2 : 1;
          if (i + h <= r) switch (h) {
            case 1:
              c < 128 && (f = c);
              break;

            case 2:
              128 == (192 & (o = e[i + 1])) && 127 < (u = (31 & c) << 6 | 63 & o) && (f = u);
              break;

            case 3:
              o = e[i + 1], a = e[i + 2], 128 == (192 & o) && 128 == (192 & a) && 2047 < (u = (15 & c) << 12 | (63 & o) << 6 | 63 & a) && (u < 55296 || 57343 < u) && (f = u);
              break;

            case 4:
              o = e[i + 1], a = e[i + 2], s = e[i + 3], 128 == (192 & o) && 128 == (192 & a) && 128 == (192 & s) && 65535 < (u = (15 & c) << 18 | (63 & o) << 12 | (63 & a) << 6 | 63 & s) && u < 1114112 && (f = u);
          }
          null === f ? (f = 65533, h = 1) : 65535 < f && (f -= 65536, n.push(f >>> 10 & 1023 | 55296), f = 56320 | 1023 & f), n.push(f), i += h;
        }

        return function (e) {
          var t = e.length;
          if (t <= _) return String.fromCharCode.apply(String, e);
          var r = "",
              n = 0;

          for (; n < t;) {
            r += String.fromCharCode.apply(String, e.slice(n, n += _));
          }

          return r;
        }(n);
      }

      r.kMaxLength = i, (h.TYPED_ARRAY_SUPPORT = function () {
        try {
          var e = new Uint8Array(1);
          return e.__proto__ = {
            __proto__: Uint8Array.prototype,
            foo: function foo() {
              return 42;
            }
          }, 42 === e.foo();
        } catch (e) {
          return !1;
        }
      }()) || "undefined" == typeof console || "function" != typeof console.error || console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), Object.defineProperty(h.prototype, "parent", {
        get: function get() {
          if (this instanceof h) return this.buffer;
        }
      }), Object.defineProperty(h.prototype, "offset", {
        get: function get() {
          if (this instanceof h) return this.byteOffset;
        }
      }), "undefined" != typeof Symbol && Symbol.species && h[Symbol.species] === h && Object.defineProperty(h, Symbol.species, {
        value: null,
        configurable: !0,
        enumerable: !1,
        writable: !1
      }), h.poolSize = 8192, h.from = function (e, t, r) {
        return s(e, t, r);
      }, h.prototype.__proto__ = Uint8Array.prototype, h.__proto__ = Uint8Array, h.alloc = function (e, t, r) {
        return i = t, o = r, u(n = e), n <= 0 ? a(n) : void 0 !== i ? "string" == typeof o ? a(n).fill(i, o) : a(n).fill(i) : a(n);
        var n, i, o;
      }, h.allocUnsafe = function (e) {
        return c(e);
      }, h.allocUnsafeSlow = function (e) {
        return c(e);
      }, h.isBuffer = function (e) {
        return null != e && !0 === e._isBuffer;
      }, h.compare = function (e, t) {
        if (!h.isBuffer(e) || !h.isBuffer(t)) throw new TypeError("Arguments must be Buffers");
        if (e === t) return 0;

        for (var r = e.length, n = t.length, i = 0, o = Math.min(r, n); i < o; ++i) {
          if (e[i] !== t[i]) {
            r = e[i], n = t[i];
            break;
          }
        }

        return r < n ? -1 : n < r ? 1 : 0;
      }, h.isEncoding = function (e) {
        switch (String(e).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return !0;

          default:
            return !1;
        }
      }, h.concat = function (e, t) {
        if (!Array.isArray(e)) throw new TypeError('"list" argument must be an Array of Buffers');
        if (0 === e.length) return h.alloc(0);
        var r;
        if (void 0 === t) for (r = t = 0; r < e.length; ++r) {
          t += e[r].length;
        }
        var n = h.allocUnsafe(t),
            i = 0;

        for (r = 0; r < e.length; ++r) {
          var o = e[r];
          if (ArrayBuffer.isView(o) && (o = h.from(o)), !h.isBuffer(o)) throw new TypeError('"list" argument must be an Array of Buffers');
          o.copy(n, i), i += o.length;
        }

        return n;
      }, h.byteLength = l, h.prototype._isBuffer = !0, h.prototype.swap16 = function () {
        var e = this.length;
        if (e % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");

        for (var t = 0; t < e; t += 2) {
          p(this, t, t + 1);
        }

        return this;
      }, h.prototype.swap32 = function () {
        var e = this.length;
        if (e % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");

        for (var t = 0; t < e; t += 4) {
          p(this, t, t + 3), p(this, t + 1, t + 2);
        }

        return this;
      }, h.prototype.swap64 = function () {
        var e = this.length;
        if (e % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");

        for (var t = 0; t < e; t += 8) {
          p(this, t, t + 7), p(this, t + 1, t + 6), p(this, t + 2, t + 5), p(this, t + 3, t + 4);
        }

        return this;
      }, h.prototype.toLocaleString = h.prototype.toString = function () {
        var e = this.length;
        return 0 === e ? "" : 0 === arguments.length ? w(this, 0, e) : function (e, t, r) {
          var n = !1;
          if ((void 0 === t || t < 0) && (t = 0), t > this.length) return "";
          if ((void 0 === r || r > this.length) && (r = this.length), r <= 0) return "";
          if ((r >>>= 0) <= (t >>>= 0)) return "";

          for (e || (e = "utf8");;) {
            switch (e) {
              case "hex":
                return M(this, t, r);

              case "utf8":
              case "utf-8":
                return w(this, t, r);

              case "ascii":
                return A(this, t, r);

              case "latin1":
              case "binary":
                return x(this, t, r);

              case "base64":
                return g(this, t, r);

              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return k(this, t, r);

              default:
                if (n) throw new TypeError("Unknown encoding: " + e);
                e = (e + "").toLowerCase(), n = !0;
            }
          }
        }.apply(this, arguments);
      }, h.prototype.equals = function (e) {
        if (!h.isBuffer(e)) throw new TypeError("Argument must be a Buffer");
        return this === e || 0 === h.compare(this, e);
      }, h.prototype.inspect = function () {
        var e = "",
            t = r.INSPECT_MAX_BYTES;
        return 0 < this.length && (e = this.toString("hex", 0, t).match(/.{2}/g).join(" "), this.length > t && (e += " ... ")), "<Buffer " + e + ">";
      }, h.prototype.compare = function (e, t, r, n, i) {
        if (!h.isBuffer(e)) throw new TypeError("Argument must be a Buffer");
        if (void 0 === t && (t = 0), void 0 === r && (r = e ? e.length : 0), void 0 === n && (n = 0), void 0 === i && (i = this.length), t < 0 || r > e.length || n < 0 || i > this.length) throw new RangeError("out of range index");
        if (i <= n && r <= t) return 0;
        if (i <= n) return -1;
        if (r <= t) return 1;
        if (this === e) return 0;

        for (var o = (i >>>= 0) - (n >>>= 0), a = (r >>>= 0) - (t >>>= 0), s = Math.min(o, a), u = this.slice(n, i), c = e.slice(t, r), f = 0; f < s; ++f) {
          if (u[f] !== c[f]) {
            o = u[f], a = c[f];
            break;
          }
        }

        return o < a ? -1 : a < o ? 1 : 0;
      }, h.prototype.includes = function (e, t, r) {
        return -1 !== this.indexOf(e, t, r);
      }, h.prototype.indexOf = function (e, t, r) {
        return b(this, e, t, r, !0);
      }, h.prototype.lastIndexOf = function (e, t, r) {
        return b(this, e, t, r, !1);
      }, h.prototype.write = function (e, t, r, n) {
        if (void 0 === t) n = "utf8", r = this.length, t = 0;else if (void 0 === r && "string" == typeof t) n = t, r = this.length, t = 0;else {
          if (!isFinite(t)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
          t >>>= 0, isFinite(r) ? (r >>>= 0, void 0 === n && (n = "utf8")) : (n = r, r = void 0);
        }
        var i = this.length - t;
        if ((void 0 === r || i < r) && (r = i), 0 < e.length && (r < 0 || t < 0) || t > this.length) throw new RangeError("Attempt to write outside buffer bounds");
        n || (n = "utf8");

        for (var o, a, s, u, c, f, h, d, l, p = !1;;) {
          switch (n) {
            case "hex":
              return m(this, e, t, r);

            case "utf8":
            case "utf-8":
              return d = t, l = r, P(B(e, (h = this).length - d), h, d, l);

            case "ascii":
              return v(this, e, t, r);

            case "latin1":
            case "binary":
              return v(this, e, t, r);

            case "base64":
              return u = this, c = t, f = r, P(N(e), u, c, f);

            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return a = t, s = r, P(function (e, t) {
                for (var r, n, i, o = [], a = 0; a < e.length && !((t -= 2) < 0); ++a) {
                  r = e.charCodeAt(a), n = r >> 8, i = r % 256, o.push(i), o.push(n);
                }

                return o;
              }(e, (o = this).length - a), o, a, s);

            default:
              if (p) throw new TypeError("Unknown encoding: " + n);
              n = ("" + n).toLowerCase(), p = !0;
          }
        }
      }, h.prototype.toJSON = function () {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      var _ = 4096;

      function A(e, t, r) {
        var n = "";
        r = Math.min(e.length, r);

        for (var i = t; i < r; ++i) {
          n += String.fromCharCode(127 & e[i]);
        }

        return n;
      }

      function x(e, t, r) {
        var n = "";
        r = Math.min(e.length, r);

        for (var i = t; i < r; ++i) {
          n += String.fromCharCode(e[i]);
        }

        return n;
      }

      function M(e, t, r) {
        var n = e.length;
        (!t || t < 0) && (t = 0), (!r || r < 0 || n < r) && (r = n);

        for (var i = "", o = t; o < r; ++o) {
          i += C(e[o]);
        }

        return i;
      }

      function k(e, t, r) {
        for (var n = e.slice(t, r), i = "", o = 0; o < n.length; o += 2) {
          i += String.fromCharCode(n[o] + 256 * n[o + 1]);
        }

        return i;
      }

      function E(e, t, r) {
        if (e % 1 != 0 || e < 0) throw new RangeError("offset is not uint");
        if (r < e + t) throw new RangeError("Trying to access beyond buffer length");
      }

      function S(e, t, r, n, i, o) {
        if (!h.isBuffer(e)) throw new TypeError('"buffer" argument must be a Buffer instance');
        if (i < t || t < o) throw new RangeError('"value" argument is out of bounds');
        if (r + n > e.length) throw new RangeError("Index out of range");
      }

      function U(e, t, r, n, i, o) {
        if (r + n > e.length) throw new RangeError("Index out of range");
        if (r < 0) throw new RangeError("Index out of range");
      }

      function j(e, t, r, n, i) {
        return t = +t, r >>>= 0, i || U(e, 0, r, 4), o.write(e, t, r, n, 23, 4), r + 4;
      }

      function I(e, t, r, n, i) {
        return t = +t, r >>>= 0, i || U(e, 0, r, 8), o.write(e, t, r, n, 52, 8), r + 8;
      }

      h.prototype.slice = function (e, t) {
        var r = this.length;
        (e = ~~e) < 0 ? (e += r) < 0 && (e = 0) : r < e && (e = r), (t = void 0 === t ? r : ~~t) < 0 ? (t += r) < 0 && (t = 0) : r < t && (t = r), t < e && (t = e);
        var n = this.subarray(e, t);
        return n.__proto__ = h.prototype, n;
      }, h.prototype.readUIntLE = function (e, t, r) {
        e >>>= 0, t >>>= 0, r || E(e, t, this.length);

        for (var n = this[e], i = 1, o = 0; ++o < t && (i *= 256);) {
          n += this[e + o] * i;
        }

        return n;
      }, h.prototype.readUIntBE = function (e, t, r) {
        e >>>= 0, t >>>= 0, r || E(e, t, this.length);

        for (var n = this[e + --t], i = 1; 0 < t && (i *= 256);) {
          n += this[e + --t] * i;
        }

        return n;
      }, h.prototype.readUInt8 = function (e, t) {
        return e >>>= 0, t || E(e, 1, this.length), this[e];
      }, h.prototype.readUInt16LE = function (e, t) {
        return e >>>= 0, t || E(e, 2, this.length), this[e] | this[e + 1] << 8;
      }, h.prototype.readUInt16BE = function (e, t) {
        return e >>>= 0, t || E(e, 2, this.length), this[e] << 8 | this[e + 1];
      }, h.prototype.readUInt32LE = function (e, t) {
        return e >>>= 0, t || E(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + 16777216 * this[e + 3];
      }, h.prototype.readUInt32BE = function (e, t) {
        return e >>>= 0, t || E(e, 4, this.length), 16777216 * this[e] + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);
      }, h.prototype.readIntLE = function (e, t, r) {
        e >>>= 0, t >>>= 0, r || E(e, t, this.length);

        for (var n = this[e], i = 1, o = 0; ++o < t && (i *= 256);) {
          n += this[e + o] * i;
        }

        return (i *= 128) <= n && (n -= Math.pow(2, 8 * t)), n;
      }, h.prototype.readIntBE = function (e, t, r) {
        e >>>= 0, t >>>= 0, r || E(e, t, this.length);

        for (var n = t, i = 1, o = this[e + --n]; 0 < n && (i *= 256);) {
          o += this[e + --n] * i;
        }

        return (i *= 128) <= o && (o -= Math.pow(2, 8 * t)), o;
      }, h.prototype.readInt8 = function (e, t) {
        return e >>>= 0, t || E(e, 1, this.length), 128 & this[e] ? -1 * (255 - this[e] + 1) : this[e];
      }, h.prototype.readInt16LE = function (e, t) {
        e >>>= 0, t || E(e, 2, this.length);
        var r = this[e] | this[e + 1] << 8;
        return 32768 & r ? 4294901760 | r : r;
      }, h.prototype.readInt16BE = function (e, t) {
        e >>>= 0, t || E(e, 2, this.length);
        var r = this[e + 1] | this[e] << 8;
        return 32768 & r ? 4294901760 | r : r;
      }, h.prototype.readInt32LE = function (e, t) {
        return e >>>= 0, t || E(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;
      }, h.prototype.readInt32BE = function (e, t) {
        return e >>>= 0, t || E(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];
      }, h.prototype.readFloatLE = function (e, t) {
        return e >>>= 0, t || E(e, 4, this.length), o.read(this, e, !0, 23, 4);
      }, h.prototype.readFloatBE = function (e, t) {
        return e >>>= 0, t || E(e, 4, this.length), o.read(this, e, !1, 23, 4);
      }, h.prototype.readDoubleLE = function (e, t) {
        return e >>>= 0, t || E(e, 8, this.length), o.read(this, e, !0, 52, 8);
      }, h.prototype.readDoubleBE = function (e, t) {
        return e >>>= 0, t || E(e, 8, this.length), o.read(this, e, !1, 52, 8);
      }, h.prototype.writeUIntLE = function (e, t, r, n) {
        (e = +e, t >>>= 0, r >>>= 0, n) || S(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
        var i = 1,
            o = 0;

        for (this[t] = 255 & e; ++o < r && (i *= 256);) {
          this[t + o] = e / i & 255;
        }

        return t + r;
      }, h.prototype.writeUIntBE = function (e, t, r, n) {
        (e = +e, t >>>= 0, r >>>= 0, n) || S(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
        var i = r - 1,
            o = 1;

        for (this[t + i] = 255 & e; 0 <= --i && (o *= 256);) {
          this[t + i] = e / o & 255;
        }

        return t + r;
      }, h.prototype.writeUInt8 = function (e, t, r) {
        return e = +e, t >>>= 0, r || S(this, e, t, 1, 255, 0), this[t] = 255 & e, t + 1;
      }, h.prototype.writeUInt16LE = function (e, t, r) {
        return e = +e, t >>>= 0, r || S(this, e, t, 2, 65535, 0), this[t] = 255 & e, this[t + 1] = e >>> 8, t + 2;
      }, h.prototype.writeUInt16BE = function (e, t, r) {
        return e = +e, t >>>= 0, r || S(this, e, t, 2, 65535, 0), this[t] = e >>> 8, this[t + 1] = 255 & e, t + 2;
      }, h.prototype.writeUInt32LE = function (e, t, r) {
        return e = +e, t >>>= 0, r || S(this, e, t, 4, 4294967295, 0), this[t + 3] = e >>> 24, this[t + 2] = e >>> 16, this[t + 1] = e >>> 8, this[t] = 255 & e, t + 4;
      }, h.prototype.writeUInt32BE = function (e, t, r) {
        return e = +e, t >>>= 0, r || S(this, e, t, 4, 4294967295, 0), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e, t + 4;
      }, h.prototype.writeIntLE = function (e, t, r, n) {
        if (e = +e, t >>>= 0, !n) {
          var i = Math.pow(2, 8 * r - 1);
          S(this, e, t, r, i - 1, -i);
        }

        var o = 0,
            a = 1,
            s = 0;

        for (this[t] = 255 & e; ++o < r && (a *= 256);) {
          e < 0 && 0 === s && 0 !== this[t + o - 1] && (s = 1), this[t + o] = (e / a >> 0) - s & 255;
        }

        return t + r;
      }, h.prototype.writeIntBE = function (e, t, r, n) {
        if (e = +e, t >>>= 0, !n) {
          var i = Math.pow(2, 8 * r - 1);
          S(this, e, t, r, i - 1, -i);
        }

        var o = r - 1,
            a = 1,
            s = 0;

        for (this[t + o] = 255 & e; 0 <= --o && (a *= 256);) {
          e < 0 && 0 === s && 0 !== this[t + o + 1] && (s = 1), this[t + o] = (e / a >> 0) - s & 255;
        }

        return t + r;
      }, h.prototype.writeInt8 = function (e, t, r) {
        return e = +e, t >>>= 0, r || S(this, e, t, 1, 127, -128), e < 0 && (e = 255 + e + 1), this[t] = 255 & e, t + 1;
      }, h.prototype.writeInt16LE = function (e, t, r) {
        return e = +e, t >>>= 0, r || S(this, e, t, 2, 32767, -32768), this[t] = 255 & e, this[t + 1] = e >>> 8, t + 2;
      }, h.prototype.writeInt16BE = function (e, t, r) {
        return e = +e, t >>>= 0, r || S(this, e, t, 2, 32767, -32768), this[t] = e >>> 8, this[t + 1] = 255 & e, t + 2;
      }, h.prototype.writeInt32LE = function (e, t, r) {
        return e = +e, t >>>= 0, r || S(this, e, t, 4, 2147483647, -2147483648), this[t] = 255 & e, this[t + 1] = e >>> 8, this[t + 2] = e >>> 16, this[t + 3] = e >>> 24, t + 4;
      }, h.prototype.writeInt32BE = function (e, t, r) {
        return e = +e, t >>>= 0, r || S(this, e, t, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e, t + 4;
      }, h.prototype.writeFloatLE = function (e, t, r) {
        return j(this, e, t, !0, r);
      }, h.prototype.writeFloatBE = function (e, t, r) {
        return j(this, e, t, !1, r);
      }, h.prototype.writeDoubleLE = function (e, t, r) {
        return I(this, e, t, !0, r);
      }, h.prototype.writeDoubleBE = function (e, t, r) {
        return I(this, e, t, !1, r);
      }, h.prototype.copy = function (e, t, r, n) {
        if (!h.isBuffer(e)) throw new TypeError("argument should be a Buffer");
        if (r || (r = 0), n || 0 === n || (n = this.length), t >= e.length && (t = e.length), t || (t = 0), 0 < n && n < r && (n = r), n === r) return 0;
        if (0 === e.length || 0 === this.length) return 0;
        if (t < 0) throw new RangeError("targetStart out of bounds");
        if (r < 0 || r >= this.length) throw new RangeError("Index out of range");
        if (n < 0) throw new RangeError("sourceEnd out of bounds");
        n > this.length && (n = this.length), e.length - t < n - r && (n = e.length - t + r);
        var i = n - r;
        if (this === e && "function" == typeof Uint8Array.prototype.copyWithin) this.copyWithin(t, r, n);else if (this === e && r < t && t < n) for (var o = i - 1; 0 <= o; --o) {
          e[o + t] = this[o + r];
        } else Uint8Array.prototype.set.call(e, this.subarray(r, n), t);
        return i;
      }, h.prototype.fill = function (e, t, r, n) {
        if ("string" == typeof e) {
          if ("string" == typeof t ? (n = t, t = 0, r = this.length) : "string" == typeof r && (n = r, r = this.length), void 0 !== n && "string" != typeof n) throw new TypeError("encoding must be a string");
          if ("string" == typeof n && !h.isEncoding(n)) throw new TypeError("Unknown encoding: " + n);

          if (1 === e.length) {
            var i = e.charCodeAt(0);
            ("utf8" === n && i < 128 || "latin1" === n) && (e = i);
          }
        } else "number" == typeof e && (e &= 255);

        if (t < 0 || this.length < t || this.length < r) throw new RangeError("Out of range index");
        if (r <= t) return this;
        var o;
        if (t >>>= 0, r = void 0 === r ? this.length : r >>> 0, e || (e = 0), "number" == typeof e) for (o = t; o < r; ++o) {
          this[o] = e;
        } else {
          var a = h.isBuffer(e) ? e : new h(e, n),
              s = a.length;
          if (0 === s) throw new TypeError('The value "' + e + '" is invalid for argument "value"');

          for (o = 0; o < r - t; ++o) {
            this[o + t] = a[o % s];
          }
        }
        return this;
      };
      var T = /[^+/0-9A-Za-z-_]/g;

      function C(e) {
        return e < 16 ? "0" + e.toString(16) : e.toString(16);
      }

      function B(e, t) {
        var r;
        t = t || 1 / 0;

        for (var n = e.length, i = null, o = [], a = 0; a < n; ++a) {
          if (55295 < (r = e.charCodeAt(a)) && r < 57344) {
            if (!i) {
              if (56319 < r) {
                -1 < (t -= 3) && o.push(239, 191, 189);
                continue;
              }

              if (a + 1 === n) {
                -1 < (t -= 3) && o.push(239, 191, 189);
                continue;
              }

              i = r;
              continue;
            }

            if (r < 56320) {
              -1 < (t -= 3) && o.push(239, 191, 189), i = r;
              continue;
            }

            r = 65536 + (i - 55296 << 10 | r - 56320);
          } else i && -1 < (t -= 3) && o.push(239, 191, 189);

          if (i = null, r < 128) {
            if ((t -= 1) < 0) break;
            o.push(r);
          } else if (r < 2048) {
            if ((t -= 2) < 0) break;
            o.push(r >> 6 | 192, 63 & r | 128);
          } else if (r < 65536) {
            if ((t -= 3) < 0) break;
            o.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128);
          } else {
            if (!(r < 1114112)) throw new Error("Invalid code point");
            if ((t -= 4) < 0) break;
            o.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128);
          }
        }

        return o;
      }

      function N(e) {
        return n.toByteArray(function (e) {
          if ((e = (e = e.split("=")[0]).trim().replace(T, "")).length < 2) return "";

          for (; e.length % 4 != 0;) {
            e += "=";
          }

          return e;
        }(e));
      }

      function P(e, t, r, n) {
        for (var i = 0; i < n && !(i + r >= t.length || i >= e.length); ++i) {
          t[i + r] = e[i];
        }

        return i;
      }

      function R(e) {
        return e instanceof ArrayBuffer || null != e && null != e.constructor && "ArrayBuffer" === e.constructor.name && "number" == typeof e.byteLength;
      }

      function O(e) {
        return e != e;
      }
    }, {
      "base64-js": 15,
      ieee754: 100
    }],
    48: [function (e, t, r) {
      t.exports = {
        100: "Continue",
        101: "Switching Protocols",
        102: "Processing",
        200: "OK",
        201: "Created",
        202: "Accepted",
        203: "Non-Authoritative Information",
        204: "No Content",
        205: "Reset Content",
        206: "Partial Content",
        207: "Multi-Status",
        208: "Already Reported",
        226: "IM Used",
        300: "Multiple Choices",
        301: "Moved Permanently",
        302: "Found",
        303: "See Other",
        304: "Not Modified",
        305: "Use Proxy",
        307: "Temporary Redirect",
        308: "Permanent Redirect",
        400: "Bad Request",
        401: "Unauthorized",
        402: "Payment Required",
        403: "Forbidden",
        404: "Not Found",
        405: "Method Not Allowed",
        406: "Not Acceptable",
        407: "Proxy Authentication Required",
        408: "Request Timeout",
        409: "Conflict",
        410: "Gone",
        411: "Length Required",
        412: "Precondition Failed",
        413: "Payload Too Large",
        414: "URI Too Long",
        415: "Unsupported Media Type",
        416: "Range Not Satisfiable",
        417: "Expectation Failed",
        418: "I'm a teapot",
        421: "Misdirected Request",
        422: "Unprocessable Entity",
        423: "Locked",
        424: "Failed Dependency",
        425: "Unordered Collection",
        426: "Upgrade Required",
        428: "Precondition Required",
        429: "Too Many Requests",
        431: "Request Header Fields Too Large",
        451: "Unavailable For Legal Reasons",
        500: "Internal Server Error",
        501: "Not Implemented",
        502: "Bad Gateway",
        503: "Service Unavailable",
        504: "Gateway Timeout",
        505: "HTTP Version Not Supported",
        506: "Variant Also Negotiates",
        507: "Insufficient Storage",
        508: "Loop Detected",
        509: "Bandwidth Limit Exceeded",
        510: "Not Extended",
        511: "Network Authentication Required"
      };
    }, {}],
    49: [function (e, t, r) {
      var i = e("safe-buffer").Buffer,
          n = e("stream").Transform,
          o = e("string_decoder").StringDecoder;

      function a(e) {
        n.call(this), this.hashMode = "string" == typeof e, this.hashMode ? this[e] = this._finalOrDigest : this["final"] = this._finalOrDigest, this._final && (this.__final = this._final, this._final = null), this._decoder = null, this._encoding = null;
      }

      e("inherits")(a, n), a.prototype.update = function (e, t, r) {
        "string" == typeof e && (e = i.from(e, t));

        var n = this._update(e);

        return this.hashMode ? this : (r && (n = this._toString(n, r)), n);
      }, a.prototype.setAutoPadding = function () {}, a.prototype.getAuthTag = function () {
        throw new Error("trying to get auth tag in unsupported state");
      }, a.prototype.setAuthTag = function () {
        throw new Error("trying to set auth tag in unsupported state");
      }, a.prototype.setAAD = function () {
        throw new Error("trying to set aad in unsupported state");
      }, a.prototype._transform = function (e, t, r) {
        var n;

        try {
          this.hashMode ? this._update(e) : this.push(this._update(e));
        } catch (e) {
          n = e;
        } finally {
          r(n);
        }
      }, a.prototype._flush = function (e) {
        var t;

        try {
          this.push(this.__final());
        } catch (e) {
          t = e;
        }

        e(t);
      }, a.prototype._finalOrDigest = function (e) {
        var t = this.__final() || i.alloc(0);
        return e && (t = this._toString(t, e, !0)), t;
      }, a.prototype._toString = function (e, t, r) {
        if (this._decoder || (this._decoder = new o(t), this._encoding = t), this._encoding !== t) throw new Error("can't switch encodings");

        var n = this._decoder.write(e);

        return r && (n += this._decoder.end()), n;
      }, t.exports = a;
    }, {
      inherits: 102,
      "safe-buffer": 149,
      stream: 158,
      string_decoder: 163
    }],
    50: [function (e, t, r) {
      (function (e) {
        function t(e) {
          return Object.prototype.toString.call(e);
        }

        r.isArray = function (e) {
          return Array.isArray ? Array.isArray(e) : "[object Array]" === t(e);
        }, r.isBoolean = function (e) {
          return "boolean" == typeof e;
        }, r.isNull = function (e) {
          return null === e;
        }, r.isNullOrUndefined = function (e) {
          return null == e;
        }, r.isNumber = function (e) {
          return "number" == typeof e;
        }, r.isString = function (e) {
          return "string" == typeof e;
        }, r.isSymbol = function (e) {
          return "symbol" === (void 0 === e ? "undefined" : _typeof(e));
        }, r.isUndefined = function (e) {
          return void 0 === e;
        }, r.isRegExp = function (e) {
          return "[object RegExp]" === t(e);
        }, r.isObject = function (e) {
          return "object" === (void 0 === e ? "undefined" : _typeof(e)) && null !== e;
        }, r.isDate = function (e) {
          return "[object Date]" === t(e);
        }, r.isError = function (e) {
          return "[object Error]" === t(e) || e instanceof Error;
        }, r.isFunction = function (e) {
          return "function" == typeof e;
        }, r.isPrimitive = function (e) {
          return null === e || "boolean" == typeof e || "number" == typeof e || "string" == typeof e || "symbol" === (void 0 === e ? "undefined" : _typeof(e)) || void 0 === e;
        }, r.isBuffer = e.isBuffer;
      }).call(this, {
        isBuffer: e("../../is-buffer/index.js")
      });
    }, {
      "../../is-buffer/index.js": 103
    }],
    51: [function (e, s, t) {
      (function (o) {
        var t = e("elliptic"),
            n = e("bn.js");

        s.exports = function (e) {
          return new i(e);
        };

        var r = {
          secp256k1: {
            name: "secp256k1",
            byteLength: 32
          },
          secp224r1: {
            name: "p224",
            byteLength: 28
          },
          prime256v1: {
            name: "p256",
            byteLength: 32
          },
          prime192v1: {
            name: "p192",
            byteLength: 24
          },
          ed25519: {
            name: "ed25519",
            byteLength: 32
          },
          secp384r1: {
            name: "p384",
            byteLength: 48
          },
          secp521r1: {
            name: "p521",
            byteLength: 66
          }
        };

        function i(e) {
          this.curveType = r[e], this.curveType || (this.curveType = {
            name: e
          }), this.curve = new t.ec(this.curveType.name), this.keys = void 0;
        }

        function a(e, t, r) {
          Array.isArray(e) || (e = e.toArray());
          var n = new o(e);

          if (r && n.length < r) {
            var i = new o(r - n.length);
            i.fill(0), n = o.concat([i, n]);
          }

          return t ? n.toString(t) : n;
        }

        r.p224 = r.secp224r1, r.p256 = r.secp256r1 = r.prime256v1, r.p192 = r.secp192r1 = r.prime192v1, r.p384 = r.secp384r1, r.p521 = r.secp521r1, i.prototype.generateKeys = function (e, t) {
          return this.keys = this.curve.genKeyPair(), this.getPublicKey(e, t);
        }, i.prototype.computeSecret = function (e, t, r) {
          return t = t || "utf8", o.isBuffer(e) || (e = new o(e, t)), a(this.curve.keyFromPublic(e).getPublic().mul(this.keys.getPrivate()).getX(), r, this.curveType.byteLength);
        }, i.prototype.getPublicKey = function (e, t) {
          var r = this.keys.getPublic("compressed" === t, !0);
          return "hybrid" === t && (r[r.length - 1] % 2 ? r[0] = 7 : r[0] = 6), a(r, e);
        }, i.prototype.getPrivateKey = function (e) {
          return a(this.keys.getPrivate(), e);
        }, i.prototype.setPublicKey = function (e, t) {
          return t = t || "utf8", o.isBuffer(e) || (e = new o(e, t)), this.keys._importPublic(e), this;
        }, i.prototype.setPrivateKey = function (e, t) {
          t = t || "utf8", o.isBuffer(e) || (e = new o(e, t));
          var r = new n(e);
          return r = r.toString(16), this.keys = this.curve.genKeyPair(), this.keys._importPrivate(r), this;
        };
      }).call(this, e("buffer").Buffer);
    }, {
      "bn.js": "BN",
      buffer: 47,
      elliptic: 67
    }],
    52: [function (e, t, r) {
      var n = e("inherits"),
          i = e("md5.js"),
          o = e("ripemd160"),
          a = e("sha.js"),
          s = e("cipher-base");

      function u(e) {
        s.call(this, "digest"), this._hash = e;
      }

      n(u, s), u.prototype._update = function (e) {
        this._hash.update(e);
      }, u.prototype._final = function () {
        return this._hash.digest();
      }, t.exports = function (e) {
        return "md5" === (e = e.toLowerCase()) ? new i() : "rmd160" === e || "ripemd160" === e ? new o() : new u(a(e));
      };
    }, {
      "cipher-base": 49,
      inherits: 102,
      "md5.js": 105,
      ripemd160: 148,
      "sha.js": 151
    }],
    53: [function (e, t, r) {
      var n = e("md5.js");

      t.exports = function (e) {
        return new n().update(e).digest();
      };
    }, {
      "md5.js": 105
    }],
    54: [function (e, t, r) {
      var n = e("inherits"),
          i = e("./legacy"),
          a = e("cipher-base"),
          s = e("safe-buffer").Buffer,
          o = e("create-hash/md5"),
          u = e("ripemd160"),
          c = e("sha.js"),
          f = s.alloc(128);

      function h(e, t) {
        a.call(this, "digest"), "string" == typeof t && (t = s.from(t));
        var r = "sha512" === e || "sha384" === e ? 128 : 64;
        (this._alg = e, (this._key = t).length > r) ? t = ("rmd160" === e ? new u() : c(e)).update(t).digest() : t.length < r && (t = s.concat([t, f], r));

        for (var n = this._ipad = s.allocUnsafe(r), i = this._opad = s.allocUnsafe(r), o = 0; o < r; o++) {
          n[o] = 54 ^ t[o], i[o] = 92 ^ t[o];
        }

        this._hash = "rmd160" === e ? new u() : c(e), this._hash.update(n);
      }

      n(h, a), h.prototype._update = function (e) {
        this._hash.update(e);
      }, h.prototype._final = function () {
        var e = this._hash.digest();

        return ("rmd160" === this._alg ? new u() : c(this._alg)).update(this._opad).update(e).digest();
      }, t.exports = function (e, t) {
        return "rmd160" === (e = e.toLowerCase()) || "ripemd160" === e ? new h("rmd160", t) : "md5" === e ? new i(o, t) : new h(e, t);
      };
    }, {
      "./legacy": 55,
      "cipher-base": 49,
      "create-hash/md5": 53,
      inherits: 102,
      ripemd160: 148,
      "safe-buffer": 149,
      "sha.js": 151
    }],
    55: [function (e, t, r) {
      var n = e("inherits"),
          o = e("safe-buffer").Buffer,
          a = e("cipher-base"),
          s = o.alloc(128);

      function i(e, t) {
        a.call(this, "digest"), "string" == typeof t && (t = o.from(t)), this._alg = e, 64 < (this._key = t).length ? t = e(t) : t.length < 64 && (t = o.concat([t, s], 64));

        for (var r = this._ipad = o.allocUnsafe(64), n = this._opad = o.allocUnsafe(64), i = 0; i < 64; i++) {
          r[i] = 54 ^ t[i], n[i] = 92 ^ t[i];
        }

        this._hash = [r];
      }

      n(i, a), i.prototype._update = function (e) {
        this._hash.push(e);
      }, i.prototype._final = function () {
        var e = this._alg(o.concat(this._hash));

        return this._alg(o.concat([this._opad, e]));
      }, t.exports = i;
    }, {
      "cipher-base": 49,
      inherits: 102,
      "safe-buffer": 149
    }],
    56: [function (e, t, r) {
      r.randomBytes = r.rng = r.pseudoRandomBytes = r.prng = e("randombytes"), r.createHash = r.Hash = e("create-hash"), r.createHmac = r.Hmac = e("create-hmac");
      var n = e("browserify-sign/algos"),
          i = Object.keys(n),
          o = ["sha1", "sha224", "sha256", "sha384", "sha512", "md5", "rmd160"].concat(i);

      r.getHashes = function () {
        return o;
      };

      var a = e("pbkdf2");
      r.pbkdf2 = a.pbkdf2, r.pbkdf2Sync = a.pbkdf2Sync;
      var s = e("browserify-cipher");
      r.Cipher = s.Cipher, r.createCipher = s.createCipher, r.Cipheriv = s.Cipheriv, r.createCipheriv = s.createCipheriv, r.Decipher = s.Decipher, r.createDecipher = s.createDecipher, r.Decipheriv = s.Decipheriv, r.createDecipheriv = s.createDecipheriv, r.getCiphers = s.getCiphers, r.listCiphers = s.listCiphers;
      var u = e("diffie-hellman");
      r.DiffieHellmanGroup = u.DiffieHellmanGroup, r.createDiffieHellmanGroup = u.createDiffieHellmanGroup, r.getDiffieHellman = u.getDiffieHellman, r.createDiffieHellman = u.createDiffieHellman, r.DiffieHellman = u.DiffieHellman;
      var c = e("browserify-sign");
      r.createSign = c.createSign, r.Sign = c.Sign, r.createVerify = c.createVerify, r.Verify = c.Verify, r.createECDH = e("create-ecdh");
      var f = e("public-encrypt");
      r.publicEncrypt = f.publicEncrypt, r.privateEncrypt = f.privateEncrypt, r.publicDecrypt = f.publicDecrypt, r.privateDecrypt = f.privateDecrypt;
      var h = e("randomfill");
      r.randomFill = h.randomFill, r.randomFillSync = h.randomFillSync, r.createCredentials = function () {
        throw new Error(["sorry, createCredentials is not implemented yet", "we accept pull requests", "https://github.com/crypto-browserify/crypto-browserify"].join("\n"));
      }, r.constants = {
        DH_CHECK_P_NOT_SAFE_PRIME: 2,
        DH_CHECK_P_NOT_PRIME: 1,
        DH_UNABLE_TO_CHECK_GENERATOR: 4,
        DH_NOT_SUITABLE_GENERATOR: 8,
        NPN_ENABLED: 1,
        ALPN_ENABLED: 1,
        RSA_PKCS1_PADDING: 1,
        RSA_SSLV23_PADDING: 2,
        RSA_NO_PADDING: 3,
        RSA_PKCS1_OAEP_PADDING: 4,
        RSA_X931_PADDING: 5,
        RSA_PKCS1_PSS_PADDING: 6,
        POINT_CONVERSION_COMPRESSED: 2,
        POINT_CONVERSION_UNCOMPRESSED: 4,
        POINT_CONVERSION_HYBRID: 6
      };
    }, {
      "browserify-cipher": 35,
      "browserify-sign": 42,
      "browserify-sign/algos": 39,
      "create-ecdh": 51,
      "create-hash": 52,
      "create-hmac": 54,
      "diffie-hellman": 63,
      pbkdf2: 115,
      "public-encrypt": 122,
      randombytes: 132,
      randomfill: 133
    }],
    57: [function (e, t, r) {
      r.utils = e("./des/utils"), r.Cipher = e("./des/cipher"), r.DES = e("./des/des"), r.CBC = e("./des/cbc"), r.EDE = e("./des/ede");
    }, {
      "./des/cbc": 58,
      "./des/cipher": 59,
      "./des/des": 60,
      "./des/ede": 61,
      "./des/utils": 62
    }],
    58: [function (e, t, r) {
      var n = e("minimalistic-assert"),
          o = e("inherits"),
          a = {};

      function i(e) {
        n.equal(e.length, 8, "Invalid IV length"), this.iv = new Array(8);

        for (var t = 0; t < this.iv.length; t++) {
          this.iv[t] = e[t];
        }
      }

      r.instantiate = function (t) {
        function r(e) {
          t.call(this, e), this._cbcInit();
        }

        o(r, t);

        for (var e = Object.keys(a), n = 0; n < e.length; n++) {
          var i = e[n];
          r.prototype[i] = a[i];
        }

        return r.create = function (e) {
          return new r(e);
        }, r;
      }, a._cbcInit = function () {
        var e = new i(this.options.iv);
        this._cbcState = e;
      }, a._update = function (e, t, r, n) {
        var i = this._cbcState,
            o = this.constructor.super_.prototype,
            a = i.iv;

        if ("encrypt" === this.type) {
          for (var s = 0; s < this.blockSize; s++) {
            a[s] ^= e[t + s];
          }

          o._update.call(this, a, 0, r, n);

          for (s = 0; s < this.blockSize; s++) {
            a[s] = r[n + s];
          }
        } else {
          o._update.call(this, e, t, r, n);

          for (s = 0; s < this.blockSize; s++) {
            r[n + s] ^= a[s];
          }

          for (s = 0; s < this.blockSize; s++) {
            a[s] = e[t + s];
          }
        }
      };
    }, {
      inherits: 102,
      "minimalistic-assert": 107
    }],
    59: [function (e, t, r) {
      var n = e("minimalistic-assert");

      function i(e) {
        this.options = e, this.type = this.options.type, this.blockSize = 8, this._init(), this.buffer = new Array(this.blockSize), this.bufferOff = 0;
      }

      (t.exports = i).prototype._init = function () {}, i.prototype.update = function (e) {
        return 0 === e.length ? [] : "decrypt" === this.type ? this._updateDecrypt(e) : this._updateEncrypt(e);
      }, i.prototype._buffer = function (e, t) {
        for (var r = Math.min(this.buffer.length - this.bufferOff, e.length - t), n = 0; n < r; n++) {
          this.buffer[this.bufferOff + n] = e[t + n];
        }

        return this.bufferOff += r, r;
      }, i.prototype._flushBuffer = function (e, t) {
        return this._update(this.buffer, 0, e, t), this.bufferOff = 0, this.blockSize;
      }, i.prototype._updateEncrypt = function (e) {
        var t = 0,
            r = 0,
            n = (this.bufferOff + e.length) / this.blockSize | 0,
            i = new Array(n * this.blockSize);
        0 !== this.bufferOff && (t += this._buffer(e, t), this.bufferOff === this.buffer.length && (r += this._flushBuffer(i, r)));

        for (var o = e.length - (e.length - t) % this.blockSize; t < o; t += this.blockSize) {
          this._update(e, t, i, r), r += this.blockSize;
        }

        for (; t < e.length; t++, this.bufferOff++) {
          this.buffer[this.bufferOff] = e[t];
        }

        return i;
      }, i.prototype._updateDecrypt = function (e) {
        for (var t = 0, r = 0, n = Math.ceil((this.bufferOff + e.length) / this.blockSize) - 1, i = new Array(n * this.blockSize); 0 < n; n--) {
          t += this._buffer(e, t), r += this._flushBuffer(i, r);
        }

        return t += this._buffer(e, t), i;
      }, i.prototype["final"] = function (e) {
        var t, r;
        return e && (t = this.update(e)), r = "encrypt" === this.type ? this._finalEncrypt() : this._finalDecrypt(), t ? t.concat(r) : r;
      }, i.prototype._pad = function (e, t) {
        if (0 === t) return !1;

        for (; t < e.length;) {
          e[t++] = 0;
        }

        return !0;
      }, i.prototype._finalEncrypt = function () {
        if (!this._pad(this.buffer, this.bufferOff)) return [];
        var e = new Array(this.blockSize);
        return this._update(this.buffer, 0, e, 0), e;
      }, i.prototype._unpad = function (e) {
        return e;
      }, i.prototype._finalDecrypt = function () {
        n.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
        var e = new Array(this.blockSize);
        return this._flushBuffer(e, 0), this._unpad(e);
      };
    }, {
      "minimalistic-assert": 107
    }],
    60: [function (e, t, r) {
      var a = e("minimalistic-assert"),
          n = e("inherits"),
          i = e("../des"),
          d = i.utils,
          o = i.Cipher;

      function s() {
        this.tmp = new Array(2), this.keys = null;
      }

      function u(e) {
        o.call(this, e);
        var t = new s();
        this._desState = t, this.deriveKeys(t, e.key);
      }

      n(u, o), (t.exports = u).create = function (e) {
        return new u(e);
      };
      var c = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];
      u.prototype.deriveKeys = function (e, t) {
        e.keys = new Array(32), a.equal(t.length, this.blockSize, "Invalid key length");
        var r = d.readUInt32BE(t, 0),
            n = d.readUInt32BE(t, 4);
        d.pc1(r, n, e.tmp, 0), r = e.tmp[0], n = e.tmp[1];

        for (var i = 0; i < e.keys.length; i += 2) {
          var o = c[i >>> 1];
          r = d.r28shl(r, o), n = d.r28shl(n, o), d.pc2(r, n, e.keys, i);
        }
      }, u.prototype._update = function (e, t, r, n) {
        var i = this._desState,
            o = d.readUInt32BE(e, t),
            a = d.readUInt32BE(e, t + 4);
        d.ip(o, a, i.tmp, 0), o = i.tmp[0], a = i.tmp[1], "encrypt" === this.type ? this._encrypt(i, o, a, i.tmp, 0) : this._decrypt(i, o, a, i.tmp, 0), o = i.tmp[0], a = i.tmp[1], d.writeUInt32BE(r, o, n), d.writeUInt32BE(r, a, n + 4);
      }, u.prototype._pad = function (e, t) {
        for (var r = e.length - t, n = t; n < e.length; n++) {
          e[n] = r;
        }

        return !0;
      }, u.prototype._unpad = function (e) {
        for (var t = e[e.length - 1], r = e.length - t; r < e.length; r++) {
          a.equal(e[r], t);
        }

        return e.slice(0, e.length - t);
      }, u.prototype._encrypt = function (e, t, r, n, i) {
        for (var o = t, a = r, s = 0; s < e.keys.length; s += 2) {
          var u = e.keys[s],
              c = e.keys[s + 1];
          d.expand(a, e.tmp, 0), u ^= e.tmp[0], c ^= e.tmp[1];
          var f = d.substitute(u, c),
              h = a;
          a = (o ^ d.permute(f)) >>> 0, o = h;
        }

        d.rip(a, o, n, i);
      }, u.prototype._decrypt = function (e, t, r, n, i) {
        for (var o = r, a = t, s = e.keys.length - 2; 0 <= s; s -= 2) {
          var u = e.keys[s],
              c = e.keys[s + 1];
          d.expand(o, e.tmp, 0), u ^= e.tmp[0], c ^= e.tmp[1];
          var f = d.substitute(u, c),
              h = o;
          o = (a ^ d.permute(f)) >>> 0, a = h;
        }

        d.rip(o, a, n, i);
      };
    }, {
      "../des": 57,
      inherits: 102,
      "minimalistic-assert": 107
    }],
    61: [function (e, t, r) {
      var o = e("minimalistic-assert"),
          n = e("inherits"),
          i = e("../des"),
          a = i.Cipher,
          s = i.DES;

      function u(e, t) {
        o.equal(t.length, 24, "Invalid key length");
        var r = t.slice(0, 8),
            n = t.slice(8, 16),
            i = t.slice(16, 24);
        this.ciphers = "encrypt" === e ? [s.create({
          type: "encrypt",
          key: r
        }), s.create({
          type: "decrypt",
          key: n
        }), s.create({
          type: "encrypt",
          key: i
        })] : [s.create({
          type: "decrypt",
          key: i
        }), s.create({
          type: "encrypt",
          key: n
        }), s.create({
          type: "decrypt",
          key: r
        })];
      }

      function c(e) {
        a.call(this, e);
        var t = new u(this.type, this.options.key);
        this._edeState = t;
      }

      n(c, a), (t.exports = c).create = function (e) {
        return new c(e);
      }, c.prototype._update = function (e, t, r, n) {
        var i = this._edeState;
        i.ciphers[0]._update(e, t, r, n), i.ciphers[1]._update(r, n, r, n), i.ciphers[2]._update(r, n, r, n);
      }, c.prototype._pad = s.prototype._pad, c.prototype._unpad = s.prototype._unpad;
    }, {
      "../des": 57,
      inherits: 102,
      "minimalistic-assert": 107
    }],
    62: [function (e, t, r) {
      r.readUInt32BE = function (e, t) {
        return (e[0 + t] << 24 | e[1 + t] << 16 | e[2 + t] << 8 | e[3 + t]) >>> 0;
      }, r.writeUInt32BE = function (e, t, r) {
        e[0 + r] = t >>> 24, e[1 + r] = t >>> 16 & 255, e[2 + r] = t >>> 8 & 255, e[3 + r] = 255 & t;
      }, r.ip = function (e, t, r, n) {
        for (var i = 0, o = 0, a = 6; 0 <= a; a -= 2) {
          for (var s = 0; s <= 24; s += 8) {
            i <<= 1, i |= t >>> s + a & 1;
          }

          for (s = 0; s <= 24; s += 8) {
            i <<= 1, i |= e >>> s + a & 1;
          }
        }

        for (a = 6; 0 <= a; a -= 2) {
          for (s = 1; s <= 25; s += 8) {
            o <<= 1, o |= t >>> s + a & 1;
          }

          for (s = 1; s <= 25; s += 8) {
            o <<= 1, o |= e >>> s + a & 1;
          }
        }

        r[n + 0] = i >>> 0, r[n + 1] = o >>> 0;
      }, r.rip = function (e, t, r, n) {
        for (var i = 0, o = 0, a = 0; a < 4; a++) {
          for (var s = 24; 0 <= s; s -= 8) {
            i <<= 1, i |= t >>> s + a & 1, i <<= 1, i |= e >>> s + a & 1;
          }
        }

        for (a = 4; a < 8; a++) {
          for (s = 24; 0 <= s; s -= 8) {
            o <<= 1, o |= t >>> s + a & 1, o <<= 1, o |= e >>> s + a & 1;
          }
        }

        r[n + 0] = i >>> 0, r[n + 1] = o >>> 0;
      }, r.pc1 = function (e, t, r, n) {
        for (var i = 0, o = 0, a = 7; 5 <= a; a--) {
          for (var s = 0; s <= 24; s += 8) {
            i <<= 1, i |= t >> s + a & 1;
          }

          for (s = 0; s <= 24; s += 8) {
            i <<= 1, i |= e >> s + a & 1;
          }
        }

        for (s = 0; s <= 24; s += 8) {
          i <<= 1, i |= t >> s + a & 1;
        }

        for (a = 1; a <= 3; a++) {
          for (s = 0; s <= 24; s += 8) {
            o <<= 1, o |= t >> s + a & 1;
          }

          for (s = 0; s <= 24; s += 8) {
            o <<= 1, o |= e >> s + a & 1;
          }
        }

        for (s = 0; s <= 24; s += 8) {
          o <<= 1, o |= e >> s + a & 1;
        }

        r[n + 0] = i >>> 0, r[n + 1] = o >>> 0;
      }, r.r28shl = function (e, t) {
        return e << t & 268435455 | e >>> 28 - t;
      };
      var u = [14, 11, 17, 4, 27, 23, 25, 0, 13, 22, 7, 18, 5, 9, 16, 24, 2, 20, 12, 21, 1, 8, 15, 26, 15, 4, 25, 19, 9, 1, 26, 16, 5, 11, 23, 8, 12, 7, 17, 0, 22, 3, 10, 14, 6, 20, 27, 24];
      r.pc2 = function (e, t, r, n) {
        for (var i = 0, o = 0, a = u.length >>> 1, s = 0; s < a; s++) {
          i <<= 1, i |= e >>> u[s] & 1;
        }

        for (s = a; s < u.length; s++) {
          o <<= 1, o |= t >>> u[s] & 1;
        }

        r[n + 0] = i >>> 0, r[n + 1] = o >>> 0;
      }, r.expand = function (e, t, r) {
        var n = 0,
            i = 0;
        n = (1 & e) << 5 | e >>> 27;

        for (var o = 23; 15 <= o; o -= 4) {
          n <<= 6, n |= e >>> o & 63;
        }

        for (o = 11; 3 <= o; o -= 4) {
          i |= e >>> o & 63, i <<= 6;
        }

        i |= (31 & e) << 1 | e >>> 31, t[r + 0] = n >>> 0, t[r + 1] = i >>> 0;
      };
      var i = [14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11];

      r.substitute = function (e, t) {
        for (var r = 0, n = 0; n < 4; n++) {
          r <<= 4, r |= i[64 * n + (e >>> 18 - 6 * n & 63)];
        }

        for (n = 0; n < 4; n++) {
          r <<= 4, r |= i[256 + 64 * n + (t >>> 18 - 6 * n & 63)];
        }

        return r >>> 0;
      };

      var n = [16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7];
      r.permute = function (e) {
        for (var t = 0, r = 0; r < n.length; r++) {
          t <<= 1, t |= e >>> n[r] & 1;
        }

        return t >>> 0;
      }, r.padSplit = function (e, t, r) {
        for (var n = e.toString(2); n.length < t;) {
          n = "0" + n;
        }

        for (var i = [], o = 0; o < t; o += r) {
          i.push(n.slice(o, o + r));
        }

        return i.join(" ");
      };
    }, {}],
    63: [function (e, t, r) {
      (function (o) {
        var a = e("./lib/generatePrime"),
            n = e("./lib/primes.json"),
            s = e("./lib/dh");
        var u = {
          binary: !0,
          hex: !0,
          base64: !0
        };
        r.DiffieHellmanGroup = r.createDiffieHellmanGroup = r.getDiffieHellman = function (e) {
          var t = new o(n[e].prime, "hex"),
              r = new o(n[e].gen, "hex");
          return new s(t, r);
        }, r.createDiffieHellman = r.DiffieHellman = function e(t, r, n, i) {
          return o.isBuffer(r) || void 0 === u[r] ? e(t, "binary", r, n) : (r = r || "binary", i = i || "binary", n = n || new o([2]), o.isBuffer(n) || (n = new o(n, i)), "number" == typeof t ? new s(a(t, n), n, !0) : (o.isBuffer(t) || (t = new o(t, r)), new s(t, n, !0)));
        };
      }).call(this, e("buffer").Buffer);
    }, {
      "./lib/dh": 64,
      "./lib/generatePrime": 65,
      "./lib/primes.json": 66,
      buffer: 47
    }],
    64: [function (b, y, e) {
      (function (o) {
        var a = b("bn.js"),
            s = new (b("miller-rabin"))(),
            u = new a(24),
            c = new a(11),
            f = new a(10),
            h = new a(3),
            d = new a(7),
            l = b("./generatePrime"),
            e = b("randombytes");

        function n(e, t) {
          return t = t || "utf8", o.isBuffer(e) || (e = new o(e, t)), this._pub = new a(e), this;
        }

        function i(e, t) {
          return t = t || "utf8", o.isBuffer(e) || (e = new o(e, t)), this._priv = new a(e), this;
        }

        y.exports = t;
        var p = {};

        function t(e, t, r) {
          this.setGenerator(t), this.__prime = new a(e), this._prime = a.mont(this.__prime), this._primeLen = e.length, this._pub = void 0, this._priv = void 0, this._primeCode = void 0, r ? (this.setPublicKey = n, this.setPrivateKey = i) : this._primeCode = 8;
        }

        function r(e, t) {
          var r = new o(e.toArray());
          return t ? r.toString(t) : r;
        }

        Object.defineProperty(t.prototype, "verifyError", {
          enumerable: !0,
          get: function get() {
            return "number" != typeof this._primeCode && (this._primeCode = function (e, t) {
              var r = t.toString("hex"),
                  n = [r, e.toString(16)].join("_");
              if (n in p) return p[n];
              var i,
                  o = 0;
              if (e.isEven() || !l.simpleSieve || !l.fermatTest(e) || !s.test(e)) return o += 1, o += "02" === r || "05" === r ? 8 : 4, p[n] = o;

              switch (s.test(e.shrn(1)) || (o += 2), r) {
                case "02":
                  e.mod(u).cmp(c) && (o += 8);
                  break;

                case "05":
                  (i = e.mod(f)).cmp(h) && i.cmp(d) && (o += 8);
                  break;

                default:
                  o += 4;
              }

              return p[n] = o;
            }(this.__prime, this.__gen)), this._primeCode;
          }
        }), t.prototype.generateKeys = function () {
          return this._priv || (this._priv = new a(e(this._primeLen))), this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed(), this.getPublicKey();
        }, t.prototype.computeSecret = function (e) {
          var t = (e = (e = new a(e)).toRed(this._prime)).redPow(this._priv).fromRed(),
              r = new o(t.toArray()),
              n = this.getPrime();

          if (r.length < n.length) {
            var i = new o(n.length - r.length);
            i.fill(0), r = o.concat([i, r]);
          }

          return r;
        }, t.prototype.getPublicKey = function (e) {
          return r(this._pub, e);
        }, t.prototype.getPrivateKey = function (e) {
          return r(this._priv, e);
        }, t.prototype.getPrime = function (e) {
          return r(this.__prime, e);
        }, t.prototype.getGenerator = function (e) {
          return r(this._gen, e);
        }, t.prototype.setGenerator = function (e, t) {
          return t = t || "utf8", o.isBuffer(e) || (e = new o(e, t)), this.__gen = e, this._gen = new a(e), this;
        };
      }).call(this, b("buffer").Buffer);
    }, {
      "./generatePrime": 65,
      "bn.js": "BN",
      buffer: 47,
      "miller-rabin": 106,
      randombytes: 132
    }],
    65: [function (e, t, r) {
      var i = e("randombytes");
      (t.exports = n).simpleSieve = y, n.fermatTest = m;
      var o = e("bn.js"),
          a = new o(24),
          s = new (e("miller-rabin"))(),
          u = new o(1),
          c = new o(2),
          f = new o(5),
          h = (new o(16), new o(8), new o(10)),
          d = new o(3),
          l = (new o(7), new o(11)),
          p = new o(4),
          b = (new o(12), null);

      function y(e) {
        for (var t = function () {
          if (null !== b) return b;
          var e = [];
          e[0] = 2;

          for (var t = 1, r = 3; r < 1048576; r += 2) {
            for (var n = Math.ceil(Math.sqrt(r)), i = 0; i < t && e[i] <= n && r % e[i] != 0; i++) {
              ;
            }

            t !== i && e[i] <= n || (e[t++] = r);
          }

          return b = e;
        }(), r = 0; r < t.length; r++) {
          if (0 === e.modn(t[r])) return 0 === e.cmpn(t[r]);
        }

        return !0;
      }

      function m(e) {
        var t = o.mont(e);
        return 0 === c.toRed(t).redPow(e.subn(1)).fromRed().cmpn(1);
      }

      function n(e, t) {
        if (e < 16) return new o(2 === t || 5 === t ? [140, 123] : [140, 39]);
        var r, n;

        for (t = new o(t);;) {
          for (r = new o(i(Math.ceil(e / 8))); r.bitLength() > e;) {
            r.ishrn(1);
          }

          if (r.isEven() && r.iadd(u), r.testn(1) || r.iadd(c), t.cmp(c)) {
            if (!t.cmp(f)) for (; r.mod(h).cmp(d);) {
              r.iadd(p);
            }
          } else for (; r.mod(a).cmp(l);) {
            r.iadd(p);
          }

          if (y(n = r.shrn(1)) && y(r) && m(n) && m(r) && s.test(n) && s.test(r)) return r;
        }
      }
    }, {
      "bn.js": "BN",
      "miller-rabin": 106,
      randombytes: 132
    }],
    66: [function (e, t, r) {
      t.exports = {
        modp1: {
          gen: "02",
          prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
        },
        modp2: {
          gen: "02",
          prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
        },
        modp5: {
          gen: "02",
          prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
        },
        modp14: {
          gen: "02",
          prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
        },
        modp15: {
          gen: "02",
          prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
        },
        modp16: {
          gen: "02",
          prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
        },
        modp17: {
          gen: "02",
          prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
        },
        modp18: {
          gen: "02",
          prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
        }
      };
    }, {}],
    67: [function (e, t, r) {
      var n = r;
      n.version = e("../package.json").version, n.utils = e("./elliptic/utils"), n.rand = e("brorand"), n.curve = e("./elliptic/curve"), n.curves = e("./elliptic/curves"), n.ec = e("./elliptic/ec"), n.eddsa = e("./elliptic/eddsa");
    }, {
      "../package.json": 82,
      "./elliptic/curve": 70,
      "./elliptic/curves": 73,
      "./elliptic/ec": 74,
      "./elliptic/eddsa": 77,
      "./elliptic/utils": 81,
      brorand: 16
    }],
    68: [function (e, t, r) {
      var n = e("bn.js"),
          i = e("../../elliptic").utils,
          k = i.getNAF,
          E = i.getJSF,
          h = i.assert;

      function o(e, t) {
        this.type = e, this.p = new n(t.p, 16), this.red = t.prime ? n.red(t.prime) : n.mont(this.p), this.zero = new n(0).toRed(this.red), this.one = new n(1).toRed(this.red), this.two = new n(2).toRed(this.red), this.n = t.n && new n(t.n, 16), this.g = t.g && this.pointFromJSON(t.g, t.gRed), this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4);
        var r = this.n && this.p.div(this.n);
        !r || 0 < r.cmpn(100) ? this.redN = null : (this._maxwellTrick = !0, this.redN = this.n.toRed(this.red));
      }

      function a(e, t) {
        this.curve = e, this.type = t, this.precomputed = null;
      }

      (t.exports = o).prototype.point = function () {
        throw new Error("Not implemented");
      }, o.prototype.validate = function () {
        throw new Error("Not implemented");
      }, o.prototype._fixedNafMul = function (e, t) {
        h(e.precomputed);

        var r = e._getDoubles(),
            n = k(t, 1),
            i = (1 << r.step + 1) - (r.step % 2 == 0 ? 2 : 1);

        i /= 3;

        for (var o = [], a = 0; a < n.length; a += r.step) {
          var s = 0;

          for (t = a + r.step - 1; a <= t; t--) {
            s = (s << 1) + n[t];
          }

          o.push(s);
        }

        for (var u = this.jpoint(null, null, null), c = this.jpoint(null, null, null), f = i; 0 < f; f--) {
          for (a = 0; a < o.length; a++) {
            (s = o[a]) === f ? c = c.mixedAdd(r.points[a]) : s === -f && (c = c.mixedAdd(r.points[a].neg()));
          }

          u = u.add(c);
        }

        return u.toP();
      }, o.prototype._wnafMul = function (e, t) {
        var r = 4,
            n = e._getNAFPoints(r);

        r = n.wnd;

        for (var i = n.points, o = k(t, r), a = this.jpoint(null, null, null), s = o.length - 1; 0 <= s; s--) {
          for (t = 0; 0 <= s && 0 === o[s]; s--) {
            t++;
          }

          if (0 <= s && t++, a = a.dblp(t), s < 0) break;
          var u = o[s];
          h(0 !== u), a = "affine" === e.type ? 0 < u ? a.mixedAdd(i[u - 1 >> 1]) : a.mixedAdd(i[-u - 1 >> 1].neg()) : 0 < u ? a.add(i[u - 1 >> 1]) : a.add(i[-u - 1 >> 1].neg());
        }

        return "affine" === e.type ? a.toP() : a;
      }, o.prototype._wnafMulAdd = function (e, t, r, n, i) {
        for (var o = this._wnafT1, a = this._wnafT2, s = this._wnafT3, u = 0, c = 0; c < n; c++) {
          var f = (x = t[c])._getNAFPoints(e);

          o[c] = f.wnd, a[c] = f.points;
        }

        for (c = n - 1; 1 <= c; c -= 2) {
          var h = c - 1,
              d = c;

          if (1 === o[h] && 1 === o[d]) {
            var l = [t[h], null, null, t[d]];
            0 === t[h].y.cmp(t[d].y) ? (l[1] = t[h].add(t[d]), l[2] = t[h].toJ().mixedAdd(t[d].neg())) : 0 === t[h].y.cmp(t[d].y.redNeg()) ? (l[1] = t[h].toJ().mixedAdd(t[d]), l[2] = t[h].add(t[d].neg())) : (l[1] = t[h].toJ().mixedAdd(t[d]), l[2] = t[h].toJ().mixedAdd(t[d].neg()));
            var p = [-3, -1, -5, -7, 0, 7, 5, 1, 3],
                b = E(r[h], r[d]);
            u = Math.max(b[0].length, u), s[h] = new Array(u), s[d] = new Array(u);

            for (var y = 0; y < u; y++) {
              var m = 0 | b[0][y],
                  v = 0 | b[1][y];
              s[h][y] = p[3 * (m + 1) + (v + 1)], s[d][y] = 0, a[h] = l;
            }
          } else s[h] = k(r[h], o[h]), s[d] = k(r[d], o[d]), u = Math.max(s[h].length, u), u = Math.max(s[d].length, u);
        }

        var g = this.jpoint(null, null, null),
            w = this._wnafT4;

        for (c = u; 0 <= c; c--) {
          for (var _ = 0; 0 <= c;) {
            var A = !0;

            for (y = 0; y < n; y++) {
              w[y] = 0 | s[y][c], 0 !== w[y] && (A = !1);
            }

            if (!A) break;
            _++, c--;
          }

          if (0 <= c && _++, g = g.dblp(_), c < 0) break;

          for (y = 0; y < n; y++) {
            var x,
                M = w[y];
            0 !== M && (0 < M ? x = a[y][M - 1 >> 1] : M < 0 && (x = a[y][-M - 1 >> 1].neg()), g = "affine" === x.type ? g.mixedAdd(x) : g.add(x));
          }
        }

        for (c = 0; c < n; c++) {
          a[c] = null;
        }

        return i ? g : g.toP();
      }, (o.BasePoint = a).prototype.eq = function () {
        throw new Error("Not implemented");
      }, a.prototype.validate = function () {
        return this.curve.validate(this);
      }, o.prototype.decodePoint = function (e, t) {
        e = i.toArray(e, t);
        var r = this.p.byteLength();
        if ((4 === e[0] || 6 === e[0] || 7 === e[0]) && e.length - 1 == 2 * r) return 6 === e[0] ? h(e[e.length - 1] % 2 == 0) : 7 === e[0] && h(e[e.length - 1] % 2 == 1), this.point(e.slice(1, 1 + r), e.slice(1 + r, 1 + 2 * r));
        if ((2 === e[0] || 3 === e[0]) && e.length - 1 === r) return this.pointFromX(e.slice(1, 1 + r), 3 === e[0]);
        throw new Error("Unknown point format");
      }, a.prototype.encodeCompressed = function (e) {
        return this.encode(e, !0);
      }, a.prototype._encode = function (e) {
        var t = this.curve.p.byteLength(),
            r = this.getX().toArray("be", t);
        return e ? [this.getY().isEven() ? 2 : 3].concat(r) : [4].concat(r, this.getY().toArray("be", t));
      }, a.prototype.encode = function (e, t) {
        return i.encode(this._encode(t), e);
      }, a.prototype.precompute = function (e) {
        if (this.precomputed) return this;
        var t = {
          doubles: null,
          naf: null,
          beta: null
        };
        return t.naf = this._getNAFPoints(8), t.doubles = this._getDoubles(4, e), t.beta = this._getBeta(), this.precomputed = t, this;
      }, a.prototype._hasDoubles = function (e) {
        if (!this.precomputed) return !1;
        var t = this.precomputed.doubles;
        return !!t && t.points.length >= Math.ceil((e.bitLength() + 1) / t.step);
      }, a.prototype._getDoubles = function (e, t) {
        if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;

        for (var r = [this], n = this, i = 0; i < t; i += e) {
          for (var o = 0; o < e; o++) {
            n = n.dbl();
          }

          r.push(n);
        }

        return {
          step: e,
          points: r
        };
      }, a.prototype._getNAFPoints = function (e) {
        if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;

        for (var t = [this], r = (1 << e) - 1, n = 1 === r ? null : this.dbl(), i = 1; i < r; i++) {
          t[i] = t[i - 1].add(n);
        }

        return {
          wnd: e,
          points: t
        };
      }, a.prototype._getBeta = function () {
        return null;
      }, a.prototype.dblp = function (e) {
        for (var t = this, r = 0; r < e; r++) {
          t = t.dbl();
        }

        return t;
      };
    }, {
      "../../elliptic": 67,
      "bn.js": "BN"
    }],
    69: [function (e, t, r) {
      var n = e("../curve"),
          i = e("../../elliptic"),
          u = e("bn.js"),
          o = e("inherits"),
          a = n.base,
          s = i.utils.assert;

      function c(e) {
        this.twisted = 1 != (0 | e.a), this.mOneA = this.twisted && -1 == (0 | e.a), this.extended = this.mOneA, a.call(this, "edwards", e), this.a = new u(e.a, 16).umod(this.red.m), this.a = this.a.toRed(this.red), this.c = new u(e.c, 16).toRed(this.red), this.c2 = this.c.redSqr(), this.d = new u(e.d, 16).toRed(this.red), this.dd = this.d.redAdd(this.d), s(!this.twisted || 0 === this.c.fromRed().cmpn(1)), this.oneC = 1 == (0 | e.c);
      }

      function f(e, t, r, n, i) {
        a.BasePoint.call(this, e, "projective"), null === t && null === r && null === n ? (this.x = this.curve.zero, this.y = this.curve.one, this.z = this.curve.one, this.t = this.curve.zero, this.zOne = !0) : (this.x = new u(t, 16), this.y = new u(r, 16), this.z = n ? new u(n, 16) : this.curve.one, this.t = i && new u(i, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.t && !this.t.red && (this.t = this.t.toRed(this.curve.red)), this.zOne = this.z === this.curve.one, this.curve.extended && !this.t && (this.t = this.x.redMul(this.y), this.zOne || (this.t = this.t.redMul(this.z.redInvm()))));
      }

      o(c, a), (t.exports = c).prototype._mulA = function (e) {
        return this.mOneA ? e.redNeg() : this.a.redMul(e);
      }, c.prototype._mulC = function (e) {
        return this.oneC ? e : this.c.redMul(e);
      }, c.prototype.jpoint = function (e, t, r, n) {
        return this.point(e, t, r, n);
      }, c.prototype.pointFromX = function (e, t) {
        (e = new u(e, 16)).red || (e = e.toRed(this.red));
        var r = e.redSqr(),
            n = this.c2.redSub(this.a.redMul(r)),
            i = this.one.redSub(this.c2.redMul(this.d).redMul(r)),
            o = n.redMul(i.redInvm()),
            a = o.redSqrt();
        if (0 !== a.redSqr().redSub(o).cmp(this.zero)) throw new Error("invalid point");
        var s = a.fromRed().isOdd();
        return (t && !s || !t && s) && (a = a.redNeg()), this.point(e, a);
      }, c.prototype.pointFromY = function (e, t) {
        (e = new u(e, 16)).red || (e = e.toRed(this.red));
        var r = e.redSqr(),
            n = r.redSub(this.one),
            i = r.redMul(this.d).redAdd(this.one),
            o = n.redMul(i.redInvm());

        if (0 === o.cmp(this.zero)) {
          if (t) throw new Error("invalid point");
          return this.point(this.zero, e);
        }

        var a = o.redSqrt();
        if (0 !== a.redSqr().redSub(o).cmp(this.zero)) throw new Error("invalid point");
        return a.isOdd() !== t && (a = a.redNeg()), this.point(a, e);
      }, c.prototype.validate = function (e) {
        if (e.isInfinity()) return !0;
        e.normalize();
        var t = e.x.redSqr(),
            r = e.y.redSqr(),
            n = t.redMul(this.a).redAdd(r),
            i = this.c2.redMul(this.one.redAdd(this.d.redMul(t).redMul(r)));
        return 0 === n.cmp(i);
      }, o(f, a.BasePoint), c.prototype.pointFromJSON = function (e) {
        return f.fromJSON(this, e);
      }, c.prototype.point = function (e, t, r, n) {
        return new f(this, e, t, r, n);
      }, f.fromJSON = function (e, t) {
        return new f(e, t[0], t[1], t[2]);
      }, f.prototype.inspect = function () {
        return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
      }, f.prototype.isInfinity = function () {
        return 0 === this.x.cmpn(0) && 0 === this.y.cmp(this.z);
      }, f.prototype._extDbl = function () {
        var e = this.x.redSqr(),
            t = this.y.redSqr(),
            r = this.z.redSqr();
        r = r.redIAdd(r);

        var n = this.curve._mulA(e),
            i = this.x.redAdd(this.y).redSqr().redISub(e).redISub(t),
            o = n.redAdd(t),
            a = o.redSub(r),
            s = n.redSub(t),
            u = i.redMul(a),
            c = o.redMul(s),
            f = i.redMul(s),
            h = a.redMul(o);

        return this.curve.point(u, c, h, f);
      }, f.prototype._projDbl = function () {
        var e,
            t,
            r,
            n = this.x.redAdd(this.y).redSqr(),
            i = this.x.redSqr(),
            o = this.y.redSqr();

        if (this.curve.twisted) {
          var a = (c = this.curve._mulA(i)).redAdd(o);

          if (this.zOne) e = n.redSub(i).redSub(o).redMul(a.redSub(this.curve.two)), t = a.redMul(c.redSub(o)), r = a.redSqr().redSub(a).redSub(a);else {
            var s = this.z.redSqr(),
                u = a.redSub(s).redISub(s);
            e = n.redSub(i).redISub(o).redMul(u), t = a.redMul(c.redSub(o)), r = a.redMul(u);
          }
        } else {
          var c = i.redAdd(o);
          s = this.curve._mulC(this.c.redMul(this.z)).redSqr(), u = c.redSub(s).redSub(s);
          e = this.curve._mulC(n.redISub(c)).redMul(u), t = this.curve._mulC(c).redMul(i.redISub(o)), r = c.redMul(u);
        }

        return this.curve.point(e, t, r);
      }, f.prototype.dbl = function () {
        return this.isInfinity() ? this : this.curve.extended ? this._extDbl() : this._projDbl();
      }, f.prototype._extAdd = function (e) {
        var t = this.y.redSub(this.x).redMul(e.y.redSub(e.x)),
            r = this.y.redAdd(this.x).redMul(e.y.redAdd(e.x)),
            n = this.t.redMul(this.curve.dd).redMul(e.t),
            i = this.z.redMul(e.z.redAdd(e.z)),
            o = r.redSub(t),
            a = i.redSub(n),
            s = i.redAdd(n),
            u = r.redAdd(t),
            c = o.redMul(a),
            f = s.redMul(u),
            h = o.redMul(u),
            d = a.redMul(s);
        return this.curve.point(c, f, d, h);
      }, f.prototype._projAdd = function (e) {
        var t,
            r,
            n = this.z.redMul(e.z),
            i = n.redSqr(),
            o = this.x.redMul(e.x),
            a = this.y.redMul(e.y),
            s = this.curve.d.redMul(o).redMul(a),
            u = i.redSub(s),
            c = i.redAdd(s),
            f = this.x.redAdd(this.y).redMul(e.x.redAdd(e.y)).redISub(o).redISub(a),
            h = n.redMul(u).redMul(f);
        return this.curve.twisted ? (t = n.redMul(c).redMul(a.redSub(this.curve._mulA(o))), r = u.redMul(c)) : (t = n.redMul(c).redMul(a.redSub(o)), r = this.curve._mulC(u).redMul(c)), this.curve.point(h, t, r);
      }, f.prototype.add = function (e) {
        return this.isInfinity() ? e : e.isInfinity() ? this : this.curve.extended ? this._extAdd(e) : this._projAdd(e);
      }, f.prototype.mul = function (e) {
        return this._hasDoubles(e) ? this.curve._fixedNafMul(this, e) : this.curve._wnafMul(this, e);
      }, f.prototype.mulAdd = function (e, t, r) {
        return this.curve._wnafMulAdd(1, [this, t], [e, r], 2, !1);
      }, f.prototype.jmulAdd = function (e, t, r) {
        return this.curve._wnafMulAdd(1, [this, t], [e, r], 2, !0);
      }, f.prototype.normalize = function () {
        if (this.zOne) return this;
        var e = this.z.redInvm();
        return this.x = this.x.redMul(e), this.y = this.y.redMul(e), this.t && (this.t = this.t.redMul(e)), this.z = this.curve.one, this.zOne = !0, this;
      }, f.prototype.neg = function () {
        return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
      }, f.prototype.getX = function () {
        return this.normalize(), this.x.fromRed();
      }, f.prototype.getY = function () {
        return this.normalize(), this.y.fromRed();
      }, f.prototype.eq = function (e) {
        return this === e || 0 === this.getX().cmp(e.getX()) && 0 === this.getY().cmp(e.getY());
      }, f.prototype.eqXToP = function (e) {
        var t = e.toRed(this.curve.red).redMul(this.z);
        if (0 === this.x.cmp(t)) return !0;

        for (var r = e.clone(), n = this.curve.redN.redMul(this.z);;) {
          if (r.iadd(this.curve.n), 0 <= r.cmp(this.curve.p)) return !1;
          if (t.redIAdd(n), 0 === this.x.cmp(t)) return !0;
        }

        return !1;
      }, f.prototype.toP = f.prototype.normalize, f.prototype.mixedAdd = f.prototype.add;
    }, {
      "../../elliptic": 67,
      "../curve": 70,
      "bn.js": "BN",
      inherits: 102
    }],
    70: [function (e, t, r) {
      var n = r;
      n.base = e("./base"), n["short"] = e("./short"), n.mont = e("./mont"), n.edwards = e("./edwards");
    }, {
      "./base": 68,
      "./edwards": 69,
      "./mont": 71,
      "./short": 72
    }],
    71: [function (e, t, r) {
      var n = e("../curve"),
          i = e("bn.js"),
          o = e("inherits"),
          a = n.base,
          s = e("../../elliptic").utils;

      function u(e) {
        a.call(this, "mont", e), this.a = new i(e.a, 16).toRed(this.red), this.b = new i(e.b, 16).toRed(this.red), this.i4 = new i(4).toRed(this.red).redInvm(), this.two = new i(2).toRed(this.red), this.a24 = this.i4.redMul(this.a.redAdd(this.two));
      }

      function c(e, t, r) {
        a.BasePoint.call(this, e, "projective"), null === t && null === r ? (this.x = this.curve.one, this.z = this.curve.zero) : (this.x = new i(t, 16), this.z = new i(r, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)));
      }

      o(u, a), (t.exports = u).prototype.validate = function (e) {
        var t = e.normalize().x,
            r = t.redSqr(),
            n = r.redMul(t).redAdd(r.redMul(this.a)).redAdd(t);
        return 0 === n.redSqrt().redSqr().cmp(n);
      }, o(c, a.BasePoint), u.prototype.decodePoint = function (e, t) {
        return this.point(s.toArray(e, t), 1);
      }, u.prototype.point = function (e, t) {
        return new c(this, e, t);
      }, u.prototype.pointFromJSON = function (e) {
        return c.fromJSON(this, e);
      }, c.prototype.precompute = function () {}, c.prototype._encode = function () {
        return this.getX().toArray("be", this.curve.p.byteLength());
      }, c.fromJSON = function (e, t) {
        return new c(e, t[0], t[1] || e.one);
      }, c.prototype.inspect = function () {
        return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
      }, c.prototype.isInfinity = function () {
        return 0 === this.z.cmpn(0);
      }, c.prototype.dbl = function () {
        var e = this.x.redAdd(this.z).redSqr(),
            t = this.x.redSub(this.z).redSqr(),
            r = e.redSub(t),
            n = e.redMul(t),
            i = r.redMul(t.redAdd(this.curve.a24.redMul(r)));
        return this.curve.point(n, i);
      }, c.prototype.add = function () {
        throw new Error("Not supported on Montgomery curve");
      }, c.prototype.diffAdd = function (e, t) {
        var r = this.x.redAdd(this.z),
            n = this.x.redSub(this.z),
            i = e.x.redAdd(e.z),
            o = e.x.redSub(e.z).redMul(r),
            a = i.redMul(n),
            s = t.z.redMul(o.redAdd(a).redSqr()),
            u = t.x.redMul(o.redISub(a).redSqr());
        return this.curve.point(s, u);
      }, c.prototype.mul = function (e) {
        for (var t = e.clone(), r = this, n = this.curve.point(null, null), i = []; 0 !== t.cmpn(0); t.iushrn(1)) {
          i.push(t.andln(1));
        }

        for (var o = i.length - 1; 0 <= o; o--) {
          0 === i[o] ? (r = r.diffAdd(n, this), n = n.dbl()) : (n = r.diffAdd(n, this), r = r.dbl());
        }

        return n;
      }, c.prototype.mulAdd = function () {
        throw new Error("Not supported on Montgomery curve");
      }, c.prototype.jumlAdd = function () {
        throw new Error("Not supported on Montgomery curve");
      }, c.prototype.eq = function (e) {
        return 0 === this.getX().cmp(e.getX());
      }, c.prototype.normalize = function () {
        return this.x = this.x.redMul(this.z.redInvm()), this.z = this.curve.one, this;
      }, c.prototype.getX = function () {
        return this.normalize(), this.x.fromRed();
      };
    }, {
      "../../elliptic": 67,
      "../curve": 70,
      "bn.js": "BN",
      inherits: 102
    }],
    72: [function (e, t, r) {
      var n = e("../curve"),
          i = e("../../elliptic"),
          _ = e("bn.js"),
          o = e("inherits"),
          a = n.base,
          s = i.utils.assert;

      function u(e) {
        a.call(this, "short", e), this.a = new _(e.a, 16).toRed(this.red), this.b = new _(e.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = 0 === this.a.fromRed().cmpn(0), this.threeA = 0 === this.a.fromRed().sub(this.p).cmpn(-3), this.endo = this._getEndomorphism(e), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
      }

      function c(e, t, r, n) {
        a.BasePoint.call(this, e, "affine"), null === t && null === r ? (this.x = null, this.y = null, this.inf = !0) : (this.x = new _(t, 16), this.y = new _(r, 16), n && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = !1);
      }

      function f(e, t, r, n) {
        a.BasePoint.call(this, e, "jacobian"), null === t && null === r && null === n ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new _(0)) : (this.x = new _(t, 16), this.y = new _(r, 16), this.z = new _(n, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
      }

      o(u, a), (t.exports = u).prototype._getEndomorphism = function (e) {
        if (this.zeroA && this.g && this.n && 1 === this.p.modn(3)) {
          var t, r;
          if (e.beta) t = new _(e.beta, 16).toRed(this.red);else {
            var n = this._getEndoRoots(this.p);

            t = (t = n[0].cmp(n[1]) < 0 ? n[0] : n[1]).toRed(this.red);
          }
          if (e.lambda) r = new _(e.lambda, 16);else {
            var i = this._getEndoRoots(this.n);

            0 === this.g.mul(i[0]).x.cmp(this.g.x.redMul(t)) ? r = i[0] : (r = i[1], s(0 === this.g.mul(r).x.cmp(this.g.x.redMul(t))));
          }
          return {
            beta: t,
            lambda: r,
            basis: e.basis ? e.basis.map(function (e) {
              return {
                a: new _(e.a, 16),
                b: new _(e.b, 16)
              };
            }) : this._getEndoBasis(r)
          };
        }
      }, u.prototype._getEndoRoots = function (e) {
        var t = e === this.p ? this.red : _.mont(e),
            r = new _(2).toRed(t).redInvm(),
            n = r.redNeg(),
            i = new _(3).toRed(t).redNeg().redSqrt().redMul(r);
        return [n.redAdd(i).fromRed(), n.redSub(i).fromRed()];
      }, u.prototype._getEndoBasis = function (e) {
        for (var t, r, n, i, o, a, s, u, c, f = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), h = e, d = this.n.clone(), l = new _(1), p = new _(0), b = new _(0), y = new _(1), m = 0; 0 !== h.cmpn(0);) {
          var v = d.div(h);
          u = d.sub(v.mul(h)), c = b.sub(v.mul(l));
          var g = y.sub(v.mul(p));
          if (!n && u.cmp(f) < 0) t = s.neg(), r = l, n = u.neg(), i = c;else if (n && 2 == ++m) break;
          d = h, h = s = u, b = l, l = c, y = p, p = g;
        }

        o = u.neg(), a = c;
        var w = n.sqr().add(i.sqr());
        return 0 <= o.sqr().add(a.sqr()).cmp(w) && (o = t, a = r), n.negative && (n = n.neg(), i = i.neg()), o.negative && (o = o.neg(), a = a.neg()), [{
          a: n,
          b: i
        }, {
          a: o,
          b: a
        }];
      }, u.prototype._endoSplit = function (e) {
        var t = this.endo.basis,
            r = t[0],
            n = t[1],
            i = n.b.mul(e).divRound(this.n),
            o = r.b.neg().mul(e).divRound(this.n),
            a = i.mul(r.a),
            s = o.mul(n.a),
            u = i.mul(r.b),
            c = o.mul(n.b);
        return {
          k1: e.sub(a).sub(s),
          k2: u.add(c).neg()
        };
      }, u.prototype.pointFromX = function (e, t) {
        (e = new _(e, 16)).red || (e = e.toRed(this.red));
        var r = e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b),
            n = r.redSqrt();
        if (0 !== n.redSqr().redSub(r).cmp(this.zero)) throw new Error("invalid point");
        var i = n.fromRed().isOdd();
        return (t && !i || !t && i) && (n = n.redNeg()), this.point(e, n);
      }, u.prototype.validate = function (e) {
        if (e.inf) return !0;
        var t = e.x,
            r = e.y,
            n = this.a.redMul(t),
            i = t.redSqr().redMul(t).redIAdd(n).redIAdd(this.b);
        return 0 === r.redSqr().redISub(i).cmpn(0);
      }, u.prototype._endoWnafMulAdd = function (e, t, r) {
        for (var n = this._endoWnafT1, i = this._endoWnafT2, o = 0; o < e.length; o++) {
          var a = this._endoSplit(t[o]),
              s = e[o],
              u = s._getBeta();

          a.k1.negative && (a.k1.ineg(), s = s.neg(!0)), a.k2.negative && (a.k2.ineg(), u = u.neg(!0)), n[2 * o] = s, n[2 * o + 1] = u, i[2 * o] = a.k1, i[2 * o + 1] = a.k2;
        }

        for (var c = this._wnafMulAdd(1, n, i, 2 * o, r), f = 0; f < 2 * o; f++) {
          n[f] = null, i[f] = null;
        }

        return c;
      }, o(c, a.BasePoint), u.prototype.point = function (e, t, r) {
        return new c(this, e, t, r);
      }, u.prototype.pointFromJSON = function (e, t) {
        return c.fromJSON(this, e, t);
      }, c.prototype._getBeta = function () {
        if (this.curve.endo) {
          var e = this.precomputed;
          if (e && e.beta) return e.beta;
          var t = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);

          if (e) {
            var r = this.curve,
                n = function n(e) {
              return r.point(e.x.redMul(r.endo.beta), e.y);
            };

            (e.beta = t).precomputed = {
              beta: null,
              naf: e.naf && {
                wnd: e.naf.wnd,
                points: e.naf.points.map(n)
              },
              doubles: e.doubles && {
                step: e.doubles.step,
                points: e.doubles.points.map(n)
              }
            };
          }

          return t;
        }
      }, c.prototype.toJSON = function () {
        return this.precomputed ? [this.x, this.y, this.precomputed && {
          doubles: this.precomputed.doubles && {
            step: this.precomputed.doubles.step,
            points: this.precomputed.doubles.points.slice(1)
          },
          naf: this.precomputed.naf && {
            wnd: this.precomputed.naf.wnd,
            points: this.precomputed.naf.points.slice(1)
          }
        }] : [this.x, this.y];
      }, c.fromJSON = function (t, e, r) {
        "string" == typeof e && (e = JSON.parse(e));
        var n = t.point(e[0], e[1], r);
        if (!e[2]) return n;

        function i(e) {
          return t.point(e[0], e[1], r);
        }

        var o = e[2];
        return n.precomputed = {
          beta: null,
          doubles: o.doubles && {
            step: o.doubles.step,
            points: [n].concat(o.doubles.points.map(i))
          },
          naf: o.naf && {
            wnd: o.naf.wnd,
            points: [n].concat(o.naf.points.map(i))
          }
        }, n;
      }, c.prototype.inspect = function () {
        return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
      }, c.prototype.isInfinity = function () {
        return this.inf;
      }, c.prototype.add = function (e) {
        if (this.inf) return e;
        if (e.inf) return this;
        if (this.eq(e)) return this.dbl();
        if (this.neg().eq(e)) return this.curve.point(null, null);
        if (0 === this.x.cmp(e.x)) return this.curve.point(null, null);
        var t = this.y.redSub(e.y);
        0 !== t.cmpn(0) && (t = t.redMul(this.x.redSub(e.x).redInvm()));
        var r = t.redSqr().redISub(this.x).redISub(e.x),
            n = t.redMul(this.x.redSub(r)).redISub(this.y);
        return this.curve.point(r, n);
      }, c.prototype.dbl = function () {
        if (this.inf) return this;
        var e = this.y.redAdd(this.y);
        if (0 === e.cmpn(0)) return this.curve.point(null, null);
        var t = this.curve.a,
            r = this.x.redSqr(),
            n = e.redInvm(),
            i = r.redAdd(r).redIAdd(r).redIAdd(t).redMul(n),
            o = i.redSqr().redISub(this.x.redAdd(this.x)),
            a = i.redMul(this.x.redSub(o)).redISub(this.y);
        return this.curve.point(o, a);
      }, c.prototype.getX = function () {
        return this.x.fromRed();
      }, c.prototype.getY = function () {
        return this.y.fromRed();
      }, c.prototype.mul = function (e) {
        return e = new _(e, 16), this._hasDoubles(e) ? this.curve._fixedNafMul(this, e) : this.curve.endo ? this.curve._endoWnafMulAdd([this], [e]) : this.curve._wnafMul(this, e);
      }, c.prototype.mulAdd = function (e, t, r) {
        var n = [this, t],
            i = [e, r];
        return this.curve.endo ? this.curve._endoWnafMulAdd(n, i) : this.curve._wnafMulAdd(1, n, i, 2);
      }, c.prototype.jmulAdd = function (e, t, r) {
        var n = [this, t],
            i = [e, r];
        return this.curve.endo ? this.curve._endoWnafMulAdd(n, i, !0) : this.curve._wnafMulAdd(1, n, i, 2, !0);
      }, c.prototype.eq = function (e) {
        return this === e || this.inf === e.inf && (this.inf || 0 === this.x.cmp(e.x) && 0 === this.y.cmp(e.y));
      }, c.prototype.neg = function (e) {
        if (this.inf) return this;
        var t = this.curve.point(this.x, this.y.redNeg());

        if (e && this.precomputed) {
          var r = this.precomputed,
              n = function n(e) {
            return e.neg();
          };

          t.precomputed = {
            naf: r.naf && {
              wnd: r.naf.wnd,
              points: r.naf.points.map(n)
            },
            doubles: r.doubles && {
              step: r.doubles.step,
              points: r.doubles.points.map(n)
            }
          };
        }

        return t;
      }, c.prototype.toJ = function () {
        return this.inf ? this.curve.jpoint(null, null, null) : this.curve.jpoint(this.x, this.y, this.curve.one);
      }, o(f, a.BasePoint), u.prototype.jpoint = function (e, t, r) {
        return new f(this, e, t, r);
      }, f.prototype.toP = function () {
        if (this.isInfinity()) return this.curve.point(null, null);
        var e = this.z.redInvm(),
            t = e.redSqr(),
            r = this.x.redMul(t),
            n = this.y.redMul(t).redMul(e);
        return this.curve.point(r, n);
      }, f.prototype.neg = function () {
        return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
      }, f.prototype.add = function (e) {
        if (this.isInfinity()) return e;
        if (e.isInfinity()) return this;
        var t = e.z.redSqr(),
            r = this.z.redSqr(),
            n = this.x.redMul(t),
            i = e.x.redMul(r),
            o = this.y.redMul(t.redMul(e.z)),
            a = e.y.redMul(r.redMul(this.z)),
            s = n.redSub(i),
            u = o.redSub(a);
        if (0 === s.cmpn(0)) return 0 !== u.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
        var c = s.redSqr(),
            f = c.redMul(s),
            h = n.redMul(c),
            d = u.redSqr().redIAdd(f).redISub(h).redISub(h),
            l = u.redMul(h.redISub(d)).redISub(o.redMul(f)),
            p = this.z.redMul(e.z).redMul(s);
        return this.curve.jpoint(d, l, p);
      }, f.prototype.mixedAdd = function (e) {
        if (this.isInfinity()) return e.toJ();
        if (e.isInfinity()) return this;
        var t = this.z.redSqr(),
            r = this.x,
            n = e.x.redMul(t),
            i = this.y,
            o = e.y.redMul(t).redMul(this.z),
            a = r.redSub(n),
            s = i.redSub(o);
        if (0 === a.cmpn(0)) return 0 !== s.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
        var u = a.redSqr(),
            c = u.redMul(a),
            f = r.redMul(u),
            h = s.redSqr().redIAdd(c).redISub(f).redISub(f),
            d = s.redMul(f.redISub(h)).redISub(i.redMul(c)),
            l = this.z.redMul(a);
        return this.curve.jpoint(h, d, l);
      }, f.prototype.dblp = function (e) {
        if (0 === e) return this;
        if (this.isInfinity()) return this;
        if (!e) return this.dbl();

        if (this.curve.zeroA || this.curve.threeA) {
          for (var t = this, r = 0; r < e; r++) {
            t = t.dbl();
          }

          return t;
        }

        var n = this.curve.a,
            i = this.curve.tinv,
            o = this.x,
            a = this.y,
            s = this.z,
            u = s.redSqr().redSqr(),
            c = a.redAdd(a);

        for (r = 0; r < e; r++) {
          var f = o.redSqr(),
              h = c.redSqr(),
              d = h.redSqr(),
              l = f.redAdd(f).redIAdd(f).redIAdd(n.redMul(u)),
              p = o.redMul(h),
              b = l.redSqr().redISub(p.redAdd(p)),
              y = p.redISub(b),
              m = l.redMul(y);
          m = m.redIAdd(m).redISub(d);
          var v = c.redMul(s);
          r + 1 < e && (u = u.redMul(d)), o = b, s = v, c = m;
        }

        return this.curve.jpoint(o, c.redMul(i), s);
      }, f.prototype.dbl = function () {
        return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
      }, f.prototype._zeroDbl = function () {
        var e, t, r;

        if (this.zOne) {
          var n = this.x.redSqr(),
              i = this.y.redSqr(),
              o = i.redSqr(),
              a = this.x.redAdd(i).redSqr().redISub(n).redISub(o);
          a = a.redIAdd(a);
          var s = n.redAdd(n).redIAdd(n),
              u = s.redSqr().redISub(a).redISub(a),
              c = o.redIAdd(o);
          c = (c = c.redIAdd(c)).redIAdd(c), e = u, t = s.redMul(a.redISub(u)).redISub(c), r = this.y.redAdd(this.y);
        } else {
          var f = this.x.redSqr(),
              h = this.y.redSqr(),
              d = h.redSqr(),
              l = this.x.redAdd(h).redSqr().redISub(f).redISub(d);
          l = l.redIAdd(l);
          var p = f.redAdd(f).redIAdd(f),
              b = p.redSqr(),
              y = d.redIAdd(d);
          y = (y = y.redIAdd(y)).redIAdd(y), e = b.redISub(l).redISub(l), t = p.redMul(l.redISub(e)).redISub(y), r = (r = this.y.redMul(this.z)).redIAdd(r);
        }

        return this.curve.jpoint(e, t, r);
      }, f.prototype._threeDbl = function () {
        var e, t, r;

        if (this.zOne) {
          var n = this.x.redSqr(),
              i = this.y.redSqr(),
              o = i.redSqr(),
              a = this.x.redAdd(i).redSqr().redISub(n).redISub(o);
          a = a.redIAdd(a);
          var s = n.redAdd(n).redIAdd(n).redIAdd(this.curve.a),
              u = s.redSqr().redISub(a).redISub(a);
          e = u;
          var c = o.redIAdd(o);
          c = (c = c.redIAdd(c)).redIAdd(c), t = s.redMul(a.redISub(u)).redISub(c), r = this.y.redAdd(this.y);
        } else {
          var f = this.z.redSqr(),
              h = this.y.redSqr(),
              d = this.x.redMul(h),
              l = this.x.redSub(f).redMul(this.x.redAdd(f));
          l = l.redAdd(l).redIAdd(l);
          var p = d.redIAdd(d),
              b = (p = p.redIAdd(p)).redAdd(p);
          e = l.redSqr().redISub(b), r = this.y.redAdd(this.z).redSqr().redISub(h).redISub(f);
          var y = h.redSqr();
          y = (y = (y = y.redIAdd(y)).redIAdd(y)).redIAdd(y), t = l.redMul(p.redISub(e)).redISub(y);
        }

        return this.curve.jpoint(e, t, r);
      }, f.prototype._dbl = function () {
        var e = this.curve.a,
            t = this.x,
            r = this.y,
            n = this.z,
            i = n.redSqr().redSqr(),
            o = t.redSqr(),
            a = r.redSqr(),
            s = o.redAdd(o).redIAdd(o).redIAdd(e.redMul(i)),
            u = t.redAdd(t),
            c = (u = u.redIAdd(u)).redMul(a),
            f = s.redSqr().redISub(c.redAdd(c)),
            h = c.redISub(f),
            d = a.redSqr();
        d = (d = (d = d.redIAdd(d)).redIAdd(d)).redIAdd(d);
        var l = s.redMul(h).redISub(d),
            p = r.redAdd(r).redMul(n);
        return this.curve.jpoint(f, l, p);
      }, f.prototype.trpl = function () {
        if (!this.curve.zeroA) return this.dbl().add(this);
        var e = this.x.redSqr(),
            t = this.y.redSqr(),
            r = this.z.redSqr(),
            n = t.redSqr(),
            i = e.redAdd(e).redIAdd(e),
            o = i.redSqr(),
            a = this.x.redAdd(t).redSqr().redISub(e).redISub(n),
            s = (a = (a = (a = a.redIAdd(a)).redAdd(a).redIAdd(a)).redISub(o)).redSqr(),
            u = n.redIAdd(n);
        u = (u = (u = u.redIAdd(u)).redIAdd(u)).redIAdd(u);
        var c = i.redIAdd(a).redSqr().redISub(o).redISub(s).redISub(u),
            f = t.redMul(c);
        f = (f = f.redIAdd(f)).redIAdd(f);
        var h = this.x.redMul(s).redISub(f);
        h = (h = h.redIAdd(h)).redIAdd(h);
        var d = this.y.redMul(c.redMul(u.redISub(c)).redISub(a.redMul(s)));
        d = (d = (d = d.redIAdd(d)).redIAdd(d)).redIAdd(d);
        var l = this.z.redAdd(a).redSqr().redISub(r).redISub(s);
        return this.curve.jpoint(h, d, l);
      }, f.prototype.mul = function (e, t) {
        return e = new _(e, t), this.curve._wnafMul(this, e);
      }, f.prototype.eq = function (e) {
        if ("affine" === e.type) return this.eq(e.toJ());
        if (this === e) return !0;
        var t = this.z.redSqr(),
            r = e.z.redSqr();
        if (0 !== this.x.redMul(r).redISub(e.x.redMul(t)).cmpn(0)) return !1;
        var n = t.redMul(this.z),
            i = r.redMul(e.z);
        return 0 === this.y.redMul(i).redISub(e.y.redMul(n)).cmpn(0);
      }, f.prototype.eqXToP = function (e) {
        var t = this.z.redSqr(),
            r = e.toRed(this.curve.red).redMul(t);
        if (0 === this.x.cmp(r)) return !0;

        for (var n = e.clone(), i = this.curve.redN.redMul(t);;) {
          if (n.iadd(this.curve.n), 0 <= n.cmp(this.curve.p)) return !1;
          if (r.redIAdd(i), 0 === this.x.cmp(r)) return !0;
        }

        return !1;
      }, f.prototype.inspect = function () {
        return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
      }, f.prototype.isInfinity = function () {
        return 0 === this.z.cmpn(0);
      };
    }, {
      "../../elliptic": 67,
      "../curve": 70,
      "bn.js": "BN",
      inherits: 102
    }],
    73: [function (e, t, r) {
      var n,
          i = r,
          o = e("hash.js"),
          a = e("../elliptic"),
          s = a.utils.assert;

      function u(e) {
        "short" === e.type ? this.curve = new a.curve["short"](e) : "edwards" === e.type ? this.curve = new a.curve.edwards(e) : this.curve = new a.curve.mont(e), this.g = this.curve.g, this.n = this.curve.n, this.hash = e.hash, s(this.g.validate(), "Invalid curve"), s(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
      }

      function c(t, r) {
        Object.defineProperty(i, t, {
          configurable: !0,
          enumerable: !0,
          get: function get() {
            var e = new u(r);
            return Object.defineProperty(i, t, {
              configurable: !0,
              enumerable: !0,
              value: e
            }), e;
          }
        });
      }

      i.PresetCurve = u, c("p192", {
        type: "short",
        prime: "p192",
        p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
        b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
        n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
        hash: o.sha256,
        gRed: !1,
        g: ["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]
      }), c("p224", {
        type: "short",
        prime: "p224",
        p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
        b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
        n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
        hash: o.sha256,
        gRed: !1,
        g: ["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]
      }), c("p256", {
        type: "short",
        prime: null,
        p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
        a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
        b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
        n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
        hash: o.sha256,
        gRed: !1,
        g: ["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296", "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]
      }), c("p384", {
        type: "short",
        prime: null,
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
        a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
        b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
        n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
        hash: o.sha384,
        gRed: !1,
        g: ["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]
      }), c("p521", {
        type: "short",
        prime: null,
        p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
        a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
        b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
        n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
        hash: o.sha512,
        gRed: !1,
        g: ["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]
      }), c("curve25519", {
        type: "mont",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "76d06",
        b: "1",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: o.sha256,
        gRed: !1,
        g: ["9"]
      }), c("ed25519", {
        type: "edwards",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "-1",
        c: "1",
        d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: o.sha256,
        gRed: !1,
        g: ["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a", "6666666666666666666666666666666666666666666666666666666666666658"]
      });

      try {
        n = e("./precomputed/secp256k1");
      } catch (e) {
        n = void 0;
      }

      c("secp256k1", {
        type: "short",
        prime: "k256",
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
        a: "0",
        b: "7",
        n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
        h: "1",
        hash: o.sha256,
        beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
        lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
        basis: [{
          a: "3086d221a7d46bcde86c90e49284eb15",
          b: "-e4437ed6010e88286f547fa90abfe4c3"
        }, {
          a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
          b: "3086d221a7d46bcde86c90e49284eb15"
        }],
        gRed: !1,
        g: ["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", n]
      });
    }, {
      "../elliptic": 67,
      "./precomputed/secp256k1": 80,
      "hash.js": 86
    }],
    74: [function (e, t, r) {
      var y = e("bn.js"),
          m = e("hmac-drbg"),
          o = e("../../elliptic"),
          l = o.utils.assert,
          n = e("./key"),
          v = e("./signature");

      function i(e) {
        if (!(this instanceof i)) return new i(e);
        "string" == typeof e && (l(o.curves.hasOwnProperty(e), "Unknown curve " + e), e = o.curves[e]), e instanceof o.curves.PresetCurve && (e = {
          curve: e
        }), this.curve = e.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = e.curve.g, this.g.precompute(e.curve.n.bitLength() + 1), this.hash = e.hash || e.curve.hash;
      }

      (t.exports = i).prototype.keyPair = function (e) {
        return new n(this, e);
      }, i.prototype.keyFromPrivate = function (e, t) {
        return n.fromPrivate(this, e, t);
      }, i.prototype.keyFromPublic = function (e, t) {
        return n.fromPublic(this, e, t);
      }, i.prototype.genKeyPair = function (e) {
        e || (e = {});

        for (var t = new m({
          hash: this.hash,
          pers: e.pers,
          persEnc: e.persEnc || "utf8",
          entropy: e.entropy || o.rand(this.hash.hmacStrength),
          entropyEnc: e.entropy && e.entropyEnc || "utf8",
          nonce: this.n.toArray()
        }), r = this.n.byteLength(), n = this.n.sub(new y(2));;) {
          var i = new y(t.generate(r));
          if (!(0 < i.cmp(n))) return i.iaddn(1), this.keyFromPrivate(i);
        }
      }, i.prototype._truncateToN = function (e, t) {
        var r = 8 * e.byteLength() - this.n.bitLength();
        return 0 < r && (e = e.ushrn(r)), !t && 0 <= e.cmp(this.n) ? e.sub(this.n) : e;
      }, i.prototype.sign = function (e, t, r, n) {
        "object" === (void 0 === r ? "undefined" : _typeof(r)) && (n = r, r = null), n || (n = {}), t = this.keyFromPrivate(t, r), e = this._truncateToN(new y(e, 16));

        for (var i = this.n.byteLength(), o = t.getPrivate().toArray("be", i), a = e.toArray("be", i), s = new m({
          hash: this.hash,
          entropy: o,
          nonce: a,
          pers: n.pers,
          persEnc: n.persEnc || "utf8"
        }), u = this.n.sub(new y(1)), c = 0;; c++) {
          var f = n.k ? n.k(c) : new y(s.generate(this.n.byteLength()));

          if (!((f = this._truncateToN(f, !0)).cmpn(1) <= 0 || 0 <= f.cmp(u))) {
            var h = this.g.mul(f);

            if (!h.isInfinity()) {
              var d = h.getX(),
                  l = d.umod(this.n);

              if (0 !== l.cmpn(0)) {
                var p = f.invm(this.n).mul(l.mul(t.getPrivate()).iadd(e));

                if (0 !== (p = p.umod(this.n)).cmpn(0)) {
                  var b = (h.getY().isOdd() ? 1 : 0) | (0 !== d.cmp(l) ? 2 : 0);
                  return n.canonical && 0 < p.cmp(this.nh) && (p = this.n.sub(p), b ^= 1), new v({
                    r: l,
                    s: p,
                    recoveryParam: b
                  });
                }
              }
            }
          }
        }
      }, i.prototype.verify = function (e, t, r, n) {
        e = this._truncateToN(new y(e, 16)), r = this.keyFromPublic(r, n);
        var i = (t = new v(t, "hex")).r,
            o = t.s;
        if (i.cmpn(1) < 0 || 0 <= i.cmp(this.n)) return !1;
        if (o.cmpn(1) < 0 || 0 <= o.cmp(this.n)) return !1;
        var a,
            s = o.invm(this.n),
            u = s.mul(e).umod(this.n),
            c = s.mul(i).umod(this.n);
        return this.curve._maxwellTrick ? !(a = this.g.jmulAdd(u, r.getPublic(), c)).isInfinity() && a.eqXToP(i) : !(a = this.g.mulAdd(u, r.getPublic(), c)).isInfinity() && 0 === a.getX().umod(this.n).cmp(i);
      }, i.prototype.recoverPubKey = function (e, t, r, n) {
        l((3 & r) === r, "The recovery param is more than two bits"), t = new v(t, n);
        var i = this.n,
            o = new y(e),
            a = t.r,
            s = t.s,
            u = 1 & r,
            c = r >> 1;
        if (0 <= a.cmp(this.curve.p.umod(this.curve.n)) && c) throw new Error("Unable to find sencond key candinate");
        a = c ? this.curve.pointFromX(a.add(this.curve.n), u) : this.curve.pointFromX(a, u);
        var f = t.r.invm(i),
            h = i.sub(o).mul(f).umod(i),
            d = s.mul(f).umod(i);
        return this.g.mulAdd(h, a, d);
      }, i.prototype.getKeyRecoveryParam = function (e, t, r, n) {
        if (null !== (t = new v(t, n)).recoveryParam) return t.recoveryParam;

        for (var i = 0; i < 4; i++) {
          var o;

          try {
            o = this.recoverPubKey(e, t, i);
          } catch (e) {
            continue;
          }

          if (o.eq(r)) return i;
        }

        throw new Error("Unable to find valid recovery factor");
      };
    }, {
      "../../elliptic": 67,
      "./key": 75,
      "./signature": 76,
      "bn.js": "BN",
      "hmac-drbg": 98
    }],
    75: [function (e, t, r) {
      var n = e("bn.js"),
          i = e("../../elliptic").utils.assert;

      function o(e, t) {
        this.ec = e, this.priv = null, this.pub = null, t.priv && this._importPrivate(t.priv, t.privEnc), t.pub && this._importPublic(t.pub, t.pubEnc);
      }

      (t.exports = o).fromPublic = function (e, t, r) {
        return t instanceof o ? t : new o(e, {
          pub: t,
          pubEnc: r
        });
      }, o.fromPrivate = function (e, t, r) {
        return t instanceof o ? t : new o(e, {
          priv: t,
          privEnc: r
        });
      }, o.prototype.validate = function () {
        var e = this.getPublic();
        return e.isInfinity() ? {
          result: !1,
          reason: "Invalid public key"
        } : e.validate() ? e.mul(this.ec.curve.n).isInfinity() ? {
          result: !0,
          reason: null
        } : {
          result: !1,
          reason: "Public key * N != O"
        } : {
          result: !1,
          reason: "Public key is not a point"
        };
      }, o.prototype.getPublic = function (e, t) {
        return "string" == typeof e && (t = e, e = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), t ? this.pub.encode(t, e) : this.pub;
      }, o.prototype.getPrivate = function (e) {
        return "hex" === e ? this.priv.toString(16, 2) : this.priv;
      }, o.prototype._importPrivate = function (e, t) {
        this.priv = new n(e, t || 16), this.priv = this.priv.umod(this.ec.curve.n);
      }, o.prototype._importPublic = function (e, t) {
        if (e.x || e.y) return "mont" === this.ec.curve.type ? i(e.x, "Need x coordinate") : "short" !== this.ec.curve.type && "edwards" !== this.ec.curve.type || i(e.x && e.y, "Need both x and y coordinate"), void (this.pub = this.ec.curve.point(e.x, e.y));
        this.pub = this.ec.curve.decodePoint(e, t);
      }, o.prototype.derive = function (e) {
        return e.mul(this.priv).getX();
      }, o.prototype.sign = function (e, t, r) {
        return this.ec.sign(e, this, t, r);
      }, o.prototype.verify = function (e, t) {
        return this.ec.verify(e, t, this);
      }, o.prototype.inspect = function () {
        return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
      };
    }, {
      "../../elliptic": 67,
      "bn.js": "BN"
    }],
    76: [function (e, t, r) {
      var s = e("bn.js"),
          u = e("../../elliptic").utils,
          n = u.assert;

      function i(e, t) {
        if (e instanceof i) return e;
        this._importDER(e, t) || (n(e.r && e.s, "Signature without r or s"), this.r = new s(e.r, 16), this.s = new s(e.s, 16), void 0 === e.recoveryParam ? this.recoveryParam = null : this.recoveryParam = e.recoveryParam);
      }

      function c() {
        this.place = 0;
      }

      function f(e, t) {
        var r = e[t.place++];
        if (!(128 & r)) return r;

        for (var n = 15 & r, i = 0, o = 0, a = t.place; o < n; o++, a++) {
          i <<= 8, i |= e[a];
        }

        return t.place = a, i;
      }

      function a(e) {
        for (var t = 0, r = e.length - 1; !e[t] && !(128 & e[t + 1]) && t < r;) {
          t++;
        }

        return 0 === t ? e : e.slice(t);
      }

      function h(e, t) {
        if (t < 128) e.push(t);else {
          var r = 1 + (Math.log(t) / Math.LN2 >>> 3);

          for (e.push(128 | r); --r;) {
            e.push(t >>> (r << 3) & 255);
          }

          e.push(t);
        }
      }

      (t.exports = i).prototype._importDER = function (e, t) {
        e = u.toArray(e, t);
        var r = new c();
        if (48 !== e[r.place++]) return !1;
        if (f(e, r) + r.place !== e.length) return !1;
        if (2 !== e[r.place++]) return !1;
        var n = f(e, r),
            i = e.slice(r.place, n + r.place);
        if (r.place += n, 2 !== e[r.place++]) return !1;
        var o = f(e, r);
        if (e.length !== o + r.place) return !1;
        var a = e.slice(r.place, o + r.place);
        return 0 === i[0] && 128 & i[1] && (i = i.slice(1)), 0 === a[0] && 128 & a[1] && (a = a.slice(1)), this.r = new s(i), this.s = new s(a), !(this.recoveryParam = null);
      }, i.prototype.toDER = function (e) {
        var t = this.r.toArray(),
            r = this.s.toArray();

        for (128 & t[0] && (t = [0].concat(t)), 128 & r[0] && (r = [0].concat(r)), t = a(t), r = a(r); !(r[0] || 128 & r[1]);) {
          r = r.slice(1);
        }

        var n = [2];
        h(n, t.length), (n = n.concat(t)).push(2), h(n, r.length);
        var i = n.concat(r),
            o = [48];
        return h(o, i.length), o = o.concat(i), u.encode(o, e);
      };
    }, {
      "../../elliptic": 67,
      "bn.js": "BN"
    }],
    77: [function (e, t, r) {
      var n = e("hash.js"),
          i = e("../../elliptic"),
          o = i.utils,
          a = o.assert,
          u = o.parseBytes,
          s = e("./key"),
          c = e("./signature");

      function f(e) {
        if (a("ed25519" === e, "only tested with ed25519 so far"), !(this instanceof f)) return new f(e);
        e = i.curves[e].curve;
        this.curve = e, this.g = e.g, this.g.precompute(e.n.bitLength() + 1), this.pointClass = e.point().constructor, this.encodingLength = Math.ceil(e.n.bitLength() / 8), this.hash = n.sha512;
      }

      (t.exports = f).prototype.sign = function (e, t) {
        e = u(e);
        var r = this.keyFromSecret(t),
            n = this.hashInt(r.messagePrefix(), e),
            i = this.g.mul(n),
            o = this.encodePoint(i),
            a = this.hashInt(o, r.pubBytes(), e).mul(r.priv()),
            s = n.add(a).umod(this.curve.n);
        return this.makeSignature({
          R: i,
          S: s,
          Rencoded: o
        });
      }, f.prototype.verify = function (e, t, r) {
        e = u(e), t = this.makeSignature(t);
        var n = this.keyFromPublic(r),
            i = this.hashInt(t.Rencoded(), n.pubBytes(), e),
            o = this.g.mul(t.S());
        return t.R().add(n.pub().mul(i)).eq(o);
      }, f.prototype.hashInt = function () {
        for (var e = this.hash(), t = 0; t < arguments.length; t++) {
          e.update(arguments[t]);
        }

        return o.intFromLE(e.digest()).umod(this.curve.n);
      }, f.prototype.keyFromPublic = function (e) {
        return s.fromPublic(this, e);
      }, f.prototype.keyFromSecret = function (e) {
        return s.fromSecret(this, e);
      }, f.prototype.makeSignature = function (e) {
        return e instanceof c ? e : new c(this, e);
      }, f.prototype.encodePoint = function (e) {
        var t = e.getY().toArray("le", this.encodingLength);
        return t[this.encodingLength - 1] |= e.getX().isOdd() ? 128 : 0, t;
      }, f.prototype.decodePoint = function (e) {
        var t = (e = o.parseBytes(e)).length - 1,
            r = e.slice(0, t).concat(-129 & e[t]),
            n = 0 != (128 & e[t]),
            i = o.intFromLE(r);
        return this.curve.pointFromY(i, n);
      }, f.prototype.encodeInt = function (e) {
        return e.toArray("le", this.encodingLength);
      }, f.prototype.decodeInt = function (e) {
        return o.intFromLE(e);
      }, f.prototype.isPoint = function (e) {
        return e instanceof this.pointClass;
      };
    }, {
      "../../elliptic": 67,
      "./key": 78,
      "./signature": 79,
      "hash.js": 86
    }],
    78: [function (e, t, r) {
      var n = e("../../elliptic").utils,
          i = n.assert,
          o = n.parseBytes,
          a = n.cachedProperty;

      function s(e, t) {
        this.eddsa = e, this._secret = o(t.secret), e.isPoint(t.pub) ? this._pub = t.pub : this._pubBytes = o(t.pub);
      }

      s.fromPublic = function (e, t) {
        return t instanceof s ? t : new s(e, {
          pub: t
        });
      }, s.fromSecret = function (e, t) {
        return t instanceof s ? t : new s(e, {
          secret: t
        });
      }, s.prototype.secret = function () {
        return this._secret;
      }, a(s, "pubBytes", function () {
        return this.eddsa.encodePoint(this.pub());
      }), a(s, "pub", function () {
        return this._pubBytes ? this.eddsa.decodePoint(this._pubBytes) : this.eddsa.g.mul(this.priv());
      }), a(s, "privBytes", function () {
        var e = this.eddsa,
            t = this.hash(),
            r = e.encodingLength - 1,
            n = t.slice(0, e.encodingLength);
        return n[0] &= 248, n[r] &= 127, n[r] |= 64, n;
      }), a(s, "priv", function () {
        return this.eddsa.decodeInt(this.privBytes());
      }), a(s, "hash", function () {
        return this.eddsa.hash().update(this.secret()).digest();
      }), a(s, "messagePrefix", function () {
        return this.hash().slice(this.eddsa.encodingLength);
      }), s.prototype.sign = function (e) {
        return i(this._secret, "KeyPair can only verify"), this.eddsa.sign(e, this);
      }, s.prototype.verify = function (e, t) {
        return this.eddsa.verify(e, t, this);
      }, s.prototype.getSecret = function (e) {
        return i(this._secret, "KeyPair is public only"), n.encode(this.secret(), e);
      }, s.prototype.getPublic = function (e) {
        return n.encode(this.pubBytes(), e);
      }, t.exports = s;
    }, {
      "../../elliptic": 67
    }],
    79: [function (e, t, r) {
      var n = e("bn.js"),
          i = e("../../elliptic").utils,
          o = i.assert,
          a = i.cachedProperty,
          s = i.parseBytes;

      function u(e, t) {
        this.eddsa = e, "object" !== (void 0 === t ? "undefined" : _typeof(t)) && (t = s(t)), Array.isArray(t) && (t = {
          R: t.slice(0, e.encodingLength),
          S: t.slice(e.encodingLength)
        }), o(t.R && t.S, "Signature without R or S"), e.isPoint(t.R) && (this._R = t.R), t.S instanceof n && (this._S = t.S), this._Rencoded = Array.isArray(t.R) ? t.R : t.Rencoded, this._Sencoded = Array.isArray(t.S) ? t.S : t.Sencoded;
      }

      a(u, "S", function () {
        return this.eddsa.decodeInt(this.Sencoded());
      }), a(u, "R", function () {
        return this.eddsa.decodePoint(this.Rencoded());
      }), a(u, "Rencoded", function () {
        return this.eddsa.encodePoint(this.R());
      }), a(u, "Sencoded", function () {
        return this.eddsa.encodeInt(this.S());
      }), u.prototype.toBytes = function () {
        return this.Rencoded().concat(this.Sencoded());
      }, u.prototype.toHex = function () {
        return i.encode(this.toBytes(), "hex").toUpperCase();
      }, t.exports = u;
    }, {
      "../../elliptic": 67,
      "bn.js": "BN"
    }],
    80: [function (e, t, r) {
      t.exports = {
        doubles: {
          step: 4,
          points: [["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a", "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"], ["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508", "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"], ["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739", "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"], ["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640", "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"], ["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c", "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"], ["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda", "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"], ["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa", "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"], ["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0", "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"], ["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d", "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"], ["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d", "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"], ["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1", "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"], ["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0", "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"], ["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047", "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"], ["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862", "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"], ["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7", "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"], ["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd", "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"], ["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83", "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"], ["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a", "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"], ["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8", "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"], ["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d", "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"], ["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725", "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"], ["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754", "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"], ["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c", "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"], ["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6", "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"], ["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39", "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"], ["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891", "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"], ["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b", "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"], ["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03", "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"], ["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d", "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"], ["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070", "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"], ["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4", "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"], ["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da", "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"], ["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11", "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"], ["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e", "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"], ["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41", "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"], ["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef", "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"], ["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8", "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"], ["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d", "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"], ["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96", "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"], ["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd", "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"], ["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5", "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"], ["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266", "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"], ["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71", "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"], ["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac", "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"], ["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751", "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"], ["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e", "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"], ["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241", "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"], ["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3", "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"], ["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f", "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"], ["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19", "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"], ["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be", "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"], ["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9", "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"], ["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2", "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"], ["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13", "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"], ["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c", "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"], ["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba", "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"], ["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151", "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"], ["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073", "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"], ["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458", "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"], ["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b", "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"], ["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366", "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"], ["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa", "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"], ["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0", "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"], ["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787", "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"], ["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e", "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]]
        },
        naf: {
          wnd: 7,
          points: [["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9", "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"], ["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4", "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"], ["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc", "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"], ["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe", "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"], ["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb", "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"], ["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8", "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"], ["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e", "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"], ["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34", "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"], ["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c", "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"], ["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5", "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"], ["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f", "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"], ["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714", "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"], ["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729", "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"], ["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db", "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"], ["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4", "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"], ["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5", "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"], ["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479", "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"], ["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d", "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"], ["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f", "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"], ["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb", "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"], ["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9", "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"], ["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963", "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"], ["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74", "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"], ["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530", "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"], ["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b", "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"], ["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247", "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"], ["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1", "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"], ["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120", "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"], ["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435", "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"], ["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18", "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"], ["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8", "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"], ["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb", "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"], ["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f", "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"], ["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143", "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"], ["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba", "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"], ["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45", "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"], ["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a", "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"], ["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e", "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"], ["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8", "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"], ["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c", "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"], ["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519", "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"], ["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab", "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"], ["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca", "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"], ["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf", "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"], ["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610", "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"], ["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4", "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"], ["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c", "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"], ["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940", "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"], ["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980", "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"], ["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3", "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"], ["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf", "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"], ["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63", "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"], ["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448", "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"], ["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf", "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"], ["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5", "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"], ["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6", "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"], ["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5", "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"], ["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99", "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"], ["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51", "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"], ["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5", "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"], ["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5", "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"], ["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997", "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"], ["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881", "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"], ["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5", "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"], ["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66", "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"], ["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726", "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"], ["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede", "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"], ["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94", "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"], ["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31", "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"], ["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51", "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"], ["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252", "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"], ["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5", "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"], ["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b", "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"], ["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4", "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"], ["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f", "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"], ["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889", "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"], ["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246", "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"], ["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984", "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"], ["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a", "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"], ["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030", "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"], ["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197", "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"], ["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593", "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"], ["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef", "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"], ["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38", "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"], ["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a", "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"], ["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111", "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"], ["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502", "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"], ["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea", "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"], ["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26", "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"], ["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986", "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"], ["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e", "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"], ["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4", "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"], ["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda", "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"], ["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859", "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"], ["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f", "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"], ["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c", "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"], ["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942", "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"], ["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a", "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"], ["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80", "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"], ["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d", "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"], ["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1", "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"], ["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63", "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"], ["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352", "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"], ["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193", "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"], ["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00", "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"], ["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58", "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"], ["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7", "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"], ["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8", "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"], ["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e", "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"], ["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d", "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"], ["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b", "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"], ["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f", "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"], ["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6", "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"], ["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297", "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"], ["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a", "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"], ["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c", "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"], ["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52", "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"], ["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb", "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"], ["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065", "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"], ["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917", "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"], ["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9", "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"], ["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3", "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"], ["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57", "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"], ["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66", "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"], ["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8", "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"], ["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721", "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"], ["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180", "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]]
        }
      };
    }, {}],
    81: [function (e, t, r) {
      var n = r,
          i = e("bn.js"),
          o = e("minimalistic-assert"),
          a = e("minimalistic-crypto-utils");
      n.assert = o, n.toArray = a.toArray, n.zero2 = a.zero2, n.toHex = a.toHex, n.encode = a.encode, n.getNAF = function (e, t) {
        for (var r = [], n = 1 << t + 1, i = e.clone(); 0 <= i.cmpn(1);) {
          var o;

          if (i.isOdd()) {
            var a = i.andln(n - 1);
            o = (n >> 1) - 1 < a ? (n >> 1) - a : a, i.isubn(o);
          } else o = 0;

          r.push(o);

          for (var s = 0 !== i.cmpn(0) && 0 === i.andln(n - 1) ? t + 1 : 1, u = 1; u < s; u++) {
            r.push(0);
          }

          i.iushrn(s);
        }

        return r;
      }, n.getJSF = function (e, t) {
        var r = [[], []];
        e = e.clone(), t = t.clone();

        for (var n = 0, i = 0; 0 < e.cmpn(-n) || 0 < t.cmpn(-i);) {
          var o,
              a,
              s,
              u = e.andln(3) + n & 3,
              c = t.andln(3) + i & 3;
          3 === u && (u = -1), 3 === c && (c = -1), o = 0 == (1 & u) ? 0 : 3 != (s = e.andln(7) + n & 7) && 5 !== s || 2 !== c ? u : -u, r[0].push(o), a = 0 == (1 & c) ? 0 : 3 != (s = t.andln(7) + i & 7) && 5 !== s || 2 !== u ? c : -c, r[1].push(a), 2 * n === o + 1 && (n = 1 - n), 2 * i === a + 1 && (i = 1 - i), e.iushrn(1), t.iushrn(1);
        }

        return r;
      }, n.cachedProperty = function (e, t, r) {
        var n = "_" + t;

        e.prototype[t] = function () {
          return void 0 !== this[n] ? this[n] : this[n] = r.call(this);
        };
      }, n.parseBytes = function (e) {
        return "string" == typeof e ? n.toArray(e, "hex") : e;
      }, n.intFromLE = function (e) {
        return new i(e, "hex", "le");
      };
    }, {
      "bn.js": "BN",
      "minimalistic-assert": 107,
      "minimalistic-crypto-utils": 108
    }],
    82: [function (e, t, r) {
      t.exports = {
        _args: [["elliptic@6.4.0", "/Users/frozeman/Sites/_ethereum/web3"]],
        _development: !0,
        _from: "elliptic@6.4.0",
        _id: "elliptic@6.4.0",
        _inBundle: !1,
        _integrity: "sha1-ysmvh2LIWDYYcAPI3+GT5eLq5d8=",
        _location: "/elliptic",
        _phantomChildren: {},
        _requested: {
          type: "version",
          registry: !0,
          raw: "elliptic@6.4.0",
          name: "elliptic",
          escapedName: "elliptic",
          rawSpec: "6.4.0",
          saveSpec: null,
          fetchSpec: "6.4.0"
        },
        _requiredBy: ["/browserify-sign", "/create-ecdh", "/secp256k1"],
        _resolved: "https://registry.npmjs.org/elliptic/-/elliptic-6.4.0.tgz",
        _spec: "6.4.0",
        _where: "/Users/frozeman/Sites/_ethereum/web3",
        author: {
          name: "Fedor Indutny",
          email: "fedor@indutny.com"
        },
        bugs: {
          url: "https://github.com/indutny/elliptic/issues"
        },
        dependencies: {
          "bn.js": "^4.4.0",
          brorand: "^1.0.1",
          "hash.js": "^1.0.0",
          "hmac-drbg": "^1.0.0",
          inherits: "^2.0.1",
          "minimalistic-assert": "^1.0.0",
          "minimalistic-crypto-utils": "^1.0.0"
        },
        description: "EC cryptography",
        devDependencies: {
          brfs: "^1.4.3",
          coveralls: "^2.11.3",
          grunt: "^0.4.5",
          "grunt-browserify": "^5.0.0",
          "grunt-cli": "^1.2.0",
          "grunt-contrib-connect": "^1.0.0",
          "grunt-contrib-copy": "^1.0.0",
          "grunt-contrib-uglify": "^1.0.1",
          "grunt-mocha-istanbul": "^3.0.1",
          "grunt-saucelabs": "^8.6.2",
          istanbul: "^0.4.2",
          jscs: "^2.9.0",
          jshint: "^2.6.0",
          mocha: "^2.1.0"
        },
        files: ["lib"],
        homepage: "https://github.com/indutny/elliptic",
        keywords: ["EC", "Elliptic", "curve", "Cryptography"],
        license: "MIT",
        main: "lib/elliptic.js",
        name: "elliptic",
        repository: {
          type: "git",
          url: "git+ssh://git@github.com/indutny/elliptic.git"
        },
        scripts: {
          jscs: "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
          jshint: "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
          lint: "npm run jscs && npm run jshint",
          test: "npm run lint && npm run unit",
          unit: "istanbul test _mocha --reporter=spec test/index.js",
          version: "grunt dist && git add dist/"
        },
        version: "6.4.0"
      };
    }, {}],
    83: [function (e, t, r) {
      function n() {
        this._events = this._events || {}, this._maxListeners = this._maxListeners || void 0;
      }

      function u(e) {
        return "function" == typeof e;
      }

      function c(e) {
        return "object" === (void 0 === e ? "undefined" : _typeof(e)) && null !== e;
      }

      function f(e) {
        return void 0 === e;
      }

      ((t.exports = n).EventEmitter = n).prototype._events = void 0, n.prototype._maxListeners = void 0, n.defaultMaxListeners = 10, n.prototype.setMaxListeners = function (e) {
        if ("number" != typeof e || e < 0 || isNaN(e)) throw TypeError("n must be a positive number");
        return this._maxListeners = e, this;
      }, n.prototype.emit = function (e) {
        var t, r, n, i, o, a;

        if (this._events || (this._events = {}), "error" === e && (!this._events.error || c(this._events.error) && !this._events.error.length)) {
          if ((t = arguments[1]) instanceof Error) throw t;
          var s = new Error('Uncaught, unspecified "error" event. (' + t + ")");
          throw s.context = t, s;
        }

        if (f(r = this._events[e])) return !1;
        if (u(r)) switch (arguments.length) {
          case 1:
            r.call(this);
            break;

          case 2:
            r.call(this, arguments[1]);
            break;

          case 3:
            r.call(this, arguments[1], arguments[2]);
            break;

          default:
            i = Array.prototype.slice.call(arguments, 1), r.apply(this, i);
        } else if (c(r)) for (i = Array.prototype.slice.call(arguments, 1), n = (a = r.slice()).length, o = 0; o < n; o++) {
          a[o].apply(this, i);
        }
        return !0;
      }, n.prototype.on = n.prototype.addListener = function (e, t) {
        var r;
        if (!u(t)) throw TypeError("listener must be a function");
        return this._events || (this._events = {}), this._events.newListener && this.emit("newListener", e, u(t.listener) ? t.listener : t), this._events[e] ? c(this._events[e]) ? this._events[e].push(t) : this._events[e] = [this._events[e], t] : this._events[e] = t, c(this._events[e]) && !this._events[e].warned && (r = f(this._maxListeners) ? n.defaultMaxListeners : this._maxListeners) && 0 < r && this._events[e].length > r && (this._events[e].warned = !0, console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[e].length), "function" == typeof console.trace && console.trace()), this;
      }, n.prototype.once = function (e, t) {
        if (!u(t)) throw TypeError("listener must be a function");
        var r = !1;

        function n() {
          this.removeListener(e, n), r || (r = !0, t.apply(this, arguments));
        }

        return n.listener = t, this.on(e, n), this;
      }, n.prototype.removeListener = function (e, t) {
        var r, n, i, o;
        if (!u(t)) throw TypeError("listener must be a function");
        if (!this._events || !this._events[e]) return this;
        if (i = (r = this._events[e]).length, n = -1, r === t || u(r.listener) && r.listener === t) delete this._events[e], this._events.removeListener && this.emit("removeListener", e, t);else if (c(r)) {
          for (o = i; 0 < o--;) {
            if (r[o] === t || r[o].listener && r[o].listener === t) {
              n = o;
              break;
            }
          }

          if (n < 0) return this;
          1 === r.length ? (r.length = 0, delete this._events[e]) : r.splice(n, 1), this._events.removeListener && this.emit("removeListener", e, t);
        }
        return this;
      }, n.prototype.removeAllListeners = function (e) {
        var t, r;
        if (!this._events) return this;
        if (!this._events.removeListener) return 0 === arguments.length ? this._events = {} : this._events[e] && delete this._events[e], this;

        if (0 === arguments.length) {
          for (t in this._events) {
            "removeListener" !== t && this.removeAllListeners(t);
          }

          return this.removeAllListeners("removeListener"), this._events = {}, this;
        }

        if (u(r = this._events[e])) this.removeListener(e, r);else if (r) for (; r.length;) {
          this.removeListener(e, r[r.length - 1]);
        }
        return delete this._events[e], this;
      }, n.prototype.listeners = function (e) {
        return this._events && this._events[e] ? u(this._events[e]) ? [this._events[e]] : this._events[e].slice() : [];
      }, n.prototype.listenerCount = function (e) {
        if (this._events) {
          var t = this._events[e];
          if (u(t)) return 1;
          if (t) return t.length;
        }

        return 0;
      }, n.listenerCount = function (e, t) {
        return e.listenerCount(t);
      };
    }, {}],
    84: [function (e, t, r) {
      var l = e("safe-buffer").Buffer,
          p = e("md5.js");

      t.exports = function (e, t, r, n) {
        if (l.isBuffer(e) || (e = l.from(e, "binary")), t && (l.isBuffer(t) || (t = l.from(t, "binary")), 8 !== t.length)) throw new RangeError("salt should be Buffer with 8 byte length");

        for (var i = r / 8, o = l.alloc(i), a = l.alloc(n || 0), s = l.alloc(0); 0 < i || 0 < n;) {
          var u = new p();
          u.update(s), u.update(e), t && u.update(t), s = u.digest();
          var c = 0;

          if (0 < i) {
            var f = o.length - i;
            c = Math.min(i, s.length), s.copy(o, f, 0, c), i -= c;
          }

          if (c < s.length && 0 < n) {
            var h = a.length - n,
                d = Math.min(n, s.length - c);
            s.copy(a, h, c, c + d), n -= d;
          }
        }

        return s.fill(0), {
          key: o,
          iv: a
        };
      };
    }, {
      "md5.js": 105,
      "safe-buffer": 149
    }],
    85: [function (e, t, r) {
      var s = e("safe-buffer").Buffer,
          n = e("stream").Transform;

      function i(e) {
        n.call(this), this._block = s.allocUnsafe(e), this._blockSize = e, this._blockOffset = 0, this._length = [0, 0, 0, 0], this._finalized = !1;
      }

      e("inherits")(i, n), i.prototype._transform = function (e, t, r) {
        var n = null;

        try {
          this.update(e, t);
        } catch (e) {
          n = e;
        }

        r(n);
      }, i.prototype._flush = function (e) {
        var t = null;

        try {
          this.push(this.digest());
        } catch (e) {
          t = e;
        }

        e(t);
      }, i.prototype.update = function (e, t) {
        if (function (e, t) {
          if (!s.isBuffer(e) && "string" != typeof e) throw new TypeError(t + " must be a string or a buffer");
        }(e, "Data"), this._finalized) throw new Error("Digest already called");
        s.isBuffer(e) || (e = s.from(e, t));

        for (var r = this._block, n = 0; this._blockOffset + e.length - n >= this._blockSize;) {
          for (var i = this._blockOffset; i < this._blockSize;) {
            r[i++] = e[n++];
          }

          this._update(), this._blockOffset = 0;
        }

        for (; n < e.length;) {
          r[this._blockOffset++] = e[n++];
        }

        for (var o = 0, a = 8 * e.length; 0 < a; ++o) {
          this._length[o] += a, 0 < (a = this._length[o] / 4294967296 | 0) && (this._length[o] -= 4294967296 * a);
        }

        return this;
      }, i.prototype._update = function () {
        throw new Error("_update is not implemented");
      }, i.prototype.digest = function (e) {
        if (this._finalized) throw new Error("Digest already called");
        this._finalized = !0;

        var t = this._digest();

        void 0 !== e && (t = t.toString(e)), this._block.fill(0);

        for (var r = this._blockOffset = 0; r < 4; ++r) {
          this._length[r] = 0;
        }

        return t;
      }, i.prototype._digest = function () {
        throw new Error("_digest is not implemented");
      }, t.exports = i;
    }, {
      inherits: 102,
      "safe-buffer": 149,
      stream: 158
    }],
    86: [function (e, t, r) {
      var n = r;
      n.utils = e("./hash/utils"), n.common = e("./hash/common"), n.sha = e("./hash/sha"), n.ripemd = e("./hash/ripemd"), n.hmac = e("./hash/hmac"), n.sha1 = n.sha.sha1, n.sha256 = n.sha.sha256, n.sha224 = n.sha.sha224, n.sha384 = n.sha.sha384, n.sha512 = n.sha.sha512, n.ripemd160 = n.ripemd.ripemd160;
    }, {
      "./hash/common": 87,
      "./hash/hmac": 88,
      "./hash/ripemd": 89,
      "./hash/sha": 90,
      "./hash/utils": 97
    }],
    87: [function (e, t, r) {
      var i = e("./utils"),
          n = e("minimalistic-assert");

      function o() {
        this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = "big", this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;
      }

      (r.BlockHash = o).prototype.update = function (e, t) {
        if (e = i.toArray(e, t), this.pending ? this.pending = this.pending.concat(e) : this.pending = e, this.pendingTotal += e.length, this.pending.length >= this._delta8) {
          var r = (e = this.pending).length % this._delta8;
          this.pending = e.slice(e.length - r, e.length), 0 === this.pending.length && (this.pending = null), e = i.join32(e, 0, e.length - r, this.endian);

          for (var n = 0; n < e.length; n += this._delta32) {
            this._update(e, n, n + this._delta32);
          }
        }

        return this;
      }, o.prototype.digest = function (e) {
        return this.update(this._pad()), n(null === this.pending), this._digest(e);
      }, o.prototype._pad = function () {
        var e = this.pendingTotal,
            t = this._delta8,
            r = t - (e + this.padLength) % t,
            n = new Array(r + this.padLength);
        n[0] = 128;

        for (var i = 1; i < r; i++) {
          n[i] = 0;
        }

        if (e <<= 3, "big" === this.endian) {
          for (var o = 8; o < this.padLength; o++) {
            n[i++] = 0;
          }

          n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = e >>> 24 & 255, n[i++] = e >>> 16 & 255, n[i++] = e >>> 8 & 255, n[i++] = 255 & e;
        } else for (n[i++] = 255 & e, n[i++] = e >>> 8 & 255, n[i++] = e >>> 16 & 255, n[i++] = e >>> 24 & 255, n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = 0, o = 8; o < this.padLength; o++) {
          n[i++] = 0;
        }

        return n;
      };
    }, {
      "./utils": 97,
      "minimalistic-assert": 107
    }],
    88: [function (e, t, r) {
      var n = e("./utils"),
          i = e("minimalistic-assert");

      function o(e, t, r) {
        if (!(this instanceof o)) return new o(e, t, r);
        this.Hash = e, this.blockSize = e.blockSize / 8, this.outSize = e.outSize / 8, this.inner = null, this.outer = null, this._init(n.toArray(t, r));
      }

      (t.exports = o).prototype._init = function (e) {
        e.length > this.blockSize && (e = new this.Hash().update(e).digest()), i(e.length <= this.blockSize);

        for (var t = e.length; t < this.blockSize; t++) {
          e.push(0);
        }

        for (t = 0; t < e.length; t++) {
          e[t] ^= 54;
        }

        for (this.inner = new this.Hash().update(e), t = 0; t < e.length; t++) {
          e[t] ^= 106;
        }

        this.outer = new this.Hash().update(e);
      }, o.prototype.update = function (e, t) {
        return this.inner.update(e, t), this;
      }, o.prototype.digest = function (e) {
        return this.outer.update(this.inner.digest()), this.outer.digest(e);
      };
    }, {
      "./utils": 97,
      "minimalistic-assert": 107
    }],
    89: [function (e, t, r) {
      var n = e("./utils"),
          i = e("./common"),
          p = n.rotl32,
          b = n.sum32,
          y = n.sum32_3,
          m = n.sum32_4,
          o = i.BlockHash;

      function a() {
        if (!(this instanceof a)) return new a();
        o.call(this), this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.endian = "little";
      }

      function v(e, t, r, n) {
        return e <= 15 ? t ^ r ^ n : e <= 31 ? t & r | ~t & n : e <= 47 ? (t | ~r) ^ n : e <= 63 ? t & n | r & ~n : t ^ (r | ~n);
      }

      function g(e) {
        return e <= 15 ? 0 : e <= 31 ? 1518500249 : e <= 47 ? 1859775393 : e <= 63 ? 2400959708 : 2840853838;
      }

      function w(e) {
        return e <= 15 ? 1352829926 : e <= 31 ? 1548603684 : e <= 47 ? 1836072691 : e <= 63 ? 2053994217 : 0;
      }

      n.inherits(a, o), (r.ripemd160 = a).blockSize = 512, a.outSize = 160, a.hmacStrength = 192, a.padLength = 64, a.prototype._update = function (e, t) {
        for (var r = this.h[0], n = this.h[1], i = this.h[2], o = this.h[3], a = this.h[4], s = r, u = n, c = i, f = o, h = a, d = 0; d < 80; d++) {
          var l = b(p(m(r, v(d, n, i, o), e[_[d] + t], g(d)), x[d]), a);
          r = a, a = o, o = p(i, 10), i = n, n = l, l = b(p(m(s, v(79 - d, u, c, f), e[A[d] + t], w(d)), M[d]), h), s = h, h = f, f = p(c, 10), c = u, u = l;
        }

        l = y(this.h[1], i, f), this.h[1] = y(this.h[2], o, h), this.h[2] = y(this.h[3], a, s), this.h[3] = y(this.h[4], r, u), this.h[4] = y(this.h[0], n, c), this.h[0] = l;
      }, a.prototype._digest = function (e) {
        return "hex" === e ? n.toHex32(this.h, "little") : n.split32(this.h, "little");
      };
      var _ = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13],
          A = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11],
          x = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6],
          M = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
    }, {
      "./common": 87,
      "./utils": 97
    }],
    90: [function (e, t, r) {
      r.sha1 = e("./sha/1"), r.sha224 = e("./sha/224"), r.sha256 = e("./sha/256"), r.sha384 = e("./sha/384"), r.sha512 = e("./sha/512");
    }, {
      "./sha/1": 91,
      "./sha/224": 92,
      "./sha/256": 93,
      "./sha/384": 94,
      "./sha/512": 95
    }],
    91: [function (e, t, r) {
      var n = e("../utils"),
          i = e("../common"),
          o = e("./common"),
          h = n.rotl32,
          d = n.sum32,
          l = n.sum32_5,
          p = o.ft_1,
          a = i.BlockHash,
          b = [1518500249, 1859775393, 2400959708, 3395469782];

      function s() {
        if (!(this instanceof s)) return new s();
        a.call(this), this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.W = new Array(80);
      }

      n.inherits(s, a), (t.exports = s).blockSize = 512, s.outSize = 160, s.hmacStrength = 80, s.padLength = 64, s.prototype._update = function (e, t) {
        for (var r = this.W, n = 0; n < 16; n++) {
          r[n] = e[t + n];
        }

        for (; n < r.length; n++) {
          r[n] = h(r[n - 3] ^ r[n - 8] ^ r[n - 14] ^ r[n - 16], 1);
        }

        var i = this.h[0],
            o = this.h[1],
            a = this.h[2],
            s = this.h[3],
            u = this.h[4];

        for (n = 0; n < r.length; n++) {
          var c = ~~(n / 20),
              f = l(h(i, 5), p(c, o, a, s), u, r[n], b[c]);
          u = s, s = a, a = h(o, 30), o = i, i = f;
        }

        this.h[0] = d(this.h[0], i), this.h[1] = d(this.h[1], o), this.h[2] = d(this.h[2], a), this.h[3] = d(this.h[3], s), this.h[4] = d(this.h[4], u);
      }, s.prototype._digest = function (e) {
        return "hex" === e ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
      };
    }, {
      "../common": 87,
      "../utils": 97,
      "./common": 96
    }],
    92: [function (e, t, r) {
      var n = e("../utils"),
          i = e("./256");

      function o() {
        if (!(this instanceof o)) return new o();
        i.call(this), this.h = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428];
      }

      n.inherits(o, i), (t.exports = o).blockSize = 512, o.outSize = 224, o.hmacStrength = 192, o.padLength = 64, o.prototype._digest = function (e) {
        return "hex" === e ? n.toHex32(this.h.slice(0, 7), "big") : n.split32(this.h.slice(0, 7), "big");
      };
    }, {
      "../utils": 97,
      "./256": 93
    }],
    93: [function (e, t, r) {
      var n = e("../utils"),
          i = e("../common"),
          o = e("./common"),
          p = e("minimalistic-assert"),
          b = n.sum32,
          y = n.sum32_4,
          m = n.sum32_5,
          v = o.ch32,
          g = o.maj32,
          w = o.s0_256,
          _ = o.s1_256,
          A = o.g0_256,
          x = o.g1_256,
          a = i.BlockHash,
          s = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];

      function u() {
        if (!(this instanceof u)) return new u();
        a.call(this), this.h = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225], this.k = s, this.W = new Array(64);
      }

      n.inherits(u, a), (t.exports = u).blockSize = 512, u.outSize = 256, u.hmacStrength = 192, u.padLength = 64, u.prototype._update = function (e, t) {
        for (var r = this.W, n = 0; n < 16; n++) {
          r[n] = e[t + n];
        }

        for (; n < r.length; n++) {
          r[n] = y(x(r[n - 2]), r[n - 7], A(r[n - 15]), r[n - 16]);
        }

        var i = this.h[0],
            o = this.h[1],
            a = this.h[2],
            s = this.h[3],
            u = this.h[4],
            c = this.h[5],
            f = this.h[6],
            h = this.h[7];

        for (p(this.k.length === r.length), n = 0; n < r.length; n++) {
          var d = m(h, _(u), v(u, c, f), this.k[n], r[n]),
              l = b(w(i), g(i, o, a));
          h = f, f = c, c = u, u = b(s, d), s = a, a = o, o = i, i = b(d, l);
        }

        this.h[0] = b(this.h[0], i), this.h[1] = b(this.h[1], o), this.h[2] = b(this.h[2], a), this.h[3] = b(this.h[3], s), this.h[4] = b(this.h[4], u), this.h[5] = b(this.h[5], c), this.h[6] = b(this.h[6], f), this.h[7] = b(this.h[7], h);
      }, u.prototype._digest = function (e) {
        return "hex" === e ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
      };
    }, {
      "../common": 87,
      "../utils": 97,
      "./common": 96,
      "minimalistic-assert": 107
    }],
    94: [function (e, t, r) {
      var n = e("../utils"),
          i = e("./512");

      function o() {
        if (!(this instanceof o)) return new o();
        i.call(this), this.h = [3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428];
      }

      n.inherits(o, i), (t.exports = o).blockSize = 1024, o.outSize = 384, o.hmacStrength = 192, o.padLength = 128, o.prototype._digest = function (e) {
        return "hex" === e ? n.toHex32(this.h.slice(0, 12), "big") : n.split32(this.h.slice(0, 12), "big");
      };
    }, {
      "../utils": 97,
      "./512": 95
    }],
    95: [function (e, t, r) {
      var n = e("../utils"),
          i = e("../common"),
          N = e("minimalistic-assert"),
          o = n.rotr64_hi,
          a = n.rotr64_lo,
          s = n.shr64_hi,
          u = n.shr64_lo,
          P = n.sum64,
          R = n.sum64_hi,
          O = n.sum64_lo,
          d = n.sum64_4_hi,
          l = n.sum64_4_lo,
          L = n.sum64_5_hi,
          q = n.sum64_5_lo,
          c = i.BlockHash,
          f = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591];

      function h() {
        if (!(this instanceof h)) return new h();
        c.call(this), this.h = [1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209], this.k = f, this.W = new Array(160);
      }

      function D(e, t, r, n, i) {
        var o = e & r ^ ~e & i;
        return o < 0 && (o += 4294967296), o;
      }

      function F(e, t, r, n, i, o) {
        var a = t & n ^ ~t & o;
        return a < 0 && (a += 4294967296), a;
      }

      function H(e, t, r, n, i) {
        var o = e & r ^ e & i ^ r & i;
        return o < 0 && (o += 4294967296), o;
      }

      function z(e, t, r, n, i, o) {
        var a = t & n ^ t & o ^ n & o;
        return a < 0 && (a += 4294967296), a;
      }

      function K(e, t) {
        var r = o(e, t, 28) ^ o(t, e, 2) ^ o(t, e, 7);
        return r < 0 && (r += 4294967296), r;
      }

      function V(e, t) {
        var r = a(e, t, 28) ^ a(t, e, 2) ^ a(t, e, 7);
        return r < 0 && (r += 4294967296), r;
      }

      function G(e, t) {
        var r = o(e, t, 14) ^ o(e, t, 18) ^ o(t, e, 9);
        return r < 0 && (r += 4294967296), r;
      }

      function W(e, t) {
        var r = a(e, t, 14) ^ a(e, t, 18) ^ a(t, e, 9);
        return r < 0 && (r += 4294967296), r;
      }

      function p(e, t) {
        var r = o(e, t, 1) ^ o(e, t, 8) ^ s(e, t, 7);
        return r < 0 && (r += 4294967296), r;
      }

      function b(e, t) {
        var r = a(e, t, 1) ^ a(e, t, 8) ^ u(e, t, 7);
        return r < 0 && (r += 4294967296), r;
      }

      function y(e, t) {
        var r = o(e, t, 19) ^ o(t, e, 29) ^ s(e, t, 6);
        return r < 0 && (r += 4294967296), r;
      }

      function m(e, t) {
        var r = a(e, t, 19) ^ a(t, e, 29) ^ u(e, t, 6);
        return r < 0 && (r += 4294967296), r;
      }

      n.inherits(h, c), (t.exports = h).blockSize = 1024, h.outSize = 512, h.hmacStrength = 192, h.padLength = 128, h.prototype._prepareBlock = function (e, t) {
        for (var r = this.W, n = 0; n < 32; n++) {
          r[n] = e[t + n];
        }

        for (; n < r.length; n += 2) {
          var i = y(r[n - 4], r[n - 3]),
              o = m(r[n - 4], r[n - 3]),
              a = r[n - 14],
              s = r[n - 13],
              u = p(r[n - 30], r[n - 29]),
              c = b(r[n - 30], r[n - 29]),
              f = r[n - 32],
              h = r[n - 31];
          r[n] = d(i, o, a, s, u, c, f, h), r[n + 1] = l(i, o, a, s, u, c, f, h);
        }
      }, h.prototype._update = function (e, t) {
        this._prepareBlock(e, t);

        var r = this.W,
            n = this.h[0],
            i = this.h[1],
            o = this.h[2],
            a = this.h[3],
            s = this.h[4],
            u = this.h[5],
            c = this.h[6],
            f = this.h[7],
            h = this.h[8],
            d = this.h[9],
            l = this.h[10],
            p = this.h[11],
            b = this.h[12],
            y = this.h[13],
            m = this.h[14],
            v = this.h[15];
        N(this.k.length === r.length);

        for (var g = 0; g < r.length; g += 2) {
          var w = m,
              _ = v,
              A = G(h, d),
              x = W(h, d),
              M = D(h, d, l, p, b),
              k = F(h, d, l, p, b, y),
              E = this.k[g],
              S = this.k[g + 1],
              U = r[g],
              j = r[g + 1],
              I = L(w, _, A, x, M, k, E, S, U, j),
              T = q(w, _, A, x, M, k, E, S, U, j);
          w = K(n, i), _ = V(n, i), A = H(n, i, o, a, s), x = z(n, i, o, a, s, u);
          var C = R(w, _, A, x),
              B = O(w, _, A, x);
          m = b, v = y, b = l, y = p, l = h, p = d, h = R(c, f, I, T), d = O(f, f, I, T), c = s, f = u, s = o, u = a, o = n, a = i, n = R(I, T, C, B), i = O(I, T, C, B);
        }

        P(this.h, 0, n, i), P(this.h, 2, o, a), P(this.h, 4, s, u), P(this.h, 6, c, f), P(this.h, 8, h, d), P(this.h, 10, l, p), P(this.h, 12, b, y), P(this.h, 14, m, v);
      }, h.prototype._digest = function (e) {
        return "hex" === e ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
      };
    }, {
      "../common": 87,
      "../utils": 97,
      "minimalistic-assert": 107
    }],
    96: [function (e, t, r) {
      var n = e("../utils").rotr32;

      function i(e, t, r) {
        return e & t ^ ~e & r;
      }

      function o(e, t, r) {
        return e & t ^ e & r ^ t & r;
      }

      function a(e, t, r) {
        return e ^ t ^ r;
      }

      r.ft_1 = function (e, t, r, n) {
        return 0 === e ? i(t, r, n) : 1 === e || 3 === e ? a(t, r, n) : 2 === e ? o(t, r, n) : void 0;
      }, r.ch32 = i, r.maj32 = o, r.p32 = a, r.s0_256 = function (e) {
        return n(e, 2) ^ n(e, 13) ^ n(e, 22);
      }, r.s1_256 = function (e) {
        return n(e, 6) ^ n(e, 11) ^ n(e, 25);
      }, r.g0_256 = function (e) {
        return n(e, 7) ^ n(e, 18) ^ e >>> 3;
      }, r.g1_256 = function (e) {
        return n(e, 17) ^ n(e, 19) ^ e >>> 10;
      };
    }, {
      "../utils": 97
    }],
    97: [function (e, t, r) {
      var c = e("minimalistic-assert"),
          n = e("inherits");

      function o(e) {
        return (e >>> 24 | e >>> 8 & 65280 | e << 8 & 16711680 | (255 & e) << 24) >>> 0;
      }

      function i(e) {
        return 1 === e.length ? "0" + e : e;
      }

      function a(e) {
        return 7 === e.length ? "0" + e : 6 === e.length ? "00" + e : 5 === e.length ? "000" + e : 4 === e.length ? "0000" + e : 3 === e.length ? "00000" + e : 2 === e.length ? "000000" + e : 1 === e.length ? "0000000" + e : e;
      }

      r.inherits = n, r.toArray = function (e, t) {
        if (Array.isArray(e)) return e.slice();
        if (!e) return [];
        var r = [];
        if ("string" == typeof e) {
          if (t) {
            if ("hex" === t) for ((e = e.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e = "0" + e), n = 0; n < e.length; n += 2) {
              r.push(parseInt(e[n] + e[n + 1], 16));
            }
          } else for (var n = 0; n < e.length; n++) {
            var i = e.charCodeAt(n),
                o = i >> 8,
                a = 255 & i;
            o ? r.push(o, a) : r.push(a);
          }
        } else for (n = 0; n < e.length; n++) {
          r[n] = 0 | e[n];
        }
        return r;
      }, r.toHex = function (e) {
        for (var t = "", r = 0; r < e.length; r++) {
          t += i(e[r].toString(16));
        }

        return t;
      }, r.htonl = o, r.toHex32 = function (e, t) {
        for (var r = "", n = 0; n < e.length; n++) {
          var i = e[n];
          "little" === t && (i = o(i)), r += a(i.toString(16));
        }

        return r;
      }, r.zero2 = i, r.zero8 = a, r.join32 = function (e, t, r, n) {
        var i = r - t;
        c(i % 4 == 0);

        for (var o = new Array(i / 4), a = 0, s = t; a < o.length; a++, s += 4) {
          var u;
          u = "big" === n ? e[s] << 24 | e[s + 1] << 16 | e[s + 2] << 8 | e[s + 3] : e[s + 3] << 24 | e[s + 2] << 16 | e[s + 1] << 8 | e[s], o[a] = u >>> 0;
        }

        return o;
      }, r.split32 = function (e, t) {
        for (var r = new Array(4 * e.length), n = 0, i = 0; n < e.length; n++, i += 4) {
          var o = e[n];
          "big" === t ? (r[i] = o >>> 24, r[i + 1] = o >>> 16 & 255, r[i + 2] = o >>> 8 & 255, r[i + 3] = 255 & o) : (r[i + 3] = o >>> 24, r[i + 2] = o >>> 16 & 255, r[i + 1] = o >>> 8 & 255, r[i] = 255 & o);
        }

        return r;
      }, r.rotr32 = function (e, t) {
        return e >>> t | e << 32 - t;
      }, r.rotl32 = function (e, t) {
        return e << t | e >>> 32 - t;
      }, r.sum32 = function (e, t) {
        return e + t >>> 0;
      }, r.sum32_3 = function (e, t, r) {
        return e + t + r >>> 0;
      }, r.sum32_4 = function (e, t, r, n) {
        return e + t + r + n >>> 0;
      }, r.sum32_5 = function (e, t, r, n, i) {
        return e + t + r + n + i >>> 0;
      }, r.sum64 = function (e, t, r, n) {
        var i = e[t],
            o = n + e[t + 1] >>> 0,
            a = (o < n ? 1 : 0) + r + i;
        e[t] = a >>> 0, e[t + 1] = o;
      }, r.sum64_hi = function (e, t, r, n) {
        return (t + n >>> 0 < t ? 1 : 0) + e + r >>> 0;
      }, r.sum64_lo = function (e, t, r, n) {
        return t + n >>> 0;
      }, r.sum64_4_hi = function (e, t, r, n, i, o, a, s) {
        var u = 0,
            c = t;
        return u += (c = c + n >>> 0) < t ? 1 : 0, u += (c = c + o >>> 0) < o ? 1 : 0, e + r + i + a + (u += (c = c + s >>> 0) < s ? 1 : 0) >>> 0;
      }, r.sum64_4_lo = function (e, t, r, n, i, o, a, s) {
        return t + n + o + s >>> 0;
      }, r.sum64_5_hi = function (e, t, r, n, i, o, a, s, u, c) {
        var f = 0,
            h = t;
        return f += (h = h + n >>> 0) < t ? 1 : 0, f += (h = h + o >>> 0) < o ? 1 : 0, f += (h = h + s >>> 0) < s ? 1 : 0, e + r + i + a + u + (f += (h = h + c >>> 0) < c ? 1 : 0) >>> 0;
      }, r.sum64_5_lo = function (e, t, r, n, i, o, a, s, u, c) {
        return t + n + o + s + c >>> 0;
      }, r.rotr64_hi = function (e, t, r) {
        return (t << 32 - r | e >>> r) >>> 0;
      }, r.rotr64_lo = function (e, t, r) {
        return (e << 32 - r | t >>> r) >>> 0;
      }, r.shr64_hi = function (e, t, r) {
        return e >>> r;
      }, r.shr64_lo = function (e, t, r) {
        return (e << 32 - r | t >>> r) >>> 0;
      };
    }, {
      inherits: 102,
      "minimalistic-assert": 107
    }],
    98: [function (e, t, r) {
      var n = e("hash.js"),
          a = e("minimalistic-crypto-utils"),
          i = e("minimalistic-assert");

      function o(e) {
        if (!(this instanceof o)) return new o(e);
        this.hash = e.hash, this.predResist = !!e.predResist, this.outLen = this.hash.outSize, this.minEntropy = e.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
        var t = a.toArray(e.entropy, e.entropyEnc || "hex"),
            r = a.toArray(e.nonce, e.nonceEnc || "hex"),
            n = a.toArray(e.pers, e.persEnc || "hex");
        i(t.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._init(t, r, n);
      }

      (t.exports = o).prototype._init = function (e, t, r) {
        var n = e.concat(t).concat(r);
        this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);

        for (var i = 0; i < this.V.length; i++) {
          this.K[i] = 0, this.V[i] = 1;
        }

        this._update(n), this._reseed = 1, this.reseedInterval = 281474976710656;
      }, o.prototype._hmac = function () {
        return new n.hmac(this.hash, this.K);
      }, o.prototype._update = function (e) {
        var t = this._hmac().update(this.V).update([0]);

        e && (t = t.update(e)), this.K = t.digest(), this.V = this._hmac().update(this.V).digest(), e && (this.K = this._hmac().update(this.V).update([1]).update(e).digest(), this.V = this._hmac().update(this.V).digest());
      }, o.prototype.reseed = function (e, t, r, n) {
        "string" != typeof t && (n = r, r = t, t = null), e = a.toArray(e, t), r = a.toArray(r, n), i(e.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._update(e.concat(r || [])), this._reseed = 1;
      }, o.prototype.generate = function (e, t, r, n) {
        if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
        "string" != typeof t && (n = r, r = t, t = null), r && (r = a.toArray(r, n || "hex"), this._update(r));

        for (var i = []; i.length < e;) {
          this.V = this._hmac().update(this.V).digest(), i = i.concat(this.V);
        }

        var o = i.slice(0, e);
        return this._update(r), this._reseed++, a.encode(o, t);
      };
    }, {
      "hash.js": 86,
      "minimalistic-assert": 107,
      "minimalistic-crypto-utils": 108
    }],
    99: [function (e, t, r) {
      var n = e("http"),
          i = e("url"),
          o = t.exports;

      for (var a in n) {
        n.hasOwnProperty(a) && (o[a] = n[a]);
      }

      function s(e) {
        if ("string" == typeof e && (e = i.parse(e)), e.protocol || (e.protocol = "https:"), "https:" !== e.protocol) throw new Error('Protocol "' + e.protocol + '" not supported. Expected "https:"');
        return e;
      }

      o.request = function (e, t) {
        return e = s(e), n.request.call(this, e, t);
      }, o.get = function (e, t) {
        return e = s(e), n.get.call(this, e, t);
      };
    }, {
      http: 159,
      url: 166
    }],
    100: [function (e, t, r) {
      r.read = function (e, t, r, n, i) {
        var o,
            a,
            s = 8 * i - n - 1,
            u = (1 << s) - 1,
            c = u >> 1,
            f = -7,
            h = r ? i - 1 : 0,
            d = r ? -1 : 1,
            l = e[t + h];

        for (h += d, o = l & (1 << -f) - 1, l >>= -f, f += s; 0 < f; o = 256 * o + e[t + h], h += d, f -= 8) {
          ;
        }

        for (a = o & (1 << -f) - 1, o >>= -f, f += n; 0 < f; a = 256 * a + e[t + h], h += d, f -= 8) {
          ;
        }

        if (0 === o) o = 1 - c;else {
          if (o === u) return a ? NaN : 1 / 0 * (l ? -1 : 1);
          a += Math.pow(2, n), o -= c;
        }
        return (l ? -1 : 1) * a * Math.pow(2, o - n);
      }, r.write = function (e, t, r, n, i, o) {
        var a,
            s,
            u,
            c = 8 * o - i - 1,
            f = (1 << c) - 1,
            h = f >> 1,
            d = 23 === i ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
            l = n ? 0 : o - 1,
            p = n ? 1 : -1,
            b = t < 0 || 0 === t && 1 / t < 0 ? 1 : 0;

        for (t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (s = isNaN(t) ? 1 : 0, a = f) : (a = Math.floor(Math.log(t) / Math.LN2), t * (u = Math.pow(2, -a)) < 1 && (a--, u *= 2), 2 <= (t += 1 <= a + h ? d / u : d * Math.pow(2, 1 - h)) * u && (a++, u /= 2), f <= a + h ? (s = 0, a = f) : 1 <= a + h ? (s = (t * u - 1) * Math.pow(2, i), a += h) : (s = t * Math.pow(2, h - 1) * Math.pow(2, i), a = 0)); 8 <= i; e[r + l] = 255 & s, l += p, s /= 256, i -= 8) {
          ;
        }

        for (a = a << i | s, c += i; 0 < c; e[r + l] = 255 & a, l += p, a /= 256, c -= 8) {
          ;
        }

        e[r + l - p] |= 128 * b;
      };
    }, {}],
    101: [function (e, t, r) {
      var n = [].indexOf;

      t.exports = function (e, t) {
        if (n) return e.indexOf(t);

        for (var r = 0; r < e.length; ++r) {
          if (e[r] === t) return r;
        }

        return -1;
      };
    }, {}],
    102: [function (e, t, r) {
      "function" == typeof Object.create ? t.exports = function (e, t) {
        e.super_ = t, e.prototype = Object.create(t.prototype, {
          constructor: {
            value: e,
            enumerable: !1,
            writable: !0,
            configurable: !0
          }
        });
      } : t.exports = function (e, t) {
        e.super_ = t;

        var r = function r() {};

        r.prototype = t.prototype, e.prototype = new r(), e.prototype.constructor = e;
      };
    }, {}],
    103: [function (e, t, r) {
      function n(e) {
        return !!e.constructor && "function" == typeof e.constructor.isBuffer && e.constructor.isBuffer(e);
      }

      t.exports = function (e) {
        return null != e && (n(e) || "function" == typeof (t = e).readFloatLE && "function" == typeof t.slice && n(t.slice(0, 0)) || !!e._isBuffer);
        var t;
      };
    }, {}],
    104: [function (e, t, r) {
      var n = {}.toString;

      t.exports = Array.isArray || function (e) {
        return "[object Array]" == n.call(e);
      };
    }, {}],
    105: [function (i, o, e) {
      (function (t) {
        var e = i("inherits"),
            r = i("hash-base"),
            a = new Array(16);

        function n() {
          r.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878;
        }

        function s(e, t) {
          return e << t | e >>> 32 - t;
        }

        function u(e, t, r, n, i, o, a) {
          return s(e + (t & r | ~t & n) + i + o | 0, a) + t | 0;
        }

        function c(e, t, r, n, i, o, a) {
          return s(e + (t & n | r & ~n) + i + o | 0, a) + t | 0;
        }

        function f(e, t, r, n, i, o, a) {
          return s(e + (t ^ r ^ n) + i + o | 0, a) + t | 0;
        }

        function h(e, t, r, n, i, o, a) {
          return s(e + (r ^ (t | ~n)) + i + o | 0, a) + t | 0;
        }

        e(n, r), n.prototype._update = function () {
          for (var e = a, t = 0; t < 16; ++t) {
            e[t] = this._block.readInt32LE(4 * t);
          }

          var r = this._a,
              n = this._b,
              i = this._c,
              o = this._d;
          n = h(n = h(n = h(n = h(n = f(n = f(n = f(n = f(n = c(n = c(n = c(n = c(n = u(n = u(n = u(n = u(n, i = u(i, o = u(o, r = u(r, n, i, o, e[0], 3614090360, 7), n, i, e[1], 3905402710, 12), r, n, e[2], 606105819, 17), o, r, e[3], 3250441966, 22), i = u(i, o = u(o, r = u(r, n, i, o, e[4], 4118548399, 7), n, i, e[5], 1200080426, 12), r, n, e[6], 2821735955, 17), o, r, e[7], 4249261313, 22), i = u(i, o = u(o, r = u(r, n, i, o, e[8], 1770035416, 7), n, i, e[9], 2336552879, 12), r, n, e[10], 4294925233, 17), o, r, e[11], 2304563134, 22), i = u(i, o = u(o, r = u(r, n, i, o, e[12], 1804603682, 7), n, i, e[13], 4254626195, 12), r, n, e[14], 2792965006, 17), o, r, e[15], 1236535329, 22), i = c(i, o = c(o, r = c(r, n, i, o, e[1], 4129170786, 5), n, i, e[6], 3225465664, 9), r, n, e[11], 643717713, 14), o, r, e[0], 3921069994, 20), i = c(i, o = c(o, r = c(r, n, i, o, e[5], 3593408605, 5), n, i, e[10], 38016083, 9), r, n, e[15], 3634488961, 14), o, r, e[4], 3889429448, 20), i = c(i, o = c(o, r = c(r, n, i, o, e[9], 568446438, 5), n, i, e[14], 3275163606, 9), r, n, e[3], 4107603335, 14), o, r, e[8], 1163531501, 20), i = c(i, o = c(o, r = c(r, n, i, o, e[13], 2850285829, 5), n, i, e[2], 4243563512, 9), r, n, e[7], 1735328473, 14), o, r, e[12], 2368359562, 20), i = f(i, o = f(o, r = f(r, n, i, o, e[5], 4294588738, 4), n, i, e[8], 2272392833, 11), r, n, e[11], 1839030562, 16), o, r, e[14], 4259657740, 23), i = f(i, o = f(o, r = f(r, n, i, o, e[1], 2763975236, 4), n, i, e[4], 1272893353, 11), r, n, e[7], 4139469664, 16), o, r, e[10], 3200236656, 23), i = f(i, o = f(o, r = f(r, n, i, o, e[13], 681279174, 4), n, i, e[0], 3936430074, 11), r, n, e[3], 3572445317, 16), o, r, e[6], 76029189, 23), i = f(i, o = f(o, r = f(r, n, i, o, e[9], 3654602809, 4), n, i, e[12], 3873151461, 11), r, n, e[15], 530742520, 16), o, r, e[2], 3299628645, 23), i = h(i, o = h(o, r = h(r, n, i, o, e[0], 4096336452, 6), n, i, e[7], 1126891415, 10), r, n, e[14], 2878612391, 15), o, r, e[5], 4237533241, 21), i = h(i, o = h(o, r = h(r, n, i, o, e[12], 1700485571, 6), n, i, e[3], 2399980690, 10), r, n, e[10], 4293915773, 15), o, r, e[1], 2240044497, 21), i = h(i, o = h(o, r = h(r, n, i, o, e[8], 1873313359, 6), n, i, e[15], 4264355552, 10), r, n, e[6], 2734768916, 15), o, r, e[13], 1309151649, 21), i = h(i, o = h(o, r = h(r, n, i, o, e[4], 4149444226, 6), n, i, e[11], 3174756917, 10), r, n, e[2], 718787259, 15), o, r, e[9], 3951481745, 21), this._a = this._a + r | 0, this._b = this._b + n | 0, this._c = this._c + i | 0, this._d = this._d + o | 0;
        }, n.prototype._digest = function () {
          this._block[this._blockOffset++] = 128, 56 < this._blockOffset && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
          var e = new t(16);
          return e.writeInt32LE(this._a, 0), e.writeInt32LE(this._b, 4), e.writeInt32LE(this._c, 8), e.writeInt32LE(this._d, 12), e;
        }, o.exports = n;
      }).call(this, i("buffer").Buffer);
    }, {
      buffer: 47,
      "hash-base": 85,
      inherits: 102
    }],
    106: [function (e, t, r) {
      var l = e("bn.js"),
          n = e("brorand");

      function i(e) {
        this.rand = e || new n.Rand();
      }

      (t.exports = i).create = function (e) {
        return new i(e);
      }, i.prototype._randbelow = function (e) {
        var t = e.bitLength(),
            r = Math.ceil(t / 8);

        do {
          var n = new l(this.rand.generate(r));
        } while (0 <= n.cmp(e));

        return n;
      }, i.prototype._randrange = function (e, t) {
        var r = t.sub(e);
        return e.add(this._randbelow(r));
      }, i.prototype.test = function (e, t, r) {
        var n = e.bitLength(),
            i = l.mont(e),
            o = new l(1).toRed(i);
        t || (t = Math.max(1, n / 48 | 0));

        for (var a = e.subn(1), s = 0; !a.testn(s); s++) {
          ;
        }

        for (var u = e.shrn(s), c = a.toRed(i); 0 < t; t--) {
          var f = this._randrange(new l(2), a);

          r && r(f);
          var h = f.toRed(i).redPow(u);

          if (0 !== h.cmp(o) && 0 !== h.cmp(c)) {
            for (var d = 1; d < s; d++) {
              if (0 === (h = h.redSqr()).cmp(o)) return !1;
              if (0 === h.cmp(c)) break;
            }

            if (d === s) return !1;
          }
        }

        return !0;
      }, i.prototype.getDivisor = function (e, t) {
        var r = e.bitLength(),
            n = l.mont(e),
            i = new l(1).toRed(n);
        t || (t = Math.max(1, r / 48 | 0));

        for (var o = e.subn(1), a = 0; !o.testn(a); a++) {
          ;
        }

        for (var s = e.shrn(a), u = o.toRed(n); 0 < t; t--) {
          var c = this._randrange(new l(2), o),
              f = e.gcd(c);

          if (0 !== f.cmpn(1)) return f;
          var h = c.toRed(n).redPow(s);

          if (0 !== h.cmp(i) && 0 !== h.cmp(u)) {
            for (var d = 1; d < a; d++) {
              if (0 === (h = h.redSqr()).cmp(i)) return h.fromRed().subn(1).gcd(e);
              if (0 === h.cmp(u)) break;
            }

            if (d === a) return (h = h.redSqr()).fromRed().subn(1).gcd(e);
          }
        }

        return !1;
      };
    }, {
      "bn.js": "BN",
      brorand: 16
    }],
    107: [function (e, t, r) {
      function n(e, t) {
        if (!e) throw new Error(t || "Assertion failed");
      }

      (t.exports = n).equal = function (e, t, r) {
        if (e != t) throw new Error(r || "Assertion failed: " + e + " != " + t);
      };
    }, {}],
    108: [function (e, t, r) {
      var n = r;

      function i(e) {
        return 1 === e.length ? "0" + e : e;
      }

      function o(e) {
        for (var t = "", r = 0; r < e.length; r++) {
          t += i(e[r].toString(16));
        }

        return t;
      }

      n.toArray = function (e, t) {
        if (Array.isArray(e)) return e.slice();
        if (!e) return [];
        var r = [];

        if ("string" != typeof e) {
          for (var n = 0; n < e.length; n++) {
            r[n] = 0 | e[n];
          }

          return r;
        }

        if ("hex" === t) for ((e = e.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e = "0" + e), n = 0; n < e.length; n += 2) {
          r.push(parseInt(e[n] + e[n + 1], 16));
        } else for (n = 0; n < e.length; n++) {
          var i = e.charCodeAt(n),
              o = i >> 8,
              a = 255 & i;
          o ? r.push(o, a) : r.push(a);
        }
        return r;
      }, n.zero2 = i, n.toHex = o, n.encode = function (e, t) {
        return "hex" === t ? o(e) : e;
      };
    }, {}],
    109: [function (e, t, r) {
      r.endianness = function () {
        return "LE";
      }, r.hostname = function () {
        return "undefined" != typeof location ? location.hostname : "";
      }, r.loadavg = function () {
        return [];
      }, r.uptime = function () {
        return 0;
      }, r.freemem = function () {
        return Number.MAX_VALUE;
      }, r.totalmem = function () {
        return Number.MAX_VALUE;
      }, r.cpus = function () {
        return [];
      }, r.type = function () {
        return "Browser";
      }, r.release = function () {
        return "undefined" != typeof navigator ? navigator.appVersion : "";
      }, r.networkInterfaces = r.getNetworkInterfaces = function () {
        return {};
      }, r.arch = function () {
        return "javascript";
      }, r.platform = function () {
        return "browser";
      }, r.tmpdir = r.tmpDir = function () {
        return "/tmp";
      }, r.EOL = "\n", r.homedir = function () {
        return "/";
      };
    }, {}],
    110: [function (e, t, r) {
      t.exports = {
        "2.16.840.1.101.3.4.1.1": "aes-128-ecb",
        "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
        "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
        "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
        "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
        "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
        "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
        "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
        "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
        "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
        "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
        "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
      };
    }, {}],
    111: [function (e, t, r) {
      var n = e("asn1.js");
      r.certificate = e("./certificate");
      var i = n.define("RSAPrivateKey", function () {
        this.seq().obj(this.key("version")["int"](), this.key("modulus")["int"](), this.key("publicExponent")["int"](), this.key("privateExponent")["int"](), this.key("prime1")["int"](), this.key("prime2")["int"](), this.key("exponent1")["int"](), this.key("exponent2")["int"](), this.key("coefficient")["int"]());
      });
      r.RSAPrivateKey = i;
      var o = n.define("RSAPublicKey", function () {
        this.seq().obj(this.key("modulus")["int"](), this.key("publicExponent")["int"]());
      });
      r.RSAPublicKey = o;
      var a = n.define("SubjectPublicKeyInfo", function () {
        this.seq().obj(this.key("algorithm").use(s), this.key("subjectPublicKey").bitstr());
      });
      r.PublicKey = a;
      var s = n.define("AlgorithmIdentifier", function () {
        this.seq().obj(this.key("algorithm").objid(), this.key("none").null_().optional(), this.key("curve").objid().optional(), this.key("params").seq().obj(this.key("p")["int"](), this.key("q")["int"](), this.key("g")["int"]()).optional());
      }),
          u = n.define("PrivateKeyInfo", function () {
        this.seq().obj(this.key("version")["int"](), this.key("algorithm").use(s), this.key("subjectPrivateKey").octstr());
      });
      r.PrivateKey = u;
      var c = n.define("EncryptedPrivateKeyInfo", function () {
        this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(), this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(), this.key("kdeparams").seq().obj(this.key("salt").octstr(), this.key("iters")["int"]())), this.key("cipher").seq().obj(this.key("algo").objid(), this.key("iv").octstr()))), this.key("subjectPrivateKey").octstr());
      });
      r.EncryptedPrivateKey = c;
      var f = n.define("DSAPrivateKey", function () {
        this.seq().obj(this.key("version")["int"](), this.key("p")["int"](), this.key("q")["int"](), this.key("g")["int"](), this.key("pub_key")["int"](), this.key("priv_key")["int"]());
      });
      r.DSAPrivateKey = f, r.DSAparam = n.define("DSAparam", function () {
        this["int"]();
      });
      var h = n.define("ECPrivateKey", function () {
        this.seq().obj(this.key("version")["int"](), this.key("privateKey").octstr(), this.key("parameters").optional().explicit(0).use(d), this.key("publicKey").optional().explicit(1).bitstr());
      });
      r.ECPrivateKey = h;
      var d = n.define("ECParameters", function () {
        this.choice({
          namedCurve: this.objid()
        });
      });
      r.signature = n.define("signature", function () {
        this.seq().obj(this.key("r")["int"](), this.key("s")["int"]());
      });
    }, {
      "./certificate": 112,
      "asn1.js": 1
    }],
    112: [function (e, t, r) {
      var n = e("asn1.js"),
          i = n.define("Time", function () {
        this.choice({
          utcTime: this.utctime(),
          generalTime: this.gentime()
        });
      }),
          o = n.define("AttributeTypeValue", function () {
        this.seq().obj(this.key("type").objid(), this.key("value").any());
      }),
          a = n.define("AlgorithmIdentifier", function () {
        this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional());
      }),
          s = n.define("SubjectPublicKeyInfo", function () {
        this.seq().obj(this.key("algorithm").use(a), this.key("subjectPublicKey").bitstr());
      }),
          u = n.define("RelativeDistinguishedName", function () {
        this.setof(o);
      }),
          c = n.define("RDNSequence", function () {
        this.seqof(u);
      }),
          f = n.define("Name", function () {
        this.choice({
          rdnSequence: this.use(c)
        });
      }),
          h = n.define("Validity", function () {
        this.seq().obj(this.key("notBefore").use(i), this.key("notAfter").use(i));
      }),
          d = n.define("Extension", function () {
        this.seq().obj(this.key("extnID").objid(), this.key("critical").bool().def(!1), this.key("extnValue").octstr());
      }),
          l = n.define("TBSCertificate", function () {
        this.seq().obj(this.key("version").explicit(0)["int"](), this.key("serialNumber")["int"](), this.key("signature").use(a), this.key("issuer").use(f), this.key("validity").use(h), this.key("subject").use(f), this.key("subjectPublicKeyInfo").use(s), this.key("issuerUniqueID").implicit(1).bitstr().optional(), this.key("subjectUniqueID").implicit(2).bitstr().optional(), this.key("extensions").explicit(3).seqof(d).optional());
      }),
          p = n.define("X509Certificate", function () {
        this.seq().obj(this.key("tbsCertificate").use(l), this.key("signatureAlgorithm").use(a), this.key("signatureValue").bitstr());
      });
      t.exports = p;
    }, {
      "asn1.js": 1
    }],
    113: [function (e, t, r) {
      (function (d) {
        var l = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m,
            p = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----/m,
            b = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m,
            y = e("evp_bytestokey"),
            m = e("browserify-aes");

        t.exports = function (e, t) {
          var r,
              n = e.toString(),
              i = n.match(l);

          if (i) {
            var o = "aes" + i[1],
                a = new d(i[2], "hex"),
                s = new d(i[3].replace(/[\r\n]/g, ""), "base64"),
                u = y(t, a.slice(0, 8), parseInt(i[1], 10)).key,
                c = [],
                f = m.createDecipheriv(o, u, a);
            c.push(f.update(s)), c.push(f["final"]()), r = d.concat(c);
          } else {
            var h = n.match(b);
            r = new d(h[2].replace(/[\r\n]/g, ""), "base64");
          }

          return {
            tag: n.match(p)[1],
            data: r
          };
        };
      }).call(this, e("buffer").Buffer);
    }, {
      "browserify-aes": 20,
      buffer: 47,
      evp_bytestokey: 84
    }],
    114: [function (t, r, e) {
      (function (v) {
        var g = t("./asn1"),
            w = t("./aesid.json"),
            _ = t("./fixProc"),
            A = t("browserify-aes"),
            x = t("pbkdf2");

        function e(e) {
          var t;
          "object" !== (void 0 === e ? "undefined" : _typeof(e)) || v.isBuffer(e) || (t = e.passphrase, e = e.key), "string" == typeof e && (e = new v(e));

          var r,
              n,
              i,
              o,
              a,
              s,
              u,
              c,
              f,
              h,
              d,
              l,
              p,
              b = _(e, t),
              y = b.tag,
              m = b.data;

          switch (y) {
            case "CERTIFICATE":
              n = g.certificate.decode(m, "der").tbsCertificate.subjectPublicKeyInfo;

            case "PUBLIC KEY":
              switch (n || (n = g.PublicKey.decode(m, "der")), r = n.algorithm.algorithm.join(".")) {
                case "1.2.840.113549.1.1.1":
                  return g.RSAPublicKey.decode(n.subjectPublicKey.data, "der");

                case "1.2.840.10045.2.1":
                  return n.subjectPrivateKey = n.subjectPublicKey, {
                    type: "ec",
                    data: n
                  };

                case "1.2.840.10040.4.1":
                  return n.algorithm.params.pub_key = g.DSAparam.decode(n.subjectPublicKey.data, "der"), {
                    type: "dsa",
                    data: n.algorithm.params
                  };

                default:
                  throw new Error("unknown key id " + r);
              }

              throw new Error("unknown key type " + y);

            case "ENCRYPTED PRIVATE KEY":
              m = g.EncryptedPrivateKey.decode(m, "der"), o = t, a = (i = m).algorithm.decrypt.kde.kdeparams.salt, s = parseInt(i.algorithm.decrypt.kde.kdeparams.iters.toString(), 10), u = w[i.algorithm.decrypt.cipher.algo.join(".")], c = i.algorithm.decrypt.cipher.iv, f = i.subjectPrivateKey, h = parseInt(u.split("-")[1], 10) / 8, d = x.pbkdf2Sync(o, a, s, h), l = A.createDecipheriv(u, d, c), (p = []).push(l.update(f)), p.push(l["final"]()), m = v.concat(p);

            case "PRIVATE KEY":
              switch (r = (n = g.PrivateKey.decode(m, "der")).algorithm.algorithm.join(".")) {
                case "1.2.840.113549.1.1.1":
                  return g.RSAPrivateKey.decode(n.subjectPrivateKey, "der");

                case "1.2.840.10045.2.1":
                  return {
                    curve: n.algorithm.curve,
                    privateKey: g.ECPrivateKey.decode(n.subjectPrivateKey, "der").privateKey
                  };

                case "1.2.840.10040.4.1":
                  return n.algorithm.params.priv_key = g.DSAparam.decode(n.subjectPrivateKey, "der"), {
                    type: "dsa",
                    params: n.algorithm.params
                  };

                default:
                  throw new Error("unknown key id " + r);
              }

              throw new Error("unknown key type " + y);

            case "RSA PUBLIC KEY":
              return g.RSAPublicKey.decode(m, "der");

            case "RSA PRIVATE KEY":
              return g.RSAPrivateKey.decode(m, "der");

            case "DSA PRIVATE KEY":
              return {
                type: "dsa",
                params: g.DSAPrivateKey.decode(m, "der")
              };

            case "EC PRIVATE KEY":
              return {
                curve: (m = g.ECPrivateKey.decode(m, "der")).parameters.value,
                privateKey: m.privateKey
              };

            default:
              throw new Error("unknown key type " + y);
          }
        }

        (r.exports = e).signature = g.signature;
      }).call(this, t("buffer").Buffer);
    }, {
      "./aesid.json": 110,
      "./asn1": 111,
      "./fixProc": 113,
      "browserify-aes": 20,
      buffer: 47,
      pbkdf2: 115
    }],
    115: [function (e, t, r) {
      r.pbkdf2 = e("./lib/async"), r.pbkdf2Sync = e("./lib/sync");
    }, {
      "./lib/async": 116,
      "./lib/sync": 119
    }],
    116: [function (e, t, r) {
      (function (c, f) {
        var h,
            d = e("./precondition"),
            l = e("./default-encoding"),
            p = e("./sync"),
            b = e("safe-buffer").Buffer,
            y = f.crypto && f.crypto.subtle,
            m = {
          sha: "SHA-1",
          "sha-1": "SHA-1",
          sha1: "SHA-1",
          sha256: "SHA-256",
          "sha-256": "SHA-256",
          sha384: "SHA-384",
          "sha-384": "SHA-384",
          "sha-512": "SHA-512",
          sha512: "SHA-512"
        },
            v = [];

        function g(e, t, r, n, i) {
          return y.importKey("raw", e, {
            name: "PBKDF2"
          }, !1, ["deriveBits"]).then(function (e) {
            return y.deriveBits({
              name: "PBKDF2",
              salt: t,
              iterations: r,
              hash: {
                name: i
              }
            }, e, n << 3);
          }).then(function (e) {
            return b.from(e);
          });
        }

        t.exports = function (t, r, n, i, o, a) {
          "function" == typeof o && (a = o, o = void 0);
          var e,
              s,
              u = m[(o = o || "sha1").toLowerCase()];
          if (!u || "function" != typeof f.Promise) return c.nextTick(function () {
            var e;

            try {
              e = p(t, r, n, i, o);
            } catch (e) {
              return a(e);
            }

            a(null, e);
          });
          if (d(t, r, n, i), "function" != typeof a) throw new Error("No callback provided to pbkdf2");
          b.isBuffer(t) || (t = b.from(t, l)), b.isBuffer(r) || (r = b.from(r, l)), e = function (e) {
            if (f.process && !f.process.browser) return Promise.resolve(!1);
            if (!y || !y.importKey || !y.deriveBits) return Promise.resolve(!1);
            if (void 0 !== v[e]) return v[e];
            var t = g(h = h || b.alloc(8), h, 10, 128, e).then(function () {
              return !0;
            })["catch"](function () {
              return !1;
            });
            return v[e] = t;
          }(u).then(function (e) {
            return e ? g(t, r, n, i, u) : p(t, r, n, i, o);
          }), s = a, e.then(function (e) {
            c.nextTick(function () {
              s(null, e);
            });
          }, function (e) {
            c.nextTick(function () {
              s(e);
            });
          });
        };
      }).call(this, e("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, {
      "./default-encoding": 117,
      "./precondition": 118,
      "./sync": 119,
      _process: 121,
      "safe-buffer": 149
    }],
    117: [function (e, r, t) {
      (function (e) {
        var t;
        e.browser ? t = "utf-8" : t = 6 <= parseInt(e.version.split(".")[0].slice(1), 10) ? "utf-8" : "binary";
        r.exports = t;
      }).call(this, e("_process"));
    }, {
      _process: 121
    }],
    118: [function (e, t, r) {
      (function (r) {
        var i = Math.pow(2, 30) - 1;

        function o(e, t) {
          if ("string" != typeof e && !r.isBuffer(e)) throw new TypeError(t + " must be a buffer or string");
        }

        t.exports = function (e, t, r, n) {
          if (o(e, "Password"), o(t, "Salt"), "number" != typeof r) throw new TypeError("Iterations not a number");
          if (r < 0) throw new TypeError("Bad iterations");
          if ("number" != typeof n) throw new TypeError("Key length not a number");
          if (n < 0 || i < n || n != n) throw new TypeError("Bad key length");
        };
      }).call(this, {
        isBuffer: e("../../is-buffer/index.js")
      });
    }, {
      "../../is-buffer/index.js": 103
    }],
    119: [function (e, t, r) {
      var f = e("create-hash/md5"),
          h = e("ripemd160"),
          d = e("sha.js"),
          y = e("./precondition"),
          m = e("./default-encoding"),
          v = e("safe-buffer").Buffer,
          l = v.alloc(128),
          g = {
        md5: 16,
        sha1: 20,
        sha224: 28,
        sha256: 32,
        sha384: 48,
        sha512: 64,
        rmd160: 20,
        ripemd160: 20
      };

      function w(e, t, r) {
        var n,
            i = "rmd160" === (n = e) || "ripemd160" === n ? h : "md5" === n ? f : function (e) {
          return d(n).update(e).digest();
        },
            o = "sha512" === e || "sha384" === e ? 128 : 64;
        t.length > o ? t = i(t) : t.length < o && (t = v.concat([t, l], o));

        for (var a = v.allocUnsafe(o + g[e]), s = v.allocUnsafe(o + g[e]), u = 0; u < o; u++) {
          a[u] = 54 ^ t[u], s[u] = 92 ^ t[u];
        }

        var c = v.allocUnsafe(o + r + 4);
        a.copy(c, 0, 0, o), this.ipad1 = c, this.ipad2 = a, this.opad = s, this.alg = e, this.blocksize = o, this.hash = i, this.size = g[e];
      }

      w.prototype.run = function (e, t) {
        return e.copy(t, this.blocksize), this.hash(t).copy(this.opad, this.blocksize), this.hash(this.opad);
      }, t.exports = function (e, t, r, n, i) {
        y(e, t, r, n), v.isBuffer(e) || (e = v.from(e, m)), v.isBuffer(t) || (t = v.from(t, m));
        var o = new w(i = i || "sha1", e, t.length),
            a = v.allocUnsafe(n),
            s = v.allocUnsafe(t.length + 4);
        t.copy(s, 0, 0, t.length);

        for (var u = 0, c = g[i], f = Math.ceil(n / c), h = 1; h <= f; h++) {
          s.writeUInt32BE(h, t.length);

          for (var d = o.run(s, o.ipad1), l = d, p = 1; p < r; p++) {
            l = o.run(l, o.ipad2);

            for (var b = 0; b < c; b++) {
              d[b] ^= l[b];
            }
          }

          d.copy(a, u), u += c;
        }

        return a;
      };
    }, {
      "./default-encoding": 117,
      "./precondition": 118,
      "create-hash/md5": 53,
      ripemd160: 148,
      "safe-buffer": 149,
      "sha.js": 151
    }],
    120: [function (e, t, r) {
      (function (s) {
        !s.version || 0 === s.version.indexOf("v0.") || 0 === s.version.indexOf("v1.") && 0 !== s.version.indexOf("v1.8.") ? t.exports = {
          nextTick: function nextTick(e, t, r, n) {
            if ("function" != typeof e) throw new TypeError('"callback" argument must be a function');
            var i,
                o,
                a = arguments.length;

            switch (a) {
              case 0:
              case 1:
                return s.nextTick(e);

              case 2:
                return s.nextTick(function () {
                  e.call(null, t);
                });

              case 3:
                return s.nextTick(function () {
                  e.call(null, t, r);
                });

              case 4:
                return s.nextTick(function () {
                  e.call(null, t, r, n);
                });

              default:
                for (i = new Array(a - 1), o = 0; o < i.length;) {
                  i[o++] = arguments[o];
                }

                return s.nextTick(function () {
                  e.apply(null, i);
                });
            }
          }
        } : t.exports = s;
      }).call(this, e("_process"));
    }, {
      _process: 121
    }],
    121: [function (e, t, r) {
      var n,
          i,
          o = t.exports = {};

      function a() {
        throw new Error("setTimeout has not been defined");
      }

      function s() {
        throw new Error("clearTimeout has not been defined");
      }

      function u(t) {
        if (n === setTimeout) return setTimeout(t, 0);
        if ((n === a || !n) && setTimeout) return n = setTimeout, setTimeout(t, 0);

        try {
          return n(t, 0);
        } catch (e) {
          try {
            return n.call(null, t, 0);
          } catch (e) {
            return n.call(this, t, 0);
          }
        }
      }

      !function () {
        try {
          n = "function" == typeof setTimeout ? setTimeout : a;
        } catch (e) {
          n = a;
        }

        try {
          i = "function" == typeof clearTimeout ? clearTimeout : s;
        } catch (e) {
          i = s;
        }
      }();
      var c,
          f = [],
          h = !1,
          d = -1;

      function l() {
        h && c && (h = !1, c.length ? f = c.concat(f) : d = -1, f.length && p());
      }

      function p() {
        if (!h) {
          var e = u(l);
          h = !0;

          for (var t = f.length; t;) {
            for (c = f, f = []; ++d < t;) {
              c && c[d].run();
            }

            d = -1, t = f.length;
          }

          c = null, h = !1, function (t) {
            if (i === clearTimeout) return clearTimeout(t);
            if ((i === s || !i) && clearTimeout) return i = clearTimeout, clearTimeout(t);

            try {
              i(t);
            } catch (e) {
              try {
                return i.call(null, t);
              } catch (e) {
                return i.call(this, t);
              }
            }
          }(e);
        }
      }

      function b(e, t) {
        this.fun = e, this.array = t;
      }

      function y() {}

      o.nextTick = function (e) {
        var t = new Array(arguments.length - 1);
        if (1 < arguments.length) for (var r = 1; r < arguments.length; r++) {
          t[r - 1] = arguments[r];
        }
        f.push(new b(e, t)), 1 !== f.length || h || u(p);
      }, b.prototype.run = function () {
        this.fun.apply(null, this.array);
      }, o.title = "browser", o.browser = !0, o.env = {}, o.argv = [], o.version = "", o.versions = {}, o.on = y, o.addListener = y, o.once = y, o.off = y, o.removeListener = y, o.removeAllListeners = y, o.emit = y, o.prependListener = y, o.prependOnceListener = y, o.listeners = function (e) {
        return [];
      }, o.binding = function (e) {
        throw new Error("process.binding is not supported");
      }, o.cwd = function () {
        return "/";
      }, o.chdir = function (e) {
        throw new Error("process.chdir is not supported");
      }, o.umask = function () {
        return 0;
      };
    }, {}],
    122: [function (e, t, r) {
      r.publicEncrypt = e("./publicEncrypt"), r.privateDecrypt = e("./privateDecrypt"), r.privateEncrypt = function (e, t) {
        return r.publicEncrypt(e, t, !0);
      }, r.publicDecrypt = function (e, t) {
        return r.privateDecrypt(e, t, !0);
      };
    }, {
      "./privateDecrypt": 124,
      "./publicEncrypt": 125
    }],
    123: [function (e, t, r) {
      (function (o) {
        var a = e("create-hash");

        function s(e) {
          var t = new o(4);
          return t.writeUInt32BE(e, 0), t;
        }

        t.exports = function (e, t) {
          for (var r, n = new o(""), i = 0; n.length < t;) {
            r = s(i++), n = o.concat([n, a("sha1").update(e).update(r).digest()]);
          }

          return n.slice(0, t);
        };
      }).call(this, e("buffer").Buffer);
    }, {
      buffer: 47,
      "create-hash": 52
    }],
    124: [function (e, t, r) {
      (function (f) {
        var u = e("parse-asn1"),
            h = e("./mgf"),
            d = e("./xor"),
            c = e("bn.js"),
            l = e("browserify-rsa"),
            p = e("create-hash"),
            b = e("./withPublic");

        t.exports = function (e, t, r) {
          var n;
          n = e.padding ? e.padding : r ? 1 : 4;
          var i,
              o = u(e),
              a = o.modulus.byteLength();
          if (t.length > a || 0 <= new c(t).cmp(o.modulus)) throw new Error("decryption error");
          i = r ? b(new c(t), o) : l(t, o);
          var s = new f(a - i.length);
          if (s.fill(0), i = f.concat([s, i], a), 4 === n) return function (e, t) {
            e.modulus;
            var r = e.modulus.byteLength(),
                n = (t.length, p("sha1").update(new f("")).digest()),
                i = n.length;
            if (0 !== t[0]) throw new Error("decryption error");
            var o = t.slice(1, i + 1),
                a = t.slice(i + 1),
                s = d(o, h(a, i)),
                u = d(a, h(s, r - i - 1));
            if (function (e, t) {
              e = new f(e), t = new f(t);
              var r = 0,
                  n = e.length;
              e.length !== t.length && (r++, n = Math.min(e.length, t.length));
              var i = -1;

              for (; ++i < n;) {
                r += e[i] ^ t[i];
              }

              return r;
            }(n, u.slice(0, i))) throw new Error("decryption error");
            var c = i;

            for (; 0 === u[c];) {
              c++;
            }

            if (1 !== u[c++]) throw new Error("decryption error");
            return u.slice(c);
          }(o, i);
          if (1 === n) return function (e, t, r) {
            var n = t.slice(0, 2),
                i = 2,
                o = 0;

            for (; 0 !== t[i++];) {
              if (i >= t.length) {
                o++;
                break;
              }
            }

            var a = t.slice(2, i - 1);
            t.slice(i - 1, i);
            ("0002" !== n.toString("hex") && !r || "0001" !== n.toString("hex") && r) && o++;
            a.length < 8 && o++;
            if (o) throw new Error("decryption error");
            return t.slice(i);
          }(0, i, r);
          if (3 === n) return i;
          throw new Error("unknown padding");
        };
      }).call(this, e("buffer").Buffer);
    }, {
      "./mgf": 123,
      "./withPublic": 126,
      "./xor": 127,
      "bn.js": "BN",
      "browserify-rsa": 38,
      buffer: 47,
      "create-hash": 52,
      "parse-asn1": 114
    }],
    125: [function (e, t, r) {
      (function (d) {
        var a = e("parse-asn1"),
            l = e("randombytes"),
            p = e("create-hash"),
            b = e("./mgf"),
            y = e("./xor"),
            m = e("bn.js"),
            s = e("./withPublic"),
            u = e("browserify-rsa");

        t.exports = function (e, t, r) {
          var n;
          n = e.padding ? e.padding : r ? 1 : 4;
          var i,
              o = a(e);
          if (4 === n) i = function (e, t) {
            var r = e.modulus.byteLength(),
                n = t.length,
                i = p("sha1").update(new d("")).digest(),
                o = i.length,
                a = 2 * o;
            if (r - a - 2 < n) throw new Error("message too long");
            var s = new d(r - n - a - 2);
            s.fill(0);
            var u = r - o - 1,
                c = l(o),
                f = y(d.concat([i, s, new d([1]), t], u), b(c, u)),
                h = y(c, b(f, o));
            return new m(d.concat([new d([0]), h, f], r));
          }(o, t);else if (1 === n) i = function (e, t, r) {
            var n,
                i = t.length,
                o = e.modulus.byteLength();
            if (o - 11 < i) throw new Error("message too long");
            r ? (n = new d(o - i - 3)).fill(255) : n = function (e, t) {
              var r,
                  n = new d(e),
                  i = 0,
                  o = l(2 * e),
                  a = 0;

              for (; i < e;) {
                a === o.length && (o = l(2 * e), a = 0), (r = o[a++]) && (n[i++] = r);
              }

              return n;
            }(o - i - 3);
            return new m(d.concat([new d([0, r ? 1 : 2]), n, new d([0]), t], o));
          }(o, t, r);else {
            if (3 !== n) throw new Error("unknown padding");
            if (0 <= (i = new m(t)).cmp(o.modulus)) throw new Error("data too long for modulus");
          }
          return r ? u(i, o) : s(i, o);
        };
      }).call(this, e("buffer").Buffer);
    }, {
      "./mgf": 123,
      "./withPublic": 126,
      "./xor": 127,
      "bn.js": "BN",
      "browserify-rsa": 38,
      buffer: 47,
      "create-hash": 52,
      "parse-asn1": 114,
      randombytes: 132
    }],
    126: [function (e, t, r) {
      (function (r) {
        var n = e("bn.js");

        t.exports = function (e, t) {
          return new r(e.toRed(n.mont(t.modulus)).redPow(new n(t.publicExponent)).fromRed().toArray());
        };
      }).call(this, e("buffer").Buffer);
    }, {
      "bn.js": "BN",
      buffer: 47
    }],
    127: [function (e, t, r) {
      t.exports = function (e, t) {
        for (var r = e.length, n = -1; ++n < r;) {
          e[n] ^= t[n];
        }

        return e;
      };
    }, {}],
    128: [function (e, C, B) {
      (function (T) {
        !function (e) {
          var t = "object" == (void 0 === B ? "undefined" : _typeof(B)) && B && !B.nodeType && B,
              r = "object" == (void 0 === C ? "undefined" : _typeof(C)) && C && !C.nodeType && C,
              n = "object" == (void 0 === T ? "undefined" : _typeof(T)) && T;
          n.global !== n && n.window !== n && n.self !== n || (e = n);
          var i,
              o,
              m = 2147483647,
              v = 36,
              g = 1,
              w = 26,
              a = 38,
              s = 700,
              _ = 72,
              A = 128,
              x = "-",
              u = /^xn--/,
              c = /[^\x20-\x7E]/,
              f = /[\x2E\u3002\uFF0E\uFF61]/g,
              h = {
            overflow: "Overflow: input needs wider integers to process",
            "not-basic": "Illegal input >= 0x80 (not a basic code point)",
            "invalid-input": "Invalid input"
          },
              d = v - g,
              M = Math.floor,
              k = String.fromCharCode;

          function E(e) {
            throw new RangeError(h[e]);
          }

          function l(e, t) {
            for (var r = e.length, n = []; r--;) {
              n[r] = t(e[r]);
            }

            return n;
          }

          function p(e, t) {
            var r = e.split("@"),
                n = "";
            return 1 < r.length && (n = r[0] + "@", e = r[1]), n + l((e = e.replace(f, ".")).split("."), t).join(".");
          }

          function S(e) {
            for (var t, r, n = [], i = 0, o = e.length; i < o;) {
              55296 <= (t = e.charCodeAt(i++)) && t <= 56319 && i < o ? 56320 == (64512 & (r = e.charCodeAt(i++))) ? n.push(((1023 & t) << 10) + (1023 & r) + 65536) : (n.push(t), i--) : n.push(t);
            }

            return n;
          }

          function U(e) {
            return l(e, function (e) {
              var t = "";
              return 65535 < e && (t += k((e -= 65536) >>> 10 & 1023 | 55296), e = 56320 | 1023 & e), t += k(e);
            }).join("");
          }

          function j(e, t) {
            return e + 22 + 75 * (e < 26) - ((0 != t) << 5);
          }

          function I(e, t, r) {
            var n = 0;

            for (e = r ? M(e / s) : e >> 1, e += M(e / t); d * w >> 1 < e; n += v) {
              e = M(e / d);
            }

            return M(n + (d + 1) * e / (e + a));
          }

          function b(e) {
            var t,
                r,
                n,
                i,
                o,
                a,
                s,
                u,
                c,
                f,
                h,
                d = [],
                l = e.length,
                p = 0,
                b = A,
                y = _;

            for ((r = e.lastIndexOf(x)) < 0 && (r = 0), n = 0; n < r; ++n) {
              128 <= e.charCodeAt(n) && E("not-basic"), d.push(e.charCodeAt(n));
            }

            for (i = 0 < r ? r + 1 : 0; i < l;) {
              for (o = p, a = 1, s = v; l <= i && E("invalid-input"), h = e.charCodeAt(i++), (v <= (u = h - 48 < 10 ? h - 22 : h - 65 < 26 ? h - 65 : h - 97 < 26 ? h - 97 : v) || u > M((m - p) / a)) && E("overflow"), p += u * a, !(u < (c = s <= y ? g : y + w <= s ? w : s - y)); s += v) {
                a > M(m / (f = v - c)) && E("overflow"), a *= f;
              }

              y = I(p - o, t = d.length + 1, 0 == o), M(p / t) > m - b && E("overflow"), b += M(p / t), p %= t, d.splice(p++, 0, b);
            }

            return U(d);
          }

          function y(e) {
            var t,
                r,
                n,
                i,
                o,
                a,
                s,
                u,
                c,
                f,
                h,
                d,
                l,
                p,
                b,
                y = [];

            for (d = (e = S(e)).length, t = A, o = _, a = r = 0; a < d; ++a) {
              (h = e[a]) < 128 && y.push(k(h));
            }

            for (n = i = y.length, i && y.push(x); n < d;) {
              for (s = m, a = 0; a < d; ++a) {
                t <= (h = e[a]) && h < s && (s = h);
              }

              for (s - t > M((m - r) / (l = n + 1)) && E("overflow"), r += (s - t) * l, t = s, a = 0; a < d; ++a) {
                if ((h = e[a]) < t && ++r > m && E("overflow"), h == t) {
                  for (u = r, c = v; !(u < (f = c <= o ? g : o + w <= c ? w : c - o)); c += v) {
                    b = u - f, p = v - f, y.push(k(j(f + b % p, 0))), u = M(b / p);
                  }

                  y.push(k(j(u, 0))), o = I(r, l, n == i), r = 0, ++n;
                }
              }

              ++r, ++t;
            }

            return y.join("");
          }

          if (i = {
            version: "1.4.1",
            ucs2: {
              decode: S,
              encode: U
            },
            decode: b,
            encode: y,
            toASCII: function toASCII(e) {
              return p(e, function (e) {
                return c.test(e) ? "xn--" + y(e) : e;
              });
            },
            toUnicode: function toUnicode(e) {
              return p(e, function (e) {
                return u.test(e) ? b(e.slice(4).toLowerCase()) : e;
              });
            }
          }, "function" == typeof define && "object" == _typeof(define.amd) && define.amd) define("punycode", function () {
            return i;
          });else if (t && r) {
            if (C.exports == t) r.exports = i;else for (o in i) {
              i.hasOwnProperty(o) && (t[o] = i[o]);
            }
          } else e.punycode = i;
        }(this);
      }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, {}],
    129: [function (e, t, r) {
      t.exports = function (e, t, r, n) {
        t = t || "&", r = r || "=";
        var i = {};
        if ("string" != typeof e || 0 === e.length) return i;
        var o = /\+/g;
        e = e.split(t);
        var a = 1e3;
        n && "number" == typeof n.maxKeys && (a = n.maxKeys);
        var s,
            u,
            c = e.length;
        0 < a && a < c && (c = a);

        for (var f = 0; f < c; ++f) {
          var h,
              d,
              l,
              p,
              b = e[f].replace(o, "%20"),
              y = b.indexOf(r);
          0 <= y ? (h = b.substr(0, y), d = b.substr(y + 1)) : (h = b, d = ""), l = decodeURIComponent(h), p = decodeURIComponent(d), s = i, u = l, Object.prototype.hasOwnProperty.call(s, u) ? m(i[l]) ? i[l].push(p) : i[l] = [i[l], p] : i[l] = p;
        }

        return i;
      };

      var m = Array.isArray || function (e) {
        return "[object Array]" === Object.prototype.toString.call(e);
      };
    }, {}],
    130: [function (e, t, r) {
      var o = function o(e) {
        switch (void 0 === e ? "undefined" : _typeof(e)) {
          case "string":
            return e;

          case "boolean":
            return e ? "true" : "false";

          case "number":
            return isFinite(e) ? e : "";

          default:
            return "";
        }
      };

      t.exports = function (r, n, i, e) {
        return n = n || "&", i = i || "=", null === r && (r = void 0), "object" === (void 0 === r ? "undefined" : _typeof(r)) ? s(u(r), function (e) {
          var t = encodeURIComponent(o(e)) + i;
          return a(r[e]) ? s(r[e], function (e) {
            return t + encodeURIComponent(o(e));
          }).join(n) : t + encodeURIComponent(o(r[e]));
        }).join(n) : e ? encodeURIComponent(o(e)) + i + encodeURIComponent(o(r)) : "";
      };

      var a = Array.isArray || function (e) {
        return "[object Array]" === Object.prototype.toString.call(e);
      };

      function s(e, t) {
        if (e.map) return e.map(t);

        for (var r = [], n = 0; n < e.length; n++) {
          r.push(t(e[n], n));
        }

        return r;
      }

      var u = Object.keys || function (e) {
        var t = [];

        for (var r in e) {
          Object.prototype.hasOwnProperty.call(e, r) && t.push(r);
        }

        return t;
      };
    }, {}],
    131: [function (e, t, r) {
      r.decode = r.parse = e("./decode"), r.encode = r.stringify = e("./encode");
    }, {
      "./decode": 129,
      "./encode": 130
    }],
    132: [function (e, t, r) {
      (function (i, o) {
        var a = e("safe-buffer").Buffer,
            s = o.crypto || o.msCrypto;
        s && s.getRandomValues ? t.exports = function (e, t) {
          if (65536 < e) throw new Error("requested too many random bytes");
          var r = new o.Uint8Array(e);
          0 < e && s.getRandomValues(r);
          var n = a.from(r.buffer);
          if ("function" == typeof t) return i.nextTick(function () {
            t(null, n);
          });
          return n;
        } : t.exports = function () {
          throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
        };
      }).call(this, e("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, {
      _process: 121,
      "safe-buffer": 149
    }],
    133: [function (r, e, l) {
      (function (a, i) {
        function e() {
          throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
        }

        var t = r("safe-buffer"),
            s = r("randombytes"),
            o = t.Buffer,
            n = t.kMaxLength,
            u = i.crypto || i.msCrypto,
            c = Math.pow(2, 32) - 1;

        function f(e, t) {
          if ("number" != typeof e || e != e) throw new TypeError("offset must be a number");
          if (c < e || e < 0) throw new TypeError("offset must be a uint32");
          if (n < e || t < e) throw new RangeError("offset out of range");
        }

        function h(e, t, r) {
          if ("number" != typeof e || e != e) throw new TypeError("size must be a number");
          if (c < e || e < 0) throw new TypeError("size must be a uint32");
          if (r < e + t || n < e) throw new RangeError("buffer too small");
        }

        function d(r, n, e, i) {
          if (a.browser) {
            var t = r.buffer,
                o = new Uint8Array(t, n, e);
            return u.getRandomValues(o), i ? void a.nextTick(function () {
              i(null, r);
            }) : r;
          }

          if (!i) return s(e).copy(r, n), r;
          s(e, function (e, t) {
            if (e) return i(e);
            t.copy(r, n), i(null, r);
          });
        }

        u && u.getRandomValues || !a.browser ? (l.randomFill = function (e, t, r, n) {
          if (!(o.isBuffer(e) || e instanceof i.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
          if ("function" == typeof t) n = t, t = 0, r = e.length;else if ("function" == typeof r) n = r, r = e.length - t;else if ("function" != typeof n) throw new TypeError('"cb" argument must be a function');
          return f(t, e.length), h(r, t, e.length), d(e, t, r, n);
        }, l.randomFillSync = function (e, t, r) {
          void 0 === t && (t = 0);
          if (!(o.isBuffer(e) || e instanceof i.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
          f(t, e.length), void 0 === r && (r = e.length - t);
          return h(r, t, e.length), d(e, t, r);
        }) : (l.randomFill = e, l.randomFillSync = e);
      }).call(this, r("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, {
      _process: 121,
      randombytes: 132,
      "safe-buffer": 149
    }],
    134: [function (e, t, r) {
      t.exports = e("./lib/_stream_duplex.js");
    }, {
      "./lib/_stream_duplex.js": 135
    }],
    135: [function (e, t, r) {
      var n = e("process-nextick-args"),
          i = Object.keys || function (e) {
        var t = [];

        for (var r in e) {
          t.push(r);
        }

        return t;
      };

      t.exports = h;
      var o = e("core-util-is");
      o.inherits = e("inherits");
      var a = e("./_stream_readable"),
          s = e("./_stream_writable");
      o.inherits(h, a);

      for (var u = i(s.prototype), c = 0; c < u.length; c++) {
        var f = u[c];
        h.prototype[f] || (h.prototype[f] = s.prototype[f]);
      }

      function h(e) {
        if (!(this instanceof h)) return new h(e);
        a.call(this, e), s.call(this, e), e && !1 === e.readable && (this.readable = !1), e && !1 === e.writable && (this.writable = !1), this.allowHalfOpen = !0, e && !1 === e.allowHalfOpen && (this.allowHalfOpen = !1), this.once("end", d);
      }

      function d() {
        this.allowHalfOpen || this._writableState.ended || n.nextTick(l, this);
      }

      function l(e) {
        e.end();
      }

      Object.defineProperty(h.prototype, "writableHighWaterMark", {
        enumerable: !1,
        get: function get() {
          return this._writableState.highWaterMark;
        }
      }), Object.defineProperty(h.prototype, "destroyed", {
        get: function get() {
          return void 0 !== this._readableState && void 0 !== this._writableState && this._readableState.destroyed && this._writableState.destroyed;
        },
        set: function set(e) {
          void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = e, this._writableState.destroyed = e);
        }
      }), h.prototype._destroy = function (e, t) {
        this.push(null), this.end(), n.nextTick(t, e);
      };
    }, {
      "./_stream_readable": 137,
      "./_stream_writable": 139,
      "core-util-is": 50,
      inherits: 102,
      "process-nextick-args": 120
    }],
    136: [function (e, t, r) {
      t.exports = o;
      var n = e("./_stream_transform"),
          i = e("core-util-is");

      function o(e) {
        if (!(this instanceof o)) return new o(e);
        n.call(this, e);
      }

      i.inherits = e("inherits"), i.inherits(o, n), o.prototype._transform = function (e, t, r) {
        r(null, e);
      };
    }, {
      "./_stream_transform": 138,
      "core-util-is": 50,
      inherits: 102
    }],
    137: [function (B, N, e) {
      (function (y, e) {
        var m = B("process-nextick-args");
        N.exports = d;
        var a,
            v = B("isarray");
        d.ReadableState = o;
        B("events").EventEmitter;

        var g = function g(e, t) {
          return e.listeners(t).length;
        },
            i = B("./internal/streams/stream"),
            c = B("safe-buffer").Buffer,
            f = e.Uint8Array || function () {};

        var t = B("core-util-is");
        t.inherits = B("inherits");
        var r = B("util"),
            w = void 0;
        w = r && r.debuglog ? r.debuglog("stream") : function () {};
        var s,
            u = B("./internal/streams/BufferList"),
            n = B("./internal/streams/destroy");
        t.inherits(d, i);
        var h = ["error", "close", "destroy", "pause", "resume"];

        function o(e, t) {
          e = e || {};
          var r = t instanceof (a = a || B("./_stream_duplex"));
          this.objectMode = !!e.objectMode, r && (this.objectMode = this.objectMode || !!e.readableObjectMode);
          var n = e.highWaterMark,
              i = e.readableHighWaterMark,
              o = this.objectMode ? 16 : 16384;
          this.highWaterMark = n || 0 === n ? n : r && (i || 0 === i) ? i : o, this.highWaterMark = Math.floor(this.highWaterMark), this.buffer = new u(), this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, this.destroyed = !1, this.defaultEncoding = e.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, this.encoding = null, e.encoding && (s || (s = B("string_decoder/").StringDecoder), this.decoder = new s(e.encoding), this.encoding = e.encoding);
        }

        function d(e) {
          if (a = a || B("./_stream_duplex"), !(this instanceof d)) return new d(e);
          this._readableState = new o(e, this), this.readable = !0, e && ("function" == typeof e.read && (this._read = e.read), "function" == typeof e.destroy && (this._destroy = e.destroy)), i.call(this);
        }

        function l(e, t, r, n, i) {
          var o,
              a,
              s,
              u = e._readableState;
          null === t ? (u.reading = !1, function (e, t) {
            if (t.ended) return;

            if (t.decoder) {
              var r = t.decoder.end();
              r && r.length && (t.buffer.push(r), t.length += t.objectMode ? 1 : r.length);
            }

            t.ended = !0, A(e);
          }(e, u)) : (i || (o = function (e, t) {
            var r;
            n = t, c.isBuffer(n) || n instanceof f || "string" == typeof t || void 0 === t || e.objectMode || (r = new TypeError("Invalid non-string/buffer chunk"));
            var n;
            return r;
          }(u, t)), o ? e.emit("error", o) : u.objectMode || t && 0 < t.length ? ("string" == typeof t || u.objectMode || Object.getPrototypeOf(t) === c.prototype || (a = t, t = c.from(a)), n ? u.endEmitted ? e.emit("error", new Error("stream.unshift() after end event")) : p(e, u, t, !0) : u.ended ? e.emit("error", new Error("stream.push() after EOF")) : (u.reading = !1, u.decoder && !r ? (t = u.decoder.write(t), u.objectMode || 0 !== t.length ? p(e, u, t, !1) : M(e, u)) : p(e, u, t, !1))) : n || (u.reading = !1));
          return !(s = u).ended && (s.needReadable || s.length < s.highWaterMark || 0 === s.length);
        }

        function p(e, t, r, n) {
          t.flowing && 0 === t.length && !t.sync ? (e.emit("data", r), e.read(0)) : (t.length += t.objectMode ? 1 : r.length, n ? t.buffer.unshift(r) : t.buffer.push(r), t.needReadable && A(e)), M(e, t);
        }

        Object.defineProperty(d.prototype, "destroyed", {
          get: function get() {
            return void 0 !== this._readableState && this._readableState.destroyed;
          },
          set: function set(e) {
            this._readableState && (this._readableState.destroyed = e);
          }
        }), d.prototype.destroy = n.destroy, d.prototype._undestroy = n.undestroy, d.prototype._destroy = function (e, t) {
          this.push(null), t(e);
        }, d.prototype.push = function (e, t) {
          var r,
              n = this._readableState;
          return n.objectMode ? r = !0 : "string" == typeof e && ((t = t || n.defaultEncoding) !== n.encoding && (e = c.from(e, t), t = ""), r = !0), l(this, e, t, !1, r);
        }, d.prototype.unshift = function (e) {
          return l(this, e, null, !0, !1);
        }, d.prototype.isPaused = function () {
          return !1 === this._readableState.flowing;
        }, d.prototype.setEncoding = function (e) {
          return s || (s = B("string_decoder/").StringDecoder), this._readableState.decoder = new s(e), this._readableState.encoding = e, this;
        };
        var b = 8388608;

        function _(e, t) {
          return e <= 0 || 0 === t.length && t.ended ? 0 : t.objectMode ? 1 : e != e ? t.flowing && t.length ? t.buffer.head.data.length : t.length : (e > t.highWaterMark && (t.highWaterMark = (b <= (r = e) ? r = b : (r--, r |= r >>> 1, r |= r >>> 2, r |= r >>> 4, r |= r >>> 8, r |= r >>> 16, r++), r)), e <= t.length ? e : t.ended ? t.length : (t.needReadable = !0, 0));
          var r;
        }

        function A(e) {
          var t = e._readableState;
          t.needReadable = !1, t.emittedReadable || (w("emitReadable", t.flowing), t.emittedReadable = !0, t.sync ? m.nextTick(x, e) : x(e));
        }

        function x(e) {
          w("emit readable"), e.emit("readable"), U(e);
        }

        function M(e, t) {
          t.readingMore || (t.readingMore = !0, m.nextTick(k, e, t));
        }

        function k(e, t) {
          for (var r = t.length; !t.reading && !t.flowing && !t.ended && t.length < t.highWaterMark && (w("maybeReadMore read 0"), e.read(0), r !== t.length);) {
            r = t.length;
          }

          t.readingMore = !1;
        }

        function E(e) {
          w("readable nexttick read 0"), e.read(0);
        }

        function S(e, t) {
          t.reading || (w("resume read 0"), e.read(0)), t.resumeScheduled = !1, t.awaitDrain = 0, e.emit("resume"), U(e), t.flowing && !t.reading && e.read(0);
        }

        function U(e) {
          var t = e._readableState;

          for (w("flow", t.flowing); t.flowing && null !== e.read();) {
            ;
          }
        }

        function j(e, t) {
          return 0 === t.length ? null : (t.objectMode ? r = t.buffer.shift() : !e || e >= t.length ? (r = t.decoder ? t.buffer.join("") : 1 === t.buffer.length ? t.buffer.head.data : t.buffer.concat(t.length), t.buffer.clear()) : r = function (e, t, r) {
            var n;
            e < t.head.data.length ? (n = t.head.data.slice(0, e), t.head.data = t.head.data.slice(e)) : n = e === t.head.data.length ? t.shift() : r ? function (e, t) {
              var r = t.head,
                  n = 1,
                  i = r.data;
              e -= i.length;

              for (; r = r.next;) {
                var o = r.data,
                    a = e > o.length ? o.length : e;

                if (a === o.length ? i += o : i += o.slice(0, e), 0 === (e -= a)) {
                  a === o.length ? (++n, r.next ? t.head = r.next : t.head = t.tail = null) : (t.head = r).data = o.slice(a);
                  break;
                }

                ++n;
              }

              return t.length -= n, i;
            }(e, t) : function (e, t) {
              var r = c.allocUnsafe(e),
                  n = t.head,
                  i = 1;
              n.data.copy(r), e -= n.data.length;

              for (; n = n.next;) {
                var o = n.data,
                    a = e > o.length ? o.length : e;

                if (o.copy(r, r.length - e, 0, a), 0 === (e -= a)) {
                  a === o.length ? (++i, n.next ? t.head = n.next : t.head = t.tail = null) : (t.head = n).data = o.slice(a);
                  break;
                }

                ++i;
              }

              return t.length -= i, r;
            }(e, t);
            return n;
          }(e, t.buffer, t.decoder), r);
          var r;
        }

        function I(e) {
          var t = e._readableState;
          if (0 < t.length) throw new Error('"endReadable()" called on non-empty stream');
          t.endEmitted || (t.ended = !0, m.nextTick(T, t, e));
        }

        function T(e, t) {
          e.endEmitted || 0 !== e.length || (e.endEmitted = !0, t.readable = !1, t.emit("end"));
        }

        function C(e, t) {
          for (var r = 0, n = e.length; r < n; r++) {
            if (e[r] === t) return r;
          }

          return -1;
        }

        d.prototype.read = function (e) {
          w("read", e), e = parseInt(e, 10);
          var t = this._readableState,
              r = e;
          if (0 !== e && (t.emittedReadable = !1), 0 === e && t.needReadable && (t.length >= t.highWaterMark || t.ended)) return w("read: emitReadable", t.length, t.ended), 0 === t.length && t.ended ? I(this) : A(this), null;
          if (0 === (e = _(e, t)) && t.ended) return 0 === t.length && I(this), null;
          var n,
              i = t.needReadable;
          return w("need readable", i), (0 === t.length || t.length - e < t.highWaterMark) && w("length less than watermark", i = !0), t.ended || t.reading ? w("reading or ended", i = !1) : i && (w("do read"), t.reading = !0, t.sync = !0, 0 === t.length && (t.needReadable = !0), this._read(t.highWaterMark), t.sync = !1, t.reading || (e = _(r, t))), null === (n = 0 < e ? j(e, t) : null) ? (t.needReadable = !0, e = 0) : t.length -= e, 0 === t.length && (t.ended || (t.needReadable = !0), r !== e && t.ended && I(this)), null !== n && this.emit("data", n), n;
        }, d.prototype._read = function (e) {
          this.emit("error", new Error("_read() is not implemented"));
        }, d.prototype.pipe = function (r, e) {
          var n = this,
              i = this._readableState;

          switch (i.pipesCount) {
            case 0:
              i.pipes = r;
              break;

            case 1:
              i.pipes = [i.pipes, r];
              break;

            default:
              i.pipes.push(r);
          }

          i.pipesCount += 1, w("pipe count=%d opts=%j", i.pipesCount, e);
          var t = (!e || !1 !== e.end) && r !== y.stdout && r !== y.stderr ? a : b;

          function o(e, t) {
            w("onunpipe"), e === n && t && !1 === t.hasUnpiped && (t.hasUnpiped = !0, w("cleanup"), r.removeListener("close", l), r.removeListener("finish", p), r.removeListener("drain", u), r.removeListener("error", d), r.removeListener("unpipe", o), n.removeListener("end", a), n.removeListener("end", b), n.removeListener("data", h), c = !0, !i.awaitDrain || r._writableState && !r._writableState.needDrain || u());
          }

          function a() {
            w("onend"), r.end();
          }

          i.endEmitted ? m.nextTick(t) : n.once("end", t), r.on("unpipe", o);
          var s,
              u = (s = n, function () {
            var e = s._readableState;
            w("pipeOnDrain", e.awaitDrain), e.awaitDrain && e.awaitDrain--, 0 === e.awaitDrain && g(s, "data") && (e.flowing = !0, U(s));
          });
          r.on("drain", u);
          var c = !1;
          var f = !1;

          function h(e) {
            w("ondata"), (f = !1) !== r.write(e) || f || ((1 === i.pipesCount && i.pipes === r || 1 < i.pipesCount && -1 !== C(i.pipes, r)) && !c && (w("false write response, pause", n._readableState.awaitDrain), n._readableState.awaitDrain++, f = !0), n.pause());
          }

          function d(e) {
            w("onerror", e), b(), r.removeListener("error", d), 0 === g(r, "error") && r.emit("error", e);
          }

          function l() {
            r.removeListener("finish", p), b();
          }

          function p() {
            w("onfinish"), r.removeListener("close", l), b();
          }

          function b() {
            w("unpipe"), n.unpipe(r);
          }

          return n.on("data", h), function (e, t, r) {
            if ("function" == typeof e.prependListener) return e.prependListener(t, r);
            e._events && e._events[t] ? v(e._events[t]) ? e._events[t].unshift(r) : e._events[t] = [r, e._events[t]] : e.on(t, r);
          }(r, "error", d), r.once("close", l), r.once("finish", p), r.emit("pipe", n), i.flowing || (w("pipe resume"), n.resume()), r;
        }, d.prototype.unpipe = function (e) {
          var t = this._readableState,
              r = {
            hasUnpiped: !1
          };
          if (0 === t.pipesCount) return this;
          if (1 === t.pipesCount) return e && e !== t.pipes || (e || (e = t.pipes), t.pipes = null, t.pipesCount = 0, t.flowing = !1, e && e.emit("unpipe", this, r)), this;

          if (!e) {
            var n = t.pipes,
                i = t.pipesCount;
            t.pipes = null, t.pipesCount = 0, t.flowing = !1;

            for (var o = 0; o < i; o++) {
              n[o].emit("unpipe", this, r);
            }

            return this;
          }

          var a = C(t.pipes, e);
          return -1 === a || (t.pipes.splice(a, 1), t.pipesCount -= 1, 1 === t.pipesCount && (t.pipes = t.pipes[0]), e.emit("unpipe", this, r)), this;
        }, d.prototype.addListener = d.prototype.on = function (e, t) {
          var r = i.prototype.on.call(this, e, t);
          if ("data" === e) !1 !== this._readableState.flowing && this.resume();else if ("readable" === e) {
            var n = this._readableState;
            n.endEmitted || n.readableListening || (n.readableListening = n.needReadable = !0, n.emittedReadable = !1, n.reading ? n.length && A(this) : m.nextTick(E, this));
          }
          return r;
        }, d.prototype.resume = function () {
          var e,
              t,
              r = this._readableState;
          return r.flowing || (w("resume"), r.flowing = !0, e = this, (t = r).resumeScheduled || (t.resumeScheduled = !0, m.nextTick(S, e, t))), this;
        }, d.prototype.pause = function () {
          return w("call pause flowing=%j", this._readableState.flowing), !1 !== this._readableState.flowing && (w("pause"), this._readableState.flowing = !1, this.emit("pause")), this;
        }, d.prototype.wrap = function (t) {
          var r = this,
              n = this._readableState,
              i = !1;

          for (var e in t.on("end", function () {
            if (w("wrapped end"), n.decoder && !n.ended) {
              var e = n.decoder.end();
              e && e.length && r.push(e);
            }

            r.push(null);
          }), t.on("data", function (e) {
            (w("wrapped data"), n.decoder && (e = n.decoder.write(e)), n.objectMode && null == e) || (n.objectMode || e && e.length) && (r.push(e) || (i = !0, t.pause()));
          }), t) {
            void 0 === this[e] && "function" == typeof t[e] && (this[e] = function (e) {
              return function () {
                return t[e].apply(t, arguments);
              };
            }(e));
          }

          for (var o = 0; o < h.length; o++) {
            t.on(h[o], this.emit.bind(this, h[o]));
          }

          return this._read = function (e) {
            w("wrapped _read", e), i && (i = !1, t.resume());
          }, this;
        }, Object.defineProperty(d.prototype, "readableHighWaterMark", {
          enumerable: !1,
          get: function get() {
            return this._readableState.highWaterMark;
          }
        }), d._fromList = j;
      }).call(this, B("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, {
      "./_stream_duplex": 135,
      "./internal/streams/BufferList": 140,
      "./internal/streams/destroy": 141,
      "./internal/streams/stream": 142,
      _process: 121,
      "core-util-is": 50,
      events: 83,
      inherits: 102,
      isarray: 104,
      "process-nextick-args": 120,
      "safe-buffer": 149,
      "string_decoder/": 143,
      util: 17
    }],
    138: [function (e, t, r) {
      t.exports = o;
      var n = e("./_stream_duplex"),
          i = e("core-util-is");

      function o(e) {
        if (!(this instanceof o)) return new o(e);
        n.call(this, e), this._transformState = {
          afterTransform: function (e, t) {
            var r = this._transformState;
            r.transforming = !1;
            var n = r.writecb;
            if (!n) return this.emit("error", new Error("write callback called multiple times"));
            r.writechunk = null, (r.writecb = null) != t && this.push(t), n(e);
            var i = this._readableState;
            i.reading = !1, (i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
          }.bind(this),
          needTransform: !1,
          transforming: !1,
          writecb: null,
          writechunk: null,
          writeencoding: null
        }, this._readableState.needReadable = !0, this._readableState.sync = !1, e && ("function" == typeof e.transform && (this._transform = e.transform), "function" == typeof e.flush && (this._flush = e.flush)), this.on("prefinish", a);
      }

      function a() {
        var r = this;
        "function" == typeof this._flush ? this._flush(function (e, t) {
          s(r, e, t);
        }) : s(this, null, null);
      }

      function s(e, t, r) {
        if (t) return e.emit("error", t);
        if (null != r && e.push(r), e._writableState.length) throw new Error("Calling transform done when ws.length != 0");
        if (e._transformState.transforming) throw new Error("Calling transform done when still transforming");
        return e.push(null);
      }

      i.inherits = e("inherits"), i.inherits(o, n), o.prototype.push = function (e, t) {
        return this._transformState.needTransform = !1, n.prototype.push.call(this, e, t);
      }, o.prototype._transform = function (e, t, r) {
        throw new Error("_transform() is not implemented");
      }, o.prototype._write = function (e, t, r) {
        var n = this._transformState;

        if (n.writecb = r, n.writechunk = e, n.writeencoding = t, !n.transforming) {
          var i = this._readableState;
          (n.needTransform || i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
        }
      }, o.prototype._read = function (e) {
        var t = this._transformState;
        null !== t.writechunk && t.writecb && !t.transforming ? (t.transforming = !0, this._transform(t.writechunk, t.writeencoding, t.afterTransform)) : t.needTransform = !0;
      }, o.prototype._destroy = function (e, t) {
        var r = this;

        n.prototype._destroy.call(this, e, function (e) {
          t(e), r.emit("close");
        });
      };
    }, {
      "./_stream_duplex": 135,
      "core-util-is": 50,
      inherits: 102
    }],
    139: [function (x, M, e) {
      (function (e, t, r) {
        var m = x("process-nextick-args");

        function h(e) {
          var t = this;
          this.next = null, this.entry = null, this.finish = function () {
            !function (e, t, r) {
              var n = e.entry;
              e.entry = null;

              for (; n;) {
                var i = n.callback;
                t.pendingcb--, i(r), n = n.next;
              }

              t.corkedRequestsFree ? t.corkedRequestsFree.next = e : t.corkedRequestsFree = e;
            }(t, e);
          };
        }

        M.exports = f;
        var s,
            d = !e.browser && -1 < ["v0.10", "v0.9."].indexOf(e.version.slice(0, 5)) ? r : m.nextTick;
        f.WritableState = c;
        var n = x("core-util-is");
        n.inherits = x("inherits");

        var i = {
          deprecate: x("util-deprecate")
        },
            o = x("./internal/streams/stream"),
            v = x("safe-buffer").Buffer,
            g = t.Uint8Array || function () {};

        var a,
            u = x("./internal/streams/destroy");

        function w() {}

        function c(e, t) {
          s = s || x("./_stream_duplex"), e = e || {};
          var r = t instanceof s;
          this.objectMode = !!e.objectMode, r && (this.objectMode = this.objectMode || !!e.writableObjectMode);
          var n = e.highWaterMark,
              i = e.writableHighWaterMark,
              o = this.objectMode ? 16 : 16384;
          this.highWaterMark = n || 0 === n ? n : r && (i || 0 === i) ? i : o, this.highWaterMark = Math.floor(this.highWaterMark), this.finalCalled = !1, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1;
          var a = (this.destroyed = !1) === e.decodeStrings;
          this.decodeStrings = !a, this.defaultEncoding = e.defaultEncoding || "utf8", this.length = 0, this.writing = !1, this.corked = 0, this.sync = !0, this.bufferProcessing = !1, this.onwrite = function (e) {
            !function (e, t) {
              var r = e._writableState,
                  n = r.sync,
                  i = r.writecb;
              if (h = r, h.writing = !1, h.writecb = null, h.length -= h.writelen, h.writelen = 0, t) a = e, s = r, u = n, c = t, f = i, --s.pendingcb, u ? (m.nextTick(f, c), m.nextTick(A, a, s), a._writableState.errorEmitted = !0, a.emit("error", c)) : (f(c), a._writableState.errorEmitted = !0, a.emit("error", c), A(a, s));else {
                var o = b(r);
                o || r.corked || r.bufferProcessing || !r.bufferedRequest || p(e, r), n ? d(l, e, r, o, i) : l(e, r, o, i);
              }
              var a, s, u, c, f;
              var h;
            }(t, e);
          }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = !1, this.errorEmitted = !1, this.bufferedRequestCount = 0, this.corkedRequestsFree = new h(this);
        }

        function f(e) {
          if (s = s || x("./_stream_duplex"), !(a.call(f, this) || this instanceof s)) return new f(e);
          this._writableState = new c(e, this), this.writable = !0, e && ("function" == typeof e.write && (this._write = e.write), "function" == typeof e.writev && (this._writev = e.writev), "function" == typeof e.destroy && (this._destroy = e.destroy), "function" == typeof e["final"] && (this._final = e["final"])), o.call(this);
        }

        function _(e, t, r, n, i, o, a) {
          t.writelen = n, t.writecb = a, t.writing = !0, t.sync = !0, r ? e._writev(i, t.onwrite) : e._write(i, o, t.onwrite), t.sync = !1;
        }

        function l(e, t, r, n) {
          var i, o;
          r || (i = e, 0 === (o = t).length && o.needDrain && (o.needDrain = !1, i.emit("drain"))), t.pendingcb--, n(), A(e, t);
        }

        function p(e, t) {
          t.bufferProcessing = !0;
          var r = t.bufferedRequest;

          if (e._writev && r && r.next) {
            var n = t.bufferedRequestCount,
                i = new Array(n),
                o = t.corkedRequestsFree;
            o.entry = r;

            for (var a = 0, s = !0; r;) {
              (i[a] = r).isBuf || (s = !1), r = r.next, a += 1;
            }

            i.allBuffers = s, _(e, t, !0, t.length, i, "", o.finish), t.pendingcb++, t.lastBufferedRequest = null, o.next ? (t.corkedRequestsFree = o.next, o.next = null) : t.corkedRequestsFree = new h(t), t.bufferedRequestCount = 0;
          } else {
            for (; r;) {
              var u = r.chunk,
                  c = r.encoding,
                  f = r.callback;
              if (_(e, t, !1, t.objectMode ? 1 : u.length, u, c, f), r = r.next, t.bufferedRequestCount--, t.writing) break;
            }

            null === r && (t.lastBufferedRequest = null);
          }

          t.bufferedRequest = r, t.bufferProcessing = !1;
        }

        function b(e) {
          return e.ending && 0 === e.length && null === e.bufferedRequest && !e.finished && !e.writing;
        }

        function y(t, r) {
          t._final(function (e) {
            r.pendingcb--, e && t.emit("error", e), r.prefinished = !0, t.emit("prefinish"), A(t, r);
          });
        }

        function A(e, t) {
          var r,
              n,
              i = b(t);
          return i && (r = e, (n = t).prefinished || n.finalCalled || ("function" == typeof r._final ? (n.pendingcb++, n.finalCalled = !0, m.nextTick(y, r, n)) : (n.prefinished = !0, r.emit("prefinish"))), 0 === t.pendingcb && (t.finished = !0, e.emit("finish"))), i;
        }

        n.inherits(f, o), c.prototype.getBuffer = function () {
          for (var e = this.bufferedRequest, t = []; e;) {
            t.push(e), e = e.next;
          }

          return t;
        }, function () {
          try {
            Object.defineProperty(c.prototype, "buffer", {
              get: i.deprecate(function () {
                return this.getBuffer();
              }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
            });
          } catch (e) {}
        }(), "function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance] ? (a = Function.prototype[Symbol.hasInstance], Object.defineProperty(f, Symbol.hasInstance, {
          value: function value(e) {
            return !!a.call(this, e) || this === f && e && e._writableState instanceof c;
          }
        })) : a = function a(e) {
          return e instanceof this;
        }, f.prototype.pipe = function () {
          this.emit("error", new Error("Cannot pipe, not readable"));
        }, f.prototype.write = function (e, t, r) {
          var n,
              i,
              o,
              a,
              s,
              u,
              c,
              f,
              h,
              d,
              l,
              p = this._writableState,
              b = !1,
              y = !p.objectMode && (n = e, v.isBuffer(n) || n instanceof g);
          return y && !v.isBuffer(e) && (i = e, e = v.from(i)), "function" == typeof t && (r = t, t = null), y ? t = "buffer" : t || (t = p.defaultEncoding), "function" != typeof r && (r = w), p.ended ? (h = this, d = r, l = new Error("write after end"), h.emit("error", l), m.nextTick(d, l)) : (y || (o = this, a = p, u = r, f = !(c = !0), null === (s = e) ? f = new TypeError("May not write null values to stream") : "string" == typeof s || void 0 === s || a.objectMode || (f = new TypeError("Invalid non-string/buffer chunk")), f && (o.emit("error", f), m.nextTick(u, f), c = !1), c)) && (p.pendingcb++, b = function (e, t, r, n, i, o) {
            if (!r) {
              var a = function (e, t, r) {
                e.objectMode || !1 === e.decodeStrings || "string" != typeof t || (t = v.from(t, r));
                return t;
              }(t, n, i);

              n !== a && (r = !0, i = "buffer", n = a);
            }

            var s = t.objectMode ? 1 : n.length;
            t.length += s;
            var u = t.length < t.highWaterMark;
            u || (t.needDrain = !0);

            if (t.writing || t.corked) {
              var c = t.lastBufferedRequest;
              t.lastBufferedRequest = {
                chunk: n,
                encoding: i,
                isBuf: r,
                callback: o,
                next: null
              }, c ? c.next = t.lastBufferedRequest : t.bufferedRequest = t.lastBufferedRequest, t.bufferedRequestCount += 1;
            } else _(e, t, !1, s, n, i, o);

            return u;
          }(this, p, y, e, t, r)), b;
        }, f.prototype.cork = function () {
          this._writableState.corked++;
        }, f.prototype.uncork = function () {
          var e = this._writableState;
          e.corked && (e.corked--, e.writing || e.corked || e.finished || e.bufferProcessing || !e.bufferedRequest || p(this, e));
        }, f.prototype.setDefaultEncoding = function (e) {
          if ("string" == typeof e && (e = e.toLowerCase()), !(-1 < ["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((e + "").toLowerCase()))) throw new TypeError("Unknown encoding: " + e);
          return this._writableState.defaultEncoding = e, this;
        }, Object.defineProperty(f.prototype, "writableHighWaterMark", {
          enumerable: !1,
          get: function get() {
            return this._writableState.highWaterMark;
          }
        }), f.prototype._write = function (e, t, r) {
          r(new Error("_write() is not implemented"));
        }, f.prototype._writev = null, f.prototype.end = function (e, t, r) {
          var n = this._writableState;
          "function" == typeof e ? (r = e, t = e = null) : "function" == typeof t && (r = t, t = null), null != e && this.write(e, t), n.corked && (n.corked = 1, this.uncork()), n.ending || n.finished || function (e, t, r) {
            t.ending = !0, A(e, t), r && (t.finished ? m.nextTick(r) : e.once("finish", r));
            t.ended = !0, e.writable = !1;
          }(this, n, r);
        }, Object.defineProperty(f.prototype, "destroyed", {
          get: function get() {
            return void 0 !== this._writableState && this._writableState.destroyed;
          },
          set: function set(e) {
            this._writableState && (this._writableState.destroyed = e);
          }
        }), f.prototype.destroy = u.destroy, f.prototype._undestroy = u.undestroy, f.prototype._destroy = function (e, t) {
          this.end(), t(e);
        };
      }).call(this, x("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, x("timers").setImmediate);
    }, {
      "./_stream_duplex": 135,
      "./internal/streams/destroy": 141,
      "./internal/streams/stream": 142,
      _process: 121,
      "core-util-is": 50,
      inherits: 102,
      "process-nextick-args": 120,
      "safe-buffer": 149,
      timers: 164,
      "util-deprecate": 168
    }],
    140: [function (e, t, r) {
      var s = e("safe-buffer").Buffer,
          n = e("util");
      t.exports = function () {
        function e() {
          !function (e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
          }(this, e), this.head = null, this.tail = null, this.length = 0;
        }

        return e.prototype.push = function (e) {
          var t = {
            data: e,
            next: null
          };
          0 < this.length ? this.tail.next = t : this.head = t, this.tail = t, ++this.length;
        }, e.prototype.unshift = function (e) {
          var t = {
            data: e,
            next: this.head
          };
          0 === this.length && (this.tail = t), this.head = t, ++this.length;
        }, e.prototype.shift = function () {
          if (0 !== this.length) {
            var e = this.head.data;
            return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, --this.length, e;
          }
        }, e.prototype.clear = function () {
          this.head = this.tail = null, this.length = 0;
        }, e.prototype.join = function (e) {
          if (0 === this.length) return "";

          for (var t = this.head, r = "" + t.data; t = t.next;) {
            r += e + t.data;
          }

          return r;
        }, e.prototype.concat = function (e) {
          if (0 === this.length) return s.alloc(0);
          if (1 === this.length) return this.head.data;

          for (var t, r, n, i = s.allocUnsafe(e >>> 0), o = this.head, a = 0; o;) {
            t = o.data, r = i, n = a, t.copy(r, n), a += o.data.length, o = o.next;
          }

          return i;
        }, e;
      }(), n && n.inspect && n.inspect.custom && (t.exports.prototype[n.inspect.custom] = function () {
        var e = n.inspect({
          length: this.length
        });
        return this.constructor.name + " " + e;
      });
    }, {
      "safe-buffer": 149,
      util: 17
    }],
    141: [function (e, t, r) {
      var o = e("process-nextick-args");

      function a(e, t) {
        e.emit("error", t);
      }

      t.exports = {
        destroy: function destroy(e, t) {
          var r = this,
              n = this._readableState && this._readableState.destroyed,
              i = this._writableState && this._writableState.destroyed;
          return n || i ? t ? t(e) : !e || this._writableState && this._writableState.errorEmitted || o.nextTick(a, this, e) : (this._readableState && (this._readableState.destroyed = !0), this._writableState && (this._writableState.destroyed = !0), this._destroy(e || null, function (e) {
            !t && e ? (o.nextTick(a, r, e), r._writableState && (r._writableState.errorEmitted = !0)) : t && t(e);
          })), this;
        },
        undestroy: function undestroy() {
          this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, this._writableState.ending = !1, this._writableState.finished = !1, this._writableState.errorEmitted = !1);
        }
      };
    }, {
      "process-nextick-args": 120
    }],
    142: [function (e, t, r) {
      t.exports = e("events").EventEmitter;
    }, {
      events: 83
    }],
    143: [function (e, t, r) {
      var n = e("safe-buffer").Buffer,
          i = n.isEncoding || function (e) {
        switch ((e = "" + e) && e.toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
          case "raw":
            return !0;

          default:
            return !1;
        }
      };

      function o(e) {
        var t;

        switch (this.encoding = function (e) {
          var t = function (e) {
            if (!e) return "utf8";

            for (var t;;) {
              switch (e) {
                case "utf8":
                case "utf-8":
                  return "utf8";

                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return "utf16le";

                case "latin1":
                case "binary":
                  return "latin1";

                case "base64":
                case "ascii":
                case "hex":
                  return e;

                default:
                  if (t) return;
                  e = ("" + e).toLowerCase(), t = !0;
              }
            }
          }(e);

          if ("string" != typeof t && (n.isEncoding === i || !i(e))) throw new Error("Unknown encoding: " + e);
          return t || e;
        }(e), this.encoding) {
          case "utf16le":
            this.text = u, this.end = c, t = 4;
            break;

          case "utf8":
            this.fillLast = s, t = 4;
            break;

          case "base64":
            this.text = f, this.end = h, t = 3;
            break;

          default:
            return this.write = d, void (this.end = l);
        }

        this.lastNeed = 0, this.lastTotal = 0, this.lastChar = n.allocUnsafe(t);
      }

      function a(e) {
        return e <= 127 ? 0 : e >> 5 == 6 ? 2 : e >> 4 == 14 ? 3 : e >> 3 == 30 ? 4 : e >> 6 == 2 ? -1 : -2;
      }

      function s(e) {
        var t = this.lastTotal - this.lastNeed,
            r = function (e, t, r) {
          if (128 != (192 & t[0])) return e.lastNeed = 0, "�";

          if (1 < e.lastNeed && 1 < t.length) {
            if (128 != (192 & t[1])) return e.lastNeed = 1, "�";
            if (2 < e.lastNeed && 2 < t.length && 128 != (192 & t[2])) return e.lastNeed = 2, "�";
          }
        }(this, e);

        return void 0 !== r ? r : this.lastNeed <= e.length ? (e.copy(this.lastChar, t, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal)) : (e.copy(this.lastChar, t, 0, e.length), void (this.lastNeed -= e.length));
      }

      function u(e, t) {
        if ((e.length - t) % 2 == 0) {
          var r = e.toString("utf16le", t);

          if (r) {
            var n = r.charCodeAt(r.length - 1);
            if (55296 <= n && n <= 56319) return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1], r.slice(0, -1);
          }

          return r;
        }

        return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = e[e.length - 1], e.toString("utf16le", t, e.length - 1);
      }

      function c(e) {
        var t = e && e.length ? this.write(e) : "";

        if (this.lastNeed) {
          var r = this.lastTotal - this.lastNeed;
          return t + this.lastChar.toString("utf16le", 0, r);
        }

        return t;
      }

      function f(e, t) {
        var r = (e.length - t) % 3;
        return 0 === r ? e.toString("base64", t) : (this.lastNeed = 3 - r, this.lastTotal = 3, 1 === r ? this.lastChar[0] = e[e.length - 1] : (this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1]), e.toString("base64", t, e.length - r));
      }

      function h(e) {
        var t = e && e.length ? this.write(e) : "";
        return this.lastNeed ? t + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : t;
      }

      function d(e) {
        return e.toString(this.encoding);
      }

      function l(e) {
        return e && e.length ? this.write(e) : "";
      }

      (r.StringDecoder = o).prototype.write = function (e) {
        if (0 === e.length) return "";
        var t, r;

        if (this.lastNeed) {
          if (void 0 === (t = this.fillLast(e))) return "";
          r = this.lastNeed, this.lastNeed = 0;
        } else r = 0;

        return r < e.length ? t ? t + this.text(e, r) : this.text(e, r) : t || "";
      }, o.prototype.end = function (e) {
        var t = e && e.length ? this.write(e) : "";
        return this.lastNeed ? t + "�" : t;
      }, o.prototype.text = function (e, t) {
        var r = function (e, t, r) {
          var n = t.length - 1;
          if (n < r) return 0;
          var i = a(t[n]);
          if (0 <= i) return 0 < i && (e.lastNeed = i - 1), i;
          if (--n < r || -2 === i) return 0;
          if (0 <= (i = a(t[n]))) return 0 < i && (e.lastNeed = i - 2), i;
          if (--n < r || -2 === i) return 0;
          if (0 <= (i = a(t[n]))) return 0 < i && (2 === i ? i = 0 : e.lastNeed = i - 3), i;
          return 0;
        }(this, e, t);

        if (!this.lastNeed) return e.toString("utf8", t);
        this.lastTotal = r;
        var n = e.length - (r - this.lastNeed);
        return e.copy(this.lastChar, 0, n), e.toString("utf8", t, n);
      }, o.prototype.fillLast = function (e) {
        if (this.lastNeed <= e.length) return e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
        e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, e.length), this.lastNeed -= e.length;
      };
    }, {
      "safe-buffer": 149
    }],
    144: [function (e, t, r) {
      t.exports = e("./readable").PassThrough;
    }, {
      "./readable": 145
    }],
    145: [function (e, t, r) {
      (((r = t.exports = e("./lib/_stream_readable.js")).Stream = r).Readable = r).Writable = e("./lib/_stream_writable.js"), r.Duplex = e("./lib/_stream_duplex.js"), r.Transform = e("./lib/_stream_transform.js"), r.PassThrough = e("./lib/_stream_passthrough.js");
    }, {
      "./lib/_stream_duplex.js": 135,
      "./lib/_stream_passthrough.js": 136,
      "./lib/_stream_readable.js": 137,
      "./lib/_stream_transform.js": 138,
      "./lib/_stream_writable.js": 139
    }],
    146: [function (e, t, r) {
      t.exports = e("./readable").Transform;
    }, {
      "./readable": 145
    }],
    147: [function (e, t, r) {
      t.exports = e("./lib/_stream_writable.js");
    }, {
      "./lib/_stream_writable.js": 139
    }],
    148: [function (e, t, r) {
      var n = e("buffer").Buffer,
          i = e("inherits"),
          o = e("hash-base"),
          y = new Array(16),
          m = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13],
          v = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11],
          g = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6],
          w = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11],
          _ = [0, 1518500249, 1859775393, 2400959708, 2840853838],
          A = [1352829926, 1548603684, 1836072691, 2053994217, 0];

      function a() {
        o.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520;
      }

      function x(e, t) {
        return e << t | e >>> 32 - t;
      }

      function M(e, t, r, n, i, o, a, s) {
        return x(e + (t ^ r ^ n) + o + a | 0, s) + i | 0;
      }

      function k(e, t, r, n, i, o, a, s) {
        return x(e + (t & r | ~t & n) + o + a | 0, s) + i | 0;
      }

      function E(e, t, r, n, i, o, a, s) {
        return x(e + ((t | ~r) ^ n) + o + a | 0, s) + i | 0;
      }

      function S(e, t, r, n, i, o, a, s) {
        return x(e + (t & n | r & ~n) + o + a | 0, s) + i | 0;
      }

      function U(e, t, r, n, i, o, a, s) {
        return x(e + (t ^ (r | ~n)) + o + a | 0, s) + i | 0;
      }

      i(a, o), a.prototype._update = function () {
        for (var e = y, t = 0; t < 16; ++t) {
          e[t] = this._block.readInt32LE(4 * t);
        }

        for (var r = 0 | this._a, n = 0 | this._b, i = 0 | this._c, o = 0 | this._d, a = 0 | this._e, s = 0 | this._a, u = 0 | this._b, c = 0 | this._c, f = 0 | this._d, h = 0 | this._e, d = 0; d < 80; d += 1) {
          var l, p;
          d < 16 ? (l = M(r, n, i, o, a, e[m[d]], _[0], g[d]), p = U(s, u, c, f, h, e[v[d]], A[0], w[d])) : d < 32 ? (l = k(r, n, i, o, a, e[m[d]], _[1], g[d]), p = S(s, u, c, f, h, e[v[d]], A[1], w[d])) : d < 48 ? (l = E(r, n, i, o, a, e[m[d]], _[2], g[d]), p = E(s, u, c, f, h, e[v[d]], A[2], w[d])) : d < 64 ? (l = S(r, n, i, o, a, e[m[d]], _[3], g[d]), p = k(s, u, c, f, h, e[v[d]], A[3], w[d])) : (l = U(r, n, i, o, a, e[m[d]], _[4], g[d]), p = M(s, u, c, f, h, e[v[d]], A[4], w[d])), r = a, a = o, o = x(i, 10), i = n, n = l, s = h, h = f, f = x(c, 10), c = u, u = p;
        }

        var b = this._b + i + f | 0;
        this._b = this._c + o + h | 0, this._c = this._d + a + s | 0, this._d = this._e + r + u | 0, this._e = this._a + n + c | 0, this._a = b;
      }, a.prototype._digest = function () {
        this._block[this._blockOffset++] = 128, 56 < this._blockOffset && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
        var e = n.alloc ? n.alloc(20) : new n(20);
        return e.writeInt32LE(this._a, 0), e.writeInt32LE(this._b, 4), e.writeInt32LE(this._c, 8), e.writeInt32LE(this._d, 12), e.writeInt32LE(this._e, 16), e;
      }, t.exports = a;
    }, {
      buffer: 47,
      "hash-base": 85,
      inherits: 102
    }],
    149: [function (e, t, r) {
      var n = e("buffer"),
          i = n.Buffer;

      function o(e, t) {
        for (var r in e) {
          t[r] = e[r];
        }
      }

      function a(e, t, r) {
        return i(e, t, r);
      }

      i.from && i.alloc && i.allocUnsafe && i.allocUnsafeSlow ? t.exports = n : (o(n, r), r.Buffer = a), o(i, a), a.from = function (e, t, r) {
        if ("number" == typeof e) throw new TypeError("Argument must not be a number");
        return i(e, t, r);
      }, a.alloc = function (e, t, r) {
        if ("number" != typeof e) throw new TypeError("Argument must be a number");
        var n = i(e);
        return void 0 !== t ? "string" == typeof r ? n.fill(t, r) : n.fill(t) : n.fill(0), n;
      }, a.allocUnsafe = function (e) {
        if ("number" != typeof e) throw new TypeError("Argument must be a number");
        return i(e);
      }, a.allocUnsafeSlow = function (e) {
        if ("number" != typeof e) throw new TypeError("Argument must be a number");
        return n.SlowBuffer(e);
      };
    }, {
      buffer: 47
    }],
    150: [function (e, t, r) {
      var f = e("safe-buffer").Buffer;

      function n(e, t) {
        this._block = f.alloc(e), this._finalSize = t, this._blockSize = e, this._len = 0;
      }

      n.prototype.update = function (e, t) {
        "string" == typeof e && (t = t || "utf8", e = f.from(e, t));

        for (var r = this._block, n = this._blockSize, i = e.length, o = this._len, a = 0; a < i;) {
          for (var s = o % n, u = Math.min(i - a, n - s), c = 0; c < u; c++) {
            r[s + c] = e[a + c];
          }

          a += u, (o += u) % n == 0 && this._update(r);
        }

        return this._len += i, this;
      }, n.prototype.digest = function (e) {
        var t = this._len % this._blockSize;
        this._block[t] = 128, this._block.fill(0, t + 1), t >= this._finalSize && (this._update(this._block), this._block.fill(0));
        var r = 8 * this._len;
        if (r <= 4294967295) this._block.writeUInt32BE(r, this._blockSize - 4);else {
          var n = (4294967295 & r) >>> 0,
              i = (r - n) / 4294967296;
          this._block.writeUInt32BE(i, this._blockSize - 8), this._block.writeUInt32BE(n, this._blockSize - 4);
        }

        this._update(this._block);

        var o = this._hash();

        return e ? o.toString(e) : o;
      }, n.prototype._update = function () {
        throw new Error("_update must be implemented by subclass");
      }, t.exports = n;
    }, {
      "safe-buffer": 149
    }],
    151: [function (e, t, r) {
      (r = t.exports = function (e) {
        e = e.toLowerCase();
        var t = r[e];
        if (!t) throw new Error(e + " is not supported (we accept pull requests)");
        return new t();
      }).sha = e("./sha"), r.sha1 = e("./sha1"), r.sha224 = e("./sha224"), r.sha256 = e("./sha256"), r.sha384 = e("./sha384"), r.sha512 = e("./sha512");
    }, {
      "./sha": 152,
      "./sha1": 153,
      "./sha224": 154,
      "./sha256": 155,
      "./sha384": 156,
      "./sha512": 157
    }],
    152: [function (e, t, r) {
      var n = e("inherits"),
          i = e("./hash"),
          o = e("safe-buffer").Buffer,
          m = [1518500249, 1859775393, -1894007588, -899497514],
          a = new Array(80);

      function s() {
        this.init(), this._w = a, i.call(this, 64, 56);
      }

      n(s, i), s.prototype.init = function () {
        return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
      }, s.prototype._update = function (e) {
        for (var t, r, n, i, o, a, s = this._w, u = 0 | this._a, c = 0 | this._b, f = 0 | this._c, h = 0 | this._d, d = 0 | this._e, l = 0; l < 16; ++l) {
          s[l] = e.readInt32BE(4 * l);
        }

        for (; l < 80; ++l) {
          s[l] = s[l - 3] ^ s[l - 8] ^ s[l - 14] ^ s[l - 16];
        }

        for (var p = 0; p < 80; ++p) {
          var b = ~~(p / 20),
              y = 0 | ((a = u) << 5 | a >>> 27) + (n = c, i = f, o = h, 0 === (r = b) ? n & i | ~n & o : 2 === r ? n & i | n & o | i & o : n ^ i ^ o) + d + s[p] + m[b];
          d = h, h = f, f = (t = c) << 30 | t >>> 2, c = u, u = y;
        }

        this._a = u + this._a | 0, this._b = c + this._b | 0, this._c = f + this._c | 0, this._d = h + this._d | 0, this._e = d + this._e | 0;
      }, s.prototype._hash = function () {
        var e = o.allocUnsafe(20);
        return e.writeInt32BE(0 | this._a, 0), e.writeInt32BE(0 | this._b, 4), e.writeInt32BE(0 | this._c, 8), e.writeInt32BE(0 | this._d, 12), e.writeInt32BE(0 | this._e, 16), e;
      }, t.exports = s;
    }, {
      "./hash": 150,
      inherits: 102,
      "safe-buffer": 149
    }],
    153: [function (e, t, r) {
      var n = e("inherits"),
          i = e("./hash"),
          o = e("safe-buffer").Buffer,
          v = [1518500249, 1859775393, -1894007588, -899497514],
          a = new Array(80);

      function s() {
        this.init(), this._w = a, i.call(this, 64, 56);
      }

      n(s, i), s.prototype.init = function () {
        return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
      }, s.prototype._update = function (e) {
        for (var t, r, n, i, o, a, s, u = this._w, c = 0 | this._a, f = 0 | this._b, h = 0 | this._c, d = 0 | this._d, l = 0 | this._e, p = 0; p < 16; ++p) {
          u[p] = e.readInt32BE(4 * p);
        }

        for (; p < 80; ++p) {
          u[p] = (t = u[p - 3] ^ u[p - 8] ^ u[p - 14] ^ u[p - 16]) << 1 | t >>> 31;
        }

        for (var b = 0; b < 80; ++b) {
          var y = ~~(b / 20),
              m = 0 | ((s = c) << 5 | s >>> 27) + (i = f, o = h, a = d, 0 === (n = y) ? i & o | ~i & a : 2 === n ? i & o | i & a | o & a : i ^ o ^ a) + l + u[b] + v[y];
          l = d, d = h, h = (r = f) << 30 | r >>> 2, f = c, c = m;
        }

        this._a = c + this._a | 0, this._b = f + this._b | 0, this._c = h + this._c | 0, this._d = d + this._d | 0, this._e = l + this._e | 0;
      }, s.prototype._hash = function () {
        var e = o.allocUnsafe(20);
        return e.writeInt32BE(0 | this._a, 0), e.writeInt32BE(0 | this._b, 4), e.writeInt32BE(0 | this._c, 8), e.writeInt32BE(0 | this._d, 12), e.writeInt32BE(0 | this._e, 16), e;
      }, t.exports = s;
    }, {
      "./hash": 150,
      inherits: 102,
      "safe-buffer": 149
    }],
    154: [function (e, t, r) {
      var n = e("inherits"),
          i = e("./sha256"),
          o = e("./hash"),
          a = e("safe-buffer").Buffer,
          s = new Array(64);

      function u() {
        this.init(), this._w = s, o.call(this, 64, 56);
      }

      n(u, i), u.prototype.init = function () {
        return this._a = 3238371032, this._b = 914150663, this._c = 812702999, this._d = 4144912697, this._e = 4290775857, this._f = 1750603025, this._g = 1694076839, this._h = 3204075428, this;
      }, u.prototype._hash = function () {
        var e = a.allocUnsafe(28);
        return e.writeInt32BE(this._a, 0), e.writeInt32BE(this._b, 4), e.writeInt32BE(this._c, 8), e.writeInt32BE(this._d, 12), e.writeInt32BE(this._e, 16), e.writeInt32BE(this._f, 20), e.writeInt32BE(this._g, 24), e;
      }, t.exports = u;
    }, {
      "./hash": 150,
      "./sha256": 155,
      inherits: 102,
      "safe-buffer": 149
    }],
    155: [function (e, t, r) {
      var n = e("inherits"),
          i = e("./hash"),
          o = e("safe-buffer").Buffer,
          _ = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298],
          a = new Array(64);

      function s() {
        this.init(), this._w = a, i.call(this, 64, 56);
      }

      n(s, i), s.prototype.init = function () {
        return this._a = 1779033703, this._b = 3144134277, this._c = 1013904242, this._d = 2773480762, this._e = 1359893119, this._f = 2600822924, this._g = 528734635, this._h = 1541459225, this;
      }, s.prototype._update = function (e) {
        for (var t, r, n, i, o, a, s, u = this._w, c = 0 | this._a, f = 0 | this._b, h = 0 | this._c, d = 0 | this._d, l = 0 | this._e, p = 0 | this._f, b = 0 | this._g, y = 0 | this._h, m = 0; m < 16; ++m) {
          u[m] = e.readInt32BE(4 * m);
        }

        for (; m < 64; ++m) {
          u[m] = 0 | (((r = u[m - 2]) >>> 17 | r << 15) ^ (r >>> 19 | r << 13) ^ r >>> 10) + u[m - 7] + (((t = u[m - 15]) >>> 7 | t << 25) ^ (t >>> 18 | t << 14) ^ t >>> 3) + u[m - 16];
        }

        for (var v = 0; v < 64; ++v) {
          var g = y + (((s = l) >>> 6 | s << 26) ^ (s >>> 11 | s << 21) ^ (s >>> 25 | s << 7)) + ((a = b) ^ l & (p ^ a)) + _[v] + u[v] | 0,
              w = 0 | (((o = c) >>> 2 | o << 30) ^ (o >>> 13 | o << 19) ^ (o >>> 22 | o << 10)) + ((n = c) & (i = f) | h & (n | i));
          y = b, b = p, p = l, l = d + g | 0, d = h, h = f, f = c, c = g + w | 0;
        }

        this._a = c + this._a | 0, this._b = f + this._b | 0, this._c = h + this._c | 0, this._d = d + this._d | 0, this._e = l + this._e | 0, this._f = p + this._f | 0, this._g = b + this._g | 0, this._h = y + this._h | 0;
      }, s.prototype._hash = function () {
        var e = o.allocUnsafe(32);
        return e.writeInt32BE(this._a, 0), e.writeInt32BE(this._b, 4), e.writeInt32BE(this._c, 8), e.writeInt32BE(this._d, 12), e.writeInt32BE(this._e, 16), e.writeInt32BE(this._f, 20), e.writeInt32BE(this._g, 24), e.writeInt32BE(this._h, 28), e;
      }, t.exports = s;
    }, {
      "./hash": 150,
      inherits: 102,
      "safe-buffer": 149
    }],
    156: [function (e, t, r) {
      var n = e("inherits"),
          i = e("./sha512"),
          o = e("./hash"),
          a = e("safe-buffer").Buffer,
          s = new Array(160);

      function u() {
        this.init(), this._w = s, o.call(this, 128, 112);
      }

      n(u, i), u.prototype.init = function () {
        return this._ah = 3418070365, this._bh = 1654270250, this._ch = 2438529370, this._dh = 355462360, this._eh = 1731405415, this._fh = 2394180231, this._gh = 3675008525, this._hh = 1203062813, this._al = 3238371032, this._bl = 914150663, this._cl = 812702999, this._dl = 4144912697, this._el = 4290775857, this._fl = 1750603025, this._gl = 1694076839, this._hl = 3204075428, this;
      }, u.prototype._hash = function () {
        var n = a.allocUnsafe(48);

        function e(e, t, r) {
          n.writeInt32BE(e, r), n.writeInt32BE(t, r + 4);
        }

        return e(this._ah, this._al, 0), e(this._bh, this._bl, 8), e(this._ch, this._cl, 16), e(this._dh, this._dl, 24), e(this._eh, this._el, 32), e(this._fh, this._fl, 40), n;
      }, t.exports = u;
    }, {
      "./hash": 150,
      "./sha512": 157,
      inherits: 102,
      "safe-buffer": 149
    }],
    157: [function (e, t, r) {
      var n = e("inherits"),
          i = e("./hash"),
          o = e("safe-buffer").Buffer,
          ee = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591],
          a = new Array(160);

      function s() {
        this.init(), this._w = a, i.call(this, 128, 112);
      }

      function te(e, t, r) {
        return r ^ e & (t ^ r);
      }

      function re(e, t, r) {
        return e & t | r & (e | t);
      }

      function ne(e, t) {
        return (e >>> 28 | t << 4) ^ (t >>> 2 | e << 30) ^ (t >>> 7 | e << 25);
      }

      function ie(e, t) {
        return (e >>> 14 | t << 18) ^ (e >>> 18 | t << 14) ^ (t >>> 9 | e << 23);
      }

      function oe(e, t) {
        return e >>> 0 < t >>> 0 ? 1 : 0;
      }

      n(s, i), s.prototype.init = function () {
        return this._ah = 1779033703, this._bh = 3144134277, this._ch = 1013904242, this._dh = 2773480762, this._eh = 1359893119, this._fh = 2600822924, this._gh = 528734635, this._hh = 1541459225, this._al = 4089235720, this._bl = 2227873595, this._cl = 4271175723, this._dl = 1595750129, this._el = 2917565137, this._fl = 725511199, this._gl = 4215389547, this._hl = 327033209, this;
      }, s.prototype._update = function (e) {
        for (var t, r, n, i, o, a, s, u, c = this._w, f = 0 | this._ah, h = 0 | this._bh, d = 0 | this._ch, l = 0 | this._dh, p = 0 | this._eh, b = 0 | this._fh, y = 0 | this._gh, m = 0 | this._hh, v = 0 | this._al, g = 0 | this._bl, w = 0 | this._cl, _ = 0 | this._dl, A = 0 | this._el, x = 0 | this._fl, M = 0 | this._gl, k = 0 | this._hl, E = 0; E < 32; E += 2) {
          c[E] = e.readInt32BE(4 * E), c[E + 1] = e.readInt32BE(4 * E + 4);
        }

        for (; E < 160; E += 2) {
          var S = c[E - 30],
              U = c[E - 30 + 1],
              j = ((s = S) >>> 1 | (u = U) << 31) ^ (s >>> 8 | u << 24) ^ s >>> 7,
              I = ((o = U) >>> 1 | (a = S) << 31) ^ (o >>> 8 | a << 24) ^ (o >>> 7 | a << 25);
          S = c[E - 4], U = c[E - 4 + 1];
          var T = ((n = S) >>> 19 | (i = U) << 13) ^ (i >>> 29 | n << 3) ^ n >>> 6,
              C = ((t = U) >>> 19 | (r = S) << 13) ^ (r >>> 29 | t << 3) ^ (t >>> 6 | r << 26),
              B = c[E - 14],
              N = c[E - 14 + 1],
              P = c[E - 32],
              R = c[E - 32 + 1],
              O = I + N | 0,
              L = j + B + oe(O, I) | 0;
          L = (L = L + T + oe(O = O + C | 0, C) | 0) + P + oe(O = O + R | 0, R) | 0, c[E] = L, c[E + 1] = O;
        }

        for (var q = 0; q < 160; q += 2) {
          L = c[q], O = c[q + 1];
          var D = re(f, h, d),
              F = re(v, g, w),
              H = ne(f, v),
              z = ne(v, f),
              K = ie(p, A),
              V = ie(A, p),
              G = ee[q],
              W = ee[q + 1],
              X = te(p, b, y),
              J = te(A, x, M),
              Z = k + V | 0,
              $ = m + K + oe(Z, k) | 0;
          $ = ($ = ($ = $ + X + oe(Z = Z + J | 0, J) | 0) + G + oe(Z = Z + W | 0, W) | 0) + L + oe(Z = Z + O | 0, O) | 0;
          var Y = z + F | 0,
              Q = H + D + oe(Y, z) | 0;
          m = y, k = M, y = b, M = x, b = p, x = A, p = l + $ + oe(A = _ + Z | 0, _) | 0, l = d, _ = w, d = h, w = g, h = f, g = v, f = $ + Q + oe(v = Z + Y | 0, Z) | 0;
        }

        this._al = this._al + v | 0, this._bl = this._bl + g | 0, this._cl = this._cl + w | 0, this._dl = this._dl + _ | 0, this._el = this._el + A | 0, this._fl = this._fl + x | 0, this._gl = this._gl + M | 0, this._hl = this._hl + k | 0, this._ah = this._ah + f + oe(this._al, v) | 0, this._bh = this._bh + h + oe(this._bl, g) | 0, this._ch = this._ch + d + oe(this._cl, w) | 0, this._dh = this._dh + l + oe(this._dl, _) | 0, this._eh = this._eh + p + oe(this._el, A) | 0, this._fh = this._fh + b + oe(this._fl, x) | 0, this._gh = this._gh + y + oe(this._gl, M) | 0, this._hh = this._hh + m + oe(this._hl, k) | 0;
      }, s.prototype._hash = function () {
        var n = o.allocUnsafe(64);

        function e(e, t, r) {
          n.writeInt32BE(e, r), n.writeInt32BE(t, r + 4);
        }

        return e(this._ah, this._al, 0), e(this._bh, this._bl, 8), e(this._ch, this._cl, 16), e(this._dh, this._dl, 24), e(this._eh, this._el, 32), e(this._fh, this._fl, 40), e(this._gh, this._gl, 48), e(this._hh, this._hl, 56), n;
      }, t.exports = s;
    }, {
      "./hash": 150,
      inherits: 102,
      "safe-buffer": 149
    }],
    158: [function (e, t, r) {
      t.exports = n;
      var f = e("events").EventEmitter;

      function n() {
        f.call(this);
      }

      e("inherits")(n, f), n.Readable = e("readable-stream/readable.js"), n.Writable = e("readable-stream/writable.js"), n.Duplex = e("readable-stream/duplex.js"), n.Transform = e("readable-stream/transform.js"), n.PassThrough = e("readable-stream/passthrough.js"), (n.Stream = n).prototype.pipe = function (t, e) {
        var r = this;

        function n(e) {
          t.writable && !1 === t.write(e) && r.pause && r.pause();
        }

        function i() {
          r.readable && r.resume && r.resume();
        }

        r.on("data", n), t.on("drain", i), t._isStdio || e && !1 === e.end || (r.on("end", a), r.on("close", s));
        var o = !1;

        function a() {
          o || (o = !0, t.end());
        }

        function s() {
          o || (o = !0, "function" == typeof t.destroy && t.destroy());
        }

        function u(e) {
          if (c(), 0 === f.listenerCount(this, "error")) throw e;
        }

        function c() {
          r.removeListener("data", n), t.removeListener("drain", i), r.removeListener("end", a), r.removeListener("close", s), r.removeListener("error", u), t.removeListener("error", u), r.removeListener("end", c), r.removeListener("close", c), t.removeListener("close", c);
        }

        return r.on("error", u), t.on("error", u), r.on("end", c), r.on("close", c), t.on("close", c), t.emit("pipe", r), t;
      };
    }, {
      events: 83,
      inherits: 102,
      "readable-stream/duplex.js": 134,
      "readable-stream/passthrough.js": 144,
      "readable-stream/readable.js": 145,
      "readable-stream/transform.js": 146,
      "readable-stream/writable.js": 147
    }],
    159: [function (r, e, i) {
      (function (u) {
        var c = r("./lib/request"),
            e = r("./lib/response"),
            f = r("xtend"),
            t = r("builtin-status-codes"),
            h = r("url"),
            n = i;
        n.request = function (e, t) {
          e = "string" == typeof e ? h.parse(e) : f(e);
          var r = -1 === u.location.protocol.search(/^https?:$/) ? "http:" : "",
              n = e.protocol || r,
              i = e.hostname || e.host,
              o = e.port,
              a = e.path || "/";
          i && -1 !== i.indexOf(":") && (i = "[" + i + "]"), e.url = (i ? n + "//" + i : "") + (o ? ":" + o : "") + a, e.method = (e.method || "GET").toUpperCase(), e.headers = e.headers || {};
          var s = new c(e);
          return t && s.on("response", t), s;
        }, n.get = function (e, t) {
          var r = n.request(e, t);
          return r.end(), r;
        }, n.ClientRequest = c, n.IncomingMessage = e.IncomingMessage, n.Agent = function () {}, n.Agent.defaultMaxSockets = 4, n.globalAgent = new n.Agent(), n.STATUS_CODES = t, n.METHODS = ["CHECKOUT", "CONNECT", "COPY", "DELETE", "GET", "HEAD", "LOCK", "M-SEARCH", "MERGE", "MKACTIVITY", "MKCOL", "MOVE", "NOTIFY", "OPTIONS", "PATCH", "POST", "PROPFIND", "PROPPATCH", "PURGE", "PUT", "REPORT", "SEARCH", "SUBSCRIBE", "TRACE", "UNLOCK", "UNSUBSCRIBE"];
      }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, {
      "./lib/request": 161,
      "./lib/response": 162,
      "builtin-status-codes": 48,
      url: 166,
      xtend: 170
    }],
    160: [function (e, t, s) {
      (function (e) {
        s.fetch = a(e.fetch) && a(e.ReadableStream), s.writableStream = a(e.WritableStream), s.abortController = a(e.AbortController), s.blobConstructor = !1;

        try {
          new Blob([new ArrayBuffer(1)]), s.blobConstructor = !0;
        } catch (e) {}

        var t;

        function r() {
          if (void 0 !== t) return t;

          if (e.XMLHttpRequest) {
            t = new e.XMLHttpRequest();

            try {
              t.open("GET", e.XDomainRequest ? "/" : "https://example.com");
            } catch (e) {
              t = null;
            }
          } else t = null;

          return t;
        }

        function n(e) {
          var t = r();
          if (!t) return !1;

          try {
            return t.responseType = e, t.responseType === e;
          } catch (e) {}

          return !1;
        }

        var i = void 0 !== e.ArrayBuffer,
            o = i && a(e.ArrayBuffer.prototype.slice);

        function a(e) {
          return "function" == typeof e;
        }

        s.arraybuffer = s.fetch || i && n("arraybuffer"), s.msstream = !s.fetch && o && n("ms-stream"), s.mozchunkedarraybuffer = !s.fetch && i && n("moz-chunked-arraybuffer"), s.overrideMimeType = s.fetch || !!r() && a(r().overrideMimeType), s.vbArray = a(e.VBArray), t = null;
      }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, {}],
    161: [function (o, s, e) {
      (function (u, c, f) {
        var h = o("./capability"),
            e = o("inherits"),
            t = o("./response"),
            a = o("readable-stream"),
            d = o("to-arraybuffer"),
            r = t.IncomingMessage,
            l = t.readyStates;

        var n = s.exports = function (t) {
          var e,
              r = this;
          a.Writable.call(r), r._opts = t, r._body = [], r._headers = {}, t.auth && r.setHeader("Authorization", "Basic " + new f(t.auth).toString("base64")), Object.keys(t.headers).forEach(function (e) {
            r.setHeader(e, t.headers[e]);
          });
          var n,
              i,
              o = !0;
          if ("disable-fetch" === t.mode || "requestTimeout" in t && !h.abortController) e = !(o = !1);else if ("prefer-streaming" === t.mode) e = !1;else if ("allow-wrong-content-type" === t.mode) e = !h.overrideMimeType;else {
            if (t.mode && "default" !== t.mode && "prefer-fast" !== t.mode) throw new Error("Invalid value for opts.mode");
            e = !0;
          }
          r._mode = (n = e, i = o, h.fetch && i ? "fetch" : h.mozchunkedarraybuffer ? "moz-chunked-arraybuffer" : h.msstream ? "ms-stream" : h.arraybuffer && n ? "arraybuffer" : h.vbArray && n ? "text:vbarray" : "text"), r._fetchTimer = null, r.on("finish", function () {
            r._onFinish();
          });
        };

        e(n, a.Writable), n.prototype.setHeader = function (e, t) {
          var r = e.toLowerCase();
          -1 === i.indexOf(r) && (this._headers[r] = {
            name: e,
            value: t
          });
        }, n.prototype.getHeader = function (e) {
          var t = this._headers[e.toLowerCase()];

          return t ? t.value : null;
        }, n.prototype.removeHeader = function (e) {
          delete this._headers[e.toLowerCase()];
        }, n.prototype._onFinish = function () {
          var t = this;

          if (!t._destroyed) {
            var e = t._opts,
                n = t._headers,
                r = null;
            "GET" !== e.method && "HEAD" !== e.method && (r = h.arraybuffer ? d(f.concat(t._body)) : h.blobConstructor ? new c.Blob(t._body.map(function (e) {
              return d(e);
            }), {
              type: (n["content-type"] || {}).value || ""
            }) : f.concat(t._body).toString());
            var i = [];

            if (Object.keys(n).forEach(function (e) {
              var t = n[e].name,
                  r = n[e].value;
              Array.isArray(r) ? r.forEach(function (e) {
                i.push([t, e]);
              }) : i.push([t, r]);
            }), "fetch" === t._mode) {
              var o = null;

              if (h.abortController) {
                var a = new AbortController();
                o = a.signal, t._fetchAbortController = a, "requestTimeout" in e && 0 !== e.requestTimeout && (t._fetchTimer = c.setTimeout(function () {
                  t.emit("requestTimeout"), t._fetchAbortController && t._fetchAbortController.abort();
                }, e.requestTimeout));
              }

              c.fetch(t._opts.url, {
                method: t._opts.method,
                headers: i,
                body: r || void 0,
                mode: "cors",
                credentials: e.withCredentials ? "include" : "same-origin",
                signal: o
              }).then(function (e) {
                t._fetchResponse = e, t._connect();
              }, function (e) {
                c.clearTimeout(t._fetchTimer), t._destroyed || t.emit("error", e);
              });
            } else {
              var s = t._xhr = new c.XMLHttpRequest();

              try {
                s.open(t._opts.method, t._opts.url, !0);
              } catch (e) {
                return void u.nextTick(function () {
                  t.emit("error", e);
                });
              }

              "responseType" in s && (s.responseType = t._mode.split(":")[0]), "withCredentials" in s && (s.withCredentials = !!e.withCredentials), "text" === t._mode && "overrideMimeType" in s && s.overrideMimeType("text/plain; charset=x-user-defined"), "requestTimeout" in e && (s.timeout = e.requestTimeout, s.ontimeout = function () {
                t.emit("requestTimeout");
              }), i.forEach(function (e) {
                s.setRequestHeader(e[0], e[1]);
              }), t._response = null, s.onreadystatechange = function () {
                switch (s.readyState) {
                  case l.LOADING:
                  case l.DONE:
                    t._onXHRProgress();

                }
              }, "moz-chunked-arraybuffer" === t._mode && (s.onprogress = function () {
                t._onXHRProgress();
              }), s.onerror = function () {
                t._destroyed || t.emit("error", new Error("XHR error"));
              };

              try {
                s.send(r);
              } catch (e) {
                return void u.nextTick(function () {
                  t.emit("error", e);
                });
              }
            }
          }
        }, n.prototype._onXHRProgress = function () {
          (function (e) {
            try {
              var t = e.status;
              return null !== t && 0 !== t;
            } catch (e) {
              return !1;
            }
          })(this._xhr) && !this._destroyed && (this._response || this._connect(), this._response._onXHRProgress());
        }, n.prototype._connect = function () {
          var t = this;
          t._destroyed || (t._response = new r(t._xhr, t._fetchResponse, t._mode, t._fetchTimer), t._response.on("error", function (e) {
            t.emit("error", e);
          }), t.emit("response", t._response));
        }, n.prototype._write = function (e, t, r) {
          this._body.push(e), r();
        }, n.prototype.abort = n.prototype.destroy = function () {
          this._destroyed = !0, c.clearTimeout(this._fetchTimer), this._response && (this._response._destroyed = !0), this._xhr ? this._xhr.abort() : this._fetchAbortController && this._fetchAbortController.abort();
        }, n.prototype.end = function (e, t, r) {
          "function" == typeof e && (r = e, e = void 0), a.Writable.prototype.end.call(this, e, t, r);
        }, n.prototype.flushHeaders = function () {}, n.prototype.setTimeout = function () {}, n.prototype.setNoDelay = function () {}, n.prototype.setSocketKeepAlive = function () {};
        var i = ["accept-charset", "accept-encoding", "access-control-request-headers", "access-control-request-method", "connection", "content-length", "cookie", "cookie2", "date", "dnt", "expect", "host", "keep-alive", "origin", "referer", "te", "trailer", "transfer-encoding", "upgrade", "user-agent", "via"];
      }).call(this, o("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, o("buffer").Buffer);
    }, {
      "./capability": 160,
      "./response": 162,
      _process: 121,
      buffer: 47,
      inherits: 102,
      "readable-stream": 145,
      "to-arraybuffer": 165
    }],
    162: [function (r, e, n) {
      (function (c, f, h) {
        var d = r("./capability"),
            e = r("inherits"),
            l = r("readable-stream"),
            s = n.readyStates = {
          UNSENT: 0,
          OPENED: 1,
          HEADERS_RECEIVED: 2,
          LOADING: 3,
          DONE: 4
        },
            t = n.IncomingMessage = function (e, t, r, n) {
          var i = this;

          if (l.Readable.call(i), i._mode = r, i.headers = {}, i.rawHeaders = [], i.trailers = {}, i.rawTrailers = [], i.on("end", function () {
            c.nextTick(function () {
              i.emit("close");
            });
          }), "fetch" === r) {
            if (i._fetchResponse = t, i.url = t.url, i.statusCode = t.status, i.statusMessage = t.statusText, t.headers.forEach(function (e, t) {
              i.headers[t.toLowerCase()] = e, i.rawHeaders.push(t, e);
            }), d.writableStream) {
              var o = new WritableStream({
                write: function write(r) {
                  return new Promise(function (e, t) {
                    i._destroyed ? t() : i.push(new h(r)) ? e() : i._resumeFetch = e;
                  });
                },
                close: function close() {
                  f.clearTimeout(n), i._destroyed || i.push(null);
                },
                abort: function abort(e) {
                  i._destroyed || i.emit("error", e);
                }
              });

              try {
                return void t.body.pipeTo(o)["catch"](function (e) {
                  f.clearTimeout(n), i._destroyed || i.emit("error", e);
                });
              } catch (e) {}
            }

            var a = t.body.getReader();
            !function t() {
              a.read().then(function (e) {
                if (!i._destroyed) {
                  if (e.done) return f.clearTimeout(n), void i.push(null);
                  i.push(new h(e.value)), t();
                }
              })["catch"](function (e) {
                f.clearTimeout(n), i._destroyed || i.emit("error", e);
              });
            }();
          } else {
            if (i._xhr = e, i._pos = 0, i.url = e.responseURL, i.statusCode = e.status, i.statusMessage = e.statusText, e.getAllResponseHeaders().split(/\r?\n/).forEach(function (e) {
              var t = e.match(/^([^:]+):\s*(.*)/);

              if (t) {
                var r = t[1].toLowerCase();
                "set-cookie" === r ? (void 0 === i.headers[r] && (i.headers[r] = []), i.headers[r].push(t[2])) : void 0 !== i.headers[r] ? i.headers[r] += ", " + t[2] : i.headers[r] = t[2], i.rawHeaders.push(t[1], t[2]);
              }
            }), i._charset = "x-user-defined", !d.overrideMimeType) {
              var s = i.rawHeaders["mime-type"];

              if (s) {
                var u = s.match(/;\s*charset=([^;])(;|$)/);
                u && (i._charset = u[1].toLowerCase());
              }

              i._charset || (i._charset = "utf-8");
            }
          }
        };

        e(t, l.Readable), t.prototype._read = function () {
          var e = this._resumeFetch;
          e && (this._resumeFetch = null, e());
        }, t.prototype._onXHRProgress = function () {
          var t = this,
              e = t._xhr,
              r = null;

          switch (t._mode) {
            case "text:vbarray":
              if (e.readyState !== s.DONE) break;

              try {
                r = new f.VBArray(e.responseBody).toArray();
              } catch (e) {}

              if (null !== r) {
                t.push(new h(r));
                break;
              }

            case "text":
              try {
                r = e.responseText;
              } catch (e) {
                t._mode = "text:vbarray";
                break;
              }

              if (r.length > t._pos) {
                var n = r.substr(t._pos);

                if ("x-user-defined" === t._charset) {
                  for (var i = new h(n.length), o = 0; o < n.length; o++) {
                    i[o] = 255 & n.charCodeAt(o);
                  }

                  t.push(i);
                } else t.push(n, t._charset);

                t._pos = r.length;
              }

              break;

            case "arraybuffer":
              if (e.readyState !== s.DONE || !e.response) break;
              r = e.response, t.push(new h(new Uint8Array(r)));
              break;

            case "moz-chunked-arraybuffer":
              if (r = e.response, e.readyState !== s.LOADING || !r) break;
              t.push(new h(new Uint8Array(r)));
              break;

            case "ms-stream":
              if (r = e.response, e.readyState !== s.LOADING) break;
              var a = new f.MSStreamReader();
              a.onprogress = function () {
                a.result.byteLength > t._pos && (t.push(new h(new Uint8Array(a.result.slice(t._pos)))), t._pos = a.result.byteLength);
              }, a.onload = function () {
                t.push(null);
              }, a.readAsArrayBuffer(r);
          }

          t._xhr.readyState === s.DONE && "ms-stream" !== t._mode && t.push(null);
        };
      }).call(this, r("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, r("buffer").Buffer);
    }, {
      "./capability": 160,
      _process: 121,
      buffer: 47,
      inherits: 102,
      "readable-stream": 145
    }],
    163: [function (e, t, r) {
      var n = e("safe-buffer").Buffer,
          i = n.isEncoding || function (e) {
        switch ((e = "" + e) && e.toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
          case "raw":
            return !0;

          default:
            return !1;
        }
      };

      function o(e) {
        var t;

        switch (this.encoding = function (e) {
          var t = function (e) {
            if (!e) return "utf8";

            for (var t;;) {
              switch (e) {
                case "utf8":
                case "utf-8":
                  return "utf8";

                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return "utf16le";

                case "latin1":
                case "binary":
                  return "latin1";

                case "base64":
                case "ascii":
                case "hex":
                  return e;

                default:
                  if (t) return;
                  e = ("" + e).toLowerCase(), t = !0;
              }
            }
          }(e);

          if ("string" != typeof t && (n.isEncoding === i || !i(e))) throw new Error("Unknown encoding: " + e);
          return t || e;
        }(e), this.encoding) {
          case "utf16le":
            this.text = u, this.end = c, t = 4;
            break;

          case "utf8":
            this.fillLast = s, t = 4;
            break;

          case "base64":
            this.text = f, this.end = h, t = 3;
            break;

          default:
            return this.write = d, void (this.end = l);
        }

        this.lastNeed = 0, this.lastTotal = 0, this.lastChar = n.allocUnsafe(t);
      }

      function a(e) {
        return e <= 127 ? 0 : e >> 5 == 6 ? 2 : e >> 4 == 14 ? 3 : e >> 3 == 30 ? 4 : -1;
      }

      function s(e) {
        var t = this.lastTotal - this.lastNeed,
            r = function (e, t, r) {
          if (128 != (192 & t[0])) return e.lastNeed = 0, "�".repeat(r);

          if (1 < e.lastNeed && 1 < t.length) {
            if (128 != (192 & t[1])) return e.lastNeed = 1, "�".repeat(r + 1);
            if (2 < e.lastNeed && 2 < t.length && 128 != (192 & t[2])) return e.lastNeed = 2, "�".repeat(r + 2);
          }
        }(this, e, t);

        return void 0 !== r ? r : this.lastNeed <= e.length ? (e.copy(this.lastChar, t, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal)) : (e.copy(this.lastChar, t, 0, e.length), void (this.lastNeed -= e.length));
      }

      function u(e, t) {
        if ((e.length - t) % 2 == 0) {
          var r = e.toString("utf16le", t);

          if (r) {
            var n = r.charCodeAt(r.length - 1);
            if (55296 <= n && n <= 56319) return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1], r.slice(0, -1);
          }

          return r;
        }

        return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = e[e.length - 1], e.toString("utf16le", t, e.length - 1);
      }

      function c(e) {
        var t = e && e.length ? this.write(e) : "";

        if (this.lastNeed) {
          var r = this.lastTotal - this.lastNeed;
          return t + this.lastChar.toString("utf16le", 0, r);
        }

        return t;
      }

      function f(e, t) {
        var r = (e.length - t) % 3;
        return 0 === r ? e.toString("base64", t) : (this.lastNeed = 3 - r, this.lastTotal = 3, 1 === r ? this.lastChar[0] = e[e.length - 1] : (this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1]), e.toString("base64", t, e.length - r));
      }

      function h(e) {
        var t = e && e.length ? this.write(e) : "";
        return this.lastNeed ? t + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : t;
      }

      function d(e) {
        return e.toString(this.encoding);
      }

      function l(e) {
        return e && e.length ? this.write(e) : "";
      }

      (r.StringDecoder = o).prototype.write = function (e) {
        if (0 === e.length) return "";
        var t, r;

        if (this.lastNeed) {
          if (void 0 === (t = this.fillLast(e))) return "";
          r = this.lastNeed, this.lastNeed = 0;
        } else r = 0;

        return r < e.length ? t ? t + this.text(e, r) : this.text(e, r) : t || "";
      }, o.prototype.end = function (e) {
        var t = e && e.length ? this.write(e) : "";
        return this.lastNeed ? t + "�".repeat(this.lastTotal - this.lastNeed) : t;
      }, o.prototype.text = function (e, t) {
        var r = function (e, t, r) {
          var n = t.length - 1;
          if (n < r) return 0;
          var i = a(t[n]);
          if (0 <= i) return 0 < i && (e.lastNeed = i - 1), i;
          if (--n < r) return 0;
          if (0 <= (i = a(t[n]))) return 0 < i && (e.lastNeed = i - 2), i;
          if (--n < r) return 0;
          if (0 <= (i = a(t[n]))) return 0 < i && (2 === i ? i = 0 : e.lastNeed = i - 3), i;
          return 0;
        }(this, e, t);

        if (!this.lastNeed) return e.toString("utf8", t);
        this.lastTotal = r;
        var n = e.length - (r - this.lastNeed);
        return e.copy(this.lastChar, 0, n), e.toString("utf8", t, n);
      }, o.prototype.fillLast = function (e) {
        if (this.lastNeed <= e.length) return e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
        e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, e.length), this.lastNeed -= e.length;
      };
    }, {
      "safe-buffer": 149
    }],
    164: [function (u, e, c) {
      (function (e, t) {
        var n = u("process/browser.js").nextTick,
            r = Function.prototype.apply,
            i = Array.prototype.slice,
            o = {},
            a = 0;

        function s(e, t) {
          this._id = e, this._clearFn = t;
        }

        c.setTimeout = function () {
          return new s(r.call(setTimeout, window, arguments), clearTimeout);
        }, c.setInterval = function () {
          return new s(r.call(setInterval, window, arguments), clearInterval);
        }, c.clearTimeout = c.clearInterval = function (e) {
          e.close();
        }, s.prototype.unref = s.prototype.ref = function () {}, s.prototype.close = function () {
          this._clearFn.call(window, this._id);
        }, c.enroll = function (e, t) {
          clearTimeout(e._idleTimeoutId), e._idleTimeout = t;
        }, c.unenroll = function (e) {
          clearTimeout(e._idleTimeoutId), e._idleTimeout = -1;
        }, c._unrefActive = c.active = function (e) {
          clearTimeout(e._idleTimeoutId);
          var t = e._idleTimeout;
          0 <= t && (e._idleTimeoutId = setTimeout(function () {
            e._onTimeout && e._onTimeout();
          }, t));
        }, c.setImmediate = "function" == typeof e ? e : function (e) {
          var t = a++,
              r = !(arguments.length < 2) && i.call(arguments, 1);
          return o[t] = !0, n(function () {
            o[t] && (r ? e.apply(null, r) : e.call(null), c.clearImmediate(t));
          }), t;
        }, c.clearImmediate = "function" == typeof t ? t : function (e) {
          delete o[e];
        };
      }).call(this, u("timers").setImmediate, u("timers").clearImmediate);
    }, {
      "process/browser.js": 121,
      timers: 164
    }],
    165: [function (e, t, r) {
      var i = e("buffer").Buffer;

      t.exports = function (e) {
        if (e instanceof Uint8Array) {
          if (0 === e.byteOffset && e.byteLength === e.buffer.byteLength) return e.buffer;
          if ("function" == typeof e.buffer.slice) return e.buffer.slice(e.byteOffset, e.byteOffset + e.byteLength);
        }

        if (i.isBuffer(e)) {
          for (var t = new Uint8Array(e.length), r = e.length, n = 0; n < r; n++) {
            t[n] = e[n];
          }

          return t.buffer;
        }

        throw new Error("Argument must be a Buffer");
      };
    }, {
      buffer: 47
    }],
    166: [function (e, t, r) {
      var B = e("punycode"),
          N = e("./util");

      function S() {
        this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null;
      }

      r.parse = o, r.resolve = function (e, t) {
        return o(e, !1, !0).resolve(t);
      }, r.resolveObject = function (e, t) {
        return e ? o(e, !1, !0).resolveObject(t) : t;
      }, r.format = function (e) {
        N.isString(e) && (e = o(e));
        return e instanceof S ? e.format() : S.prototype.format.call(e);
      }, r.Url = S;
      var P = /^([a-z0-9.+-]+:)/i,
          n = /:[0-9]*$/,
          R = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
          i = ["{", "}", "|", "\\", "^", "`"].concat(["<", ">", '"', "`", " ", "\r", "\n", "\t"]),
          O = ["'"].concat(i),
          L = ["%", "/", "?", ";", "#"].concat(O),
          q = ["/", "?", "#"],
          D = /^[+a-z0-9A-Z_-]{0,63}$/,
          F = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
          H = {
        javascript: !0,
        "javascript:": !0
      },
          z = {
        javascript: !0,
        "javascript:": !0
      },
          K = {
        http: !0,
        https: !0,
        ftp: !0,
        gopher: !0,
        file: !0,
        "http:": !0,
        "https:": !0,
        "ftp:": !0,
        "gopher:": !0,
        "file:": !0
      },
          V = e("querystring");

      function o(e, t, r) {
        if (e && N.isObject(e) && e instanceof S) return e;
        var n = new S();
        return n.parse(e, t, r), n;
      }

      S.prototype.parse = function (e, t, r) {
        if (!N.isString(e)) throw new TypeError("Parameter 'url' must be a string, not " + (void 0 === e ? "undefined" : _typeof(e)));
        var n = e.indexOf("?"),
            i = -1 !== n && n < e.indexOf("#") ? "?" : "#",
            o = e.split(i);
        o[0] = o[0].replace(/\\/g, "/");
        var a = e = o.join(i);

        if (a = a.trim(), !r && 1 === e.split("#").length) {
          var s = R.exec(a);
          if (s) return this.path = a, this.href = a, this.pathname = s[1], s[2] ? (this.search = s[2], this.query = t ? V.parse(this.search.substr(1)) : this.search.substr(1)) : t && (this.search = "", this.query = {}), this;
        }

        var u = P.exec(a);

        if (u) {
          var c = (u = u[0]).toLowerCase();
          this.protocol = c, a = a.substr(u.length);
        }

        if (r || u || a.match(/^\/\/[^@\/]+@[^@\/]+/)) {
          var f = "//" === a.substr(0, 2);
          !f || u && z[u] || (a = a.substr(2), this.slashes = !0);
        }

        if (!z[u] && (f || u && !K[u])) {
          for (var h, d, l = -1, p = 0; p < q.length; p++) {
            -1 !== (b = a.indexOf(q[p])) && (-1 === l || b < l) && (l = b);
          }

          -1 !== (d = -1 === l ? a.lastIndexOf("@") : a.lastIndexOf("@", l)) && (h = a.slice(0, d), a = a.slice(d + 1), this.auth = decodeURIComponent(h)), l = -1;

          for (p = 0; p < L.length; p++) {
            var b;
            -1 !== (b = a.indexOf(L[p])) && (-1 === l || b < l) && (l = b);
          }

          -1 === l && (l = a.length), this.host = a.slice(0, l), a = a.slice(l), this.parseHost(), this.hostname = this.hostname || "";
          var y = "[" === this.hostname[0] && "]" === this.hostname[this.hostname.length - 1];
          if (!y) for (var m = this.hostname.split(/\./), v = (p = 0, m.length); p < v; p++) {
            var g = m[p];

            if (g && !g.match(D)) {
              for (var w = "", _ = 0, A = g.length; _ < A; _++) {
                127 < g.charCodeAt(_) ? w += "x" : w += g[_];
              }

              if (!w.match(D)) {
                var x = m.slice(0, p),
                    M = m.slice(p + 1),
                    k = g.match(F);
                k && (x.push(k[1]), M.unshift(k[2])), M.length && (a = "/" + M.join(".") + a), this.hostname = x.join(".");
                break;
              }
            }
          }
          255 < this.hostname.length ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), y || (this.hostname = B.toASCII(this.hostname));
          var E = this.port ? ":" + this.port : "",
              S = this.hostname || "";
          this.host = S + E, this.href += this.host, y && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), "/" !== a[0] && (a = "/" + a));
        }

        if (!H[c]) for (p = 0, v = O.length; p < v; p++) {
          var U = O[p];

          if (-1 !== a.indexOf(U)) {
            var j = encodeURIComponent(U);
            j === U && (j = escape(U)), a = a.split(U).join(j);
          }
        }
        var I = a.indexOf("#");
        -1 !== I && (this.hash = a.substr(I), a = a.slice(0, I));
        var T = a.indexOf("?");

        if (-1 !== T ? (this.search = a.substr(T), this.query = a.substr(T + 1), t && (this.query = V.parse(this.query)), a = a.slice(0, T)) : t && (this.search = "", this.query = {}), a && (this.pathname = a), K[c] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
          E = this.pathname || "";
          var C = this.search || "";
          this.path = E + C;
        }

        return this.href = this.format(), this;
      }, S.prototype.format = function () {
        var e = this.auth || "";
        e && (e = (e = encodeURIComponent(e)).replace(/%3A/i, ":"), e += "@");
        var t = this.protocol || "",
            r = this.pathname || "",
            n = this.hash || "",
            i = !1,
            o = "";
        this.host ? i = e + this.host : this.hostname && (i = e + (-1 === this.hostname.indexOf(":") ? this.hostname : "[" + this.hostname + "]"), this.port && (i += ":" + this.port)), this.query && N.isObject(this.query) && Object.keys(this.query).length && (o = V.stringify(this.query));
        var a = this.search || o && "?" + o || "";
        return t && ":" !== t.substr(-1) && (t += ":"), this.slashes || (!t || K[t]) && !1 !== i ? (i = "//" + (i || ""), r && "/" !== r.charAt(0) && (r = "/" + r)) : i || (i = ""), n && "#" !== n.charAt(0) && (n = "#" + n), a && "?" !== a.charAt(0) && (a = "?" + a), t + i + (r = r.replace(/[?#]/g, function (e) {
          return encodeURIComponent(e);
        })) + (a = a.replace("#", "%23")) + n;
      }, S.prototype.resolve = function (e) {
        return this.resolveObject(o(e, !1, !0)).format();
      }, S.prototype.resolveObject = function (e) {
        if (N.isString(e)) {
          var t = new S();
          t.parse(e, !1, !0), e = t;
        }

        for (var r = new S(), n = Object.keys(this), i = 0; i < n.length; i++) {
          var o = n[i];
          r[o] = this[o];
        }

        if (r.hash = e.hash, "" === e.href) return r.href = r.format(), r;

        if (e.slashes && !e.protocol) {
          for (var a = Object.keys(e), s = 0; s < a.length; s++) {
            var u = a[s];
            "protocol" !== u && (r[u] = e[u]);
          }

          return K[r.protocol] && r.hostname && !r.pathname && (r.path = r.pathname = "/"), r.href = r.format(), r;
        }

        if (e.protocol && e.protocol !== r.protocol) {
          if (!K[e.protocol]) {
            for (var c = Object.keys(e), f = 0; f < c.length; f++) {
              var h = c[f];
              r[h] = e[h];
            }

            return r.href = r.format(), r;
          }

          if (r.protocol = e.protocol, e.host || z[e.protocol]) r.pathname = e.pathname;else {
            for (var d = (e.pathname || "").split("/"); d.length && !(e.host = d.shift());) {
              ;
            }

            e.host || (e.host = ""), e.hostname || (e.hostname = ""), "" !== d[0] && d.unshift(""), d.length < 2 && d.unshift(""), r.pathname = d.join("/");
          }

          if (r.search = e.search, r.query = e.query, r.host = e.host || "", r.auth = e.auth, r.hostname = e.hostname || e.host, r.port = e.port, r.pathname || r.search) {
            var l = r.pathname || "",
                p = r.search || "";
            r.path = l + p;
          }

          return r.slashes = r.slashes || e.slashes, r.href = r.format(), r;
        }

        var b = r.pathname && "/" === r.pathname.charAt(0),
            y = e.host || e.pathname && "/" === e.pathname.charAt(0),
            m = y || b || r.host && e.pathname,
            v = m,
            g = r.pathname && r.pathname.split("/") || [],
            w = (d = e.pathname && e.pathname.split("/") || [], r.protocol && !K[r.protocol]);
        if (w && (r.hostname = "", r.port = null, r.host && ("" === g[0] ? g[0] = r.host : g.unshift(r.host)), r.host = "", e.protocol && (e.hostname = null, e.port = null, e.host && ("" === d[0] ? d[0] = e.host : d.unshift(e.host)), e.host = null), m = m && ("" === d[0] || "" === g[0])), y) r.host = e.host || "" === e.host ? e.host : r.host, r.hostname = e.hostname || "" === e.hostname ? e.hostname : r.hostname, r.search = e.search, r.query = e.query, g = d;else if (d.length) g || (g = []), g.pop(), g = g.concat(d), r.search = e.search, r.query = e.query;else if (!N.isNullOrUndefined(e.search)) {
          if (w) r.hostname = r.host = g.shift(), (k = !!(r.host && 0 < r.host.indexOf("@")) && r.host.split("@")) && (r.auth = k.shift(), r.host = r.hostname = k.shift());
          return r.search = e.search, r.query = e.query, N.isNull(r.pathname) && N.isNull(r.search) || (r.path = (r.pathname ? r.pathname : "") + (r.search ? r.search : "")), r.href = r.format(), r;
        }
        if (!g.length) return r.pathname = null, r.search ? r.path = "/" + r.search : r.path = null, r.href = r.format(), r;

        for (var _ = g.slice(-1)[0], A = (r.host || e.host || 1 < g.length) && ("." === _ || ".." === _) || "" === _, x = 0, M = g.length; 0 <= M; M--) {
          "." === (_ = g[M]) ? g.splice(M, 1) : ".." === _ ? (g.splice(M, 1), x++) : x && (g.splice(M, 1), x--);
        }

        if (!m && !v) for (; x--; x) {
          g.unshift("..");
        }
        !m || "" === g[0] || g[0] && "/" === g[0].charAt(0) || g.unshift(""), A && "/" !== g.join("/").substr(-1) && g.push("");
        var k,
            E = "" === g[0] || g[0] && "/" === g[0].charAt(0);
        w && (r.hostname = r.host = E ? "" : g.length ? g.shift() : "", (k = !!(r.host && 0 < r.host.indexOf("@")) && r.host.split("@")) && (r.auth = k.shift(), r.host = r.hostname = k.shift()));
        return (m = m || r.host && g.length) && !E && g.unshift(""), g.length ? r.pathname = g.join("/") : (r.pathname = null, r.path = null), N.isNull(r.pathname) && N.isNull(r.search) || (r.path = (r.pathname ? r.pathname : "") + (r.search ? r.search : "")), r.auth = e.auth || r.auth, r.slashes = r.slashes || e.slashes, r.href = r.format(), r;
      }, S.prototype.parseHost = function () {
        var e = this.host,
            t = n.exec(e);
        t && (":" !== (t = t[0]) && (this.port = t.substr(1)), e = e.substr(0, e.length - t.length)), e && (this.hostname = e);
      };
    }, {
      "./util": 167,
      punycode: 128,
      querystring: 131
    }],
    167: [function (e, t, r) {
      t.exports = {
        isString: function isString(e) {
          return "string" == typeof e;
        },
        isObject: function isObject(e) {
          return "object" === (void 0 === e ? "undefined" : _typeof(e)) && null !== e;
        },
        isNull: function isNull(e) {
          return null === e;
        },
        isNullOrUndefined: function isNullOrUndefined(e) {
          return null == e;
        }
      };
    }, {}],
    168: [function (e, t, r) {
      (function (r) {
        function n(e) {
          try {
            if (!r.localStorage) return !1;
          } catch (e) {
            return !1;
          }

          var t = r.localStorage[e];
          return null != t && "true" === String(t).toLowerCase();
        }

        t.exports = function (e, t) {
          if (n("noDeprecation")) return e;
          var r = !1;
          return function () {
            if (!r) {
              if (n("throwDeprecation")) throw new Error(t);
              n("traceDeprecation") ? console.trace(t) : console.warn(t), r = !0;
            }

            return e.apply(this, arguments);
          };
        };
      }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, {}],
    169: [function (require, module, exports) {
      var indexOf = require("indexof"),
          Object_keys = function Object_keys(e) {
        if (Object.keys) return Object.keys(e);
        var t = [];

        for (var r in e) {
          t.push(r);
        }

        return t;
      },
          forEach = function forEach(e, t) {
        if (e.forEach) return e.forEach(t);

        for (var r = 0; r < e.length; r++) {
          t(e[r], r, e);
        }
      },
          defineProp = function () {
        try {
          return Object.defineProperty({}, "_", {}), function (e, t, r) {
            Object.defineProperty(e, t, {
              writable: !0,
              enumerable: !1,
              configurable: !0,
              value: r
            });
          };
        } catch (e) {
          return function (e, t, r) {
            e[t] = r;
          };
        }
      }(),
          globals = ["Array", "Boolean", "Date", "Error", "EvalError", "Function", "Infinity", "JSON", "Math", "NaN", "Number", "Object", "RangeError", "ReferenceError", "RegExp", "String", "SyntaxError", "TypeError", "URIError", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", "escape", "eval", "isFinite", "isNaN", "parseFloat", "parseInt", "undefined", "unescape"];

      function Context() {}

      Context.prototype = {};

      var Script = exports.Script = function (e) {
        if (!(this instanceof Script)) return new Script(e);
        this.code = e;
      };

      Script.prototype.runInContext = function (t) {
        if (!(t instanceof Context)) throw new TypeError("needs a 'context' argument.");
        var e = document.createElement("iframe");
        e.style || (e.style = {}), e.style.display = "none", document.body.appendChild(e);
        var r = e.contentWindow,
            n = r.eval,
            i = r.execScript;
        !n && i && (i.call(r, "null"), n = r.eval), forEach(Object_keys(t), function (e) {
          r[e] = t[e];
        }), forEach(globals, function (e) {
          t[e] && (r[e] = t[e]);
        });
        var o = Object_keys(r),
            a = n.call(r, this.code);
        return forEach(Object_keys(r), function (e) {
          (e in t || -1 === indexOf(o, e)) && (t[e] = r[e]);
        }), forEach(globals, function (e) {
          e in t || defineProp(t, e, r[e]);
        }), document.body.removeChild(e), a;
      }, Script.prototype.runInThisContext = function () {
        return eval(this.code);
      }, Script.prototype.runInNewContext = function (t) {
        var r = Script.createContext(t),
            e = this.runInContext(r);
        return forEach(Object_keys(r), function (e) {
          t[e] = r[e];
        }), e;
      }, forEach(Object_keys(Script.prototype), function (r) {
        exports[r] = Script[r] = function (e) {
          var t = Script(e);
          return t[r].apply(t, [].slice.call(arguments, 1));
        };
      }), exports.createScript = function (e) {
        return exports.Script(e);
      }, exports.createContext = Script.createContext = function (t) {
        var r = new Context();
        return "object" === (void 0 === t ? "undefined" : _typeof(t)) && forEach(Object_keys(t), function (e) {
          r[e] = t[e];
        }), r;
      };
    }, {
      indexof: 101
    }],
    170: [function (e, t, r) {
      t.exports = function () {
        for (var e = {}, t = 0; t < arguments.length; t++) {
          var r = arguments[t];

          for (var n in r) {
            i.call(r, n) && (e[n] = r[n]);
          }
        }

        return e;
      };

      var i = Object.prototype.hasOwnProperty;
    }, {}],
    171: [function (e, t, r) {
      var n = "%[a-f0-9]{2}",
          i = new RegExp(n, "gi"),
          s = new RegExp("(" + n + ")+", "gi");

      function o(e, t) {
        try {
          return decodeURIComponent(e.join(""));
        } catch (e) {}

        if (1 === e.length) return e;
        t = t || 1;
        var r = e.slice(0, t),
            n = e.slice(t);
        return Array.prototype.concat.call([], o(r), o(n));
      }

      function u(t) {
        try {
          return decodeURIComponent(t);
        } catch (e) {
          for (var r = t.match(i), n = 1; n < r.length; n++) {
            r = (t = o(r, n).join("")).match(i);
          }

          return t;
        }
      }

      t.exports = function (t) {
        if ("string" != typeof t) throw new TypeError("Expected `encodedURI` to be of type `string`, got `" + (void 0 === t ? "undefined" : _typeof(t)) + "`");

        try {
          return t = t.replace(/\+/g, " "), decodeURIComponent(t);
        } catch (e) {
          return function (e) {
            for (var t = {
              "%FE%FF": "��",
              "%FF%FE": "��"
            }, r = s.exec(e); r;) {
              try {
                t[r[0]] = decodeURIComponent(r[0]);
              } catch (e) {
                var n = u(r[0]);
                n !== r[0] && (t[r[0]] = n);
              }

              r = s.exec(e);
            }

            t["%C2"] = "�";

            for (var i = Object.keys(t), o = 0; o < i.length; o++) {
              var a = i[o];
              e = e.replace(new RegExp(a, "g"), t[a]);
            }

            return e;
          }(t);
        }
      };
    }, {}],
    172: [function (e, t, r) {
      var n = function n(e, t) {
        for (var r = [], n = 0; n < e; ++n) {
          r.push(t(n));
        }

        return r;
      };

      t.exports = {
        generate: n,
        replicate: function replicate(e, t) {
          return n(e, function () {
            return t;
          });
        },
        concat: function concat(e, t) {
          return e.concat(t);
        },
        flatten: function flatten(e) {
          for (var t = [], r = 0, n = e.length; r < n; ++r) {
            for (var i = 0, o = e[r].length; i < o; ++i) {
              t.push(e[r][i]);
            }
          }

          return t;
        },
        chunksOf: function chunksOf(e, t) {
          for (var r = [], n = 0, i = t.length; n < i; n += e) {
            r.push(t.slice(n, n + e));
          }

          return r;
        }
      };
    }, {}],
    173: [function (i, e, t) {
      i("./array.js");

      var o = function o(e, t) {
        return parseInt(e.slice(2 * t + 2, 2 * t + 4), 16);
      },
          a = function a(e) {
        return (e.length - 2) / 2;
      },
          r = function r(e) {
        for (var t = [], r = 2, n = e.length; r < n; r += 2) {
          t.push(parseInt(e.slice(r, r + 2), 16));
        }

        return t;
      },
          n = function n(e) {
        for (var t = "0x", r = 0, n = e.length; r < n; ++r) {
          var i = e[r];
          t += (i < 16 ? "0" : "") + i.toString(16);
        }

        return t;
      };

      e.exports = {
        random: function random(e) {
          var t = void 0;
          if ("undefined" != typeof window && window.crypto && window.crypto.getRandomValues) t = window.crypto.getRandomValues(new Uint8Array(e));else {
            if (void 0 === i) throw "Safe random numbers not available.";
            t = i("crypto").randomBytes(e);
          }

          for (var r = "0x", n = 0; n < e; ++n) {
            r += ("00" + t[n].toString(16)).slice(-2);
          }

          return r;
        },
        length: a,
        concat: function concat(e, t) {
          return e.concat(t.slice(2));
        },
        flatten: function flatten(e) {
          return "0x" + e.reduce(function (e, t) {
            return e + t.slice(2);
          }, "");
        },
        slice: function slice(e, t, r) {
          return "0x" + r.slice(2 * e + 2, 2 * t + 2);
        },
        reverse: function reverse(e) {
          for (var t = "0x", r = 0, n = a(e); r < n; ++r) {
            t += e.slice(2 * (n - r), 2 * (n - r + 1));
          }

          return t;
        },
        pad: function e(t, r) {
          return r.length === 2 * t + 2 ? r : e(t, "0x0" + r.slice(2));
        },
        padRight: function e(t, r) {
          return r.length === 2 * t + 2 ? r : e(t, r + "0");
        },
        fromAscii: function fromAscii(e) {
          for (var t = "0x", r = 0; r < e.length; ++r) {
            t += ("00" + e.charCodeAt(r).toString(16)).slice(-2);
          }

          return t;
        },
        toAscii: function toAscii(e) {
          for (var t = "", r = 2; r < e.length; r += 2) {
            t += String.fromCharCode(parseInt(e.slice(r, r + 2), 16));
          }

          return t;
        },
        fromString: function fromString(e) {
          for (var t = function t(e) {
            var t = e.toString(16);
            return t.length < 2 ? "0" + t : t;
          }, r = "0x", n = 0; n != e.length; n++) {
            var i = e.charCodeAt(n);
            if (i < 128) r += t(i);else {
              if (i < 2048) r += t(i >> 6 | 192);else {
                if (55295 < i && i < 56320) {
                  if (++n == e.length) return null;
                  var o = e.charCodeAt(n);
                  if (o < 56320 || 57343 < o) return null;
                  r += t((i = 65536 + ((1023 & i) << 10) + (1023 & o)) >> 18 | 240), r += t(i >> 12 & 63 | 128);
                } else r += t(i >> 12 | 224);

                r += t(i >> 6 & 63 | 128);
              }
              r += t(63 & i | 128);
            }
          }

          return r;
        },
        toString: function toString(e) {
          for (var t = "", r = 0, n = a(e); r < n;) {
            var i = o(e, r++);

            if (127 < i) {
              if (191 < i && i < 224) {
                if (n <= r) return null;
                i = (31 & i) << 6 | 63 & o(e, r);
              } else if (223 < i && i < 240) {
                if (n <= r + 1) return null;
                i = (15 & i) << 12 | (63 & o(e, r)) << 6 | 63 & o(e, ++r);
              } else {
                if (!(239 < i && i < 248)) return null;
                if (n <= r + 2) return null;
                i = (7 & i) << 18 | (63 & o(e, r)) << 12 | (63 & o(e, ++r)) << 6 | 63 & o(e, ++r);
              }

              ++r;
            }

            if (i <= 65535) t += String.fromCharCode(i);else {
              if (!(i <= 1114111)) return null;
              i -= 65536, t += String.fromCharCode(i >> 10 | 55296), t += String.fromCharCode(1023 & i | 56320);
            }
          }

          return t;
        },
        fromNumber: function fromNumber(e) {
          var t = e.toString(16);
          return t.length % 2 == 0 ? "0x" + t : "0x0" + t;
        },
        toNumber: function toNumber(e) {
          return parseInt(e.slice(2), 16);
        },
        fromNat: function fromNat(e) {
          return "0x0" === e ? "0x" : e.length % 2 == 0 ? e : "0x0" + e.slice(2);
        },
        toNat: function toNat(e) {
          return "0" === e[2] ? "0x" + e.slice(3) : e;
        },
        fromArray: n,
        toArray: r,
        fromUint8Array: function fromUint8Array(e) {
          return n([].slice.call(e, 0));
        },
        toUint8Array: function toUint8Array(e) {
          return new Uint8Array(r(e));
        }
      };
    }, {
      "./array.js": 172
    }],
    174: [function (e, t, r) {
      var p = "0123456789abcdef".split(""),
          b = [1, 256, 65536, 16777216],
          y = [0, 8, 16, 24],
          fe = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648],
          m = function m(e) {
        var t, r, n, i, o, a, s, u, c, f, h, d, l, p, b, y, m, v, g, w, _, A, x, M, k, E, S, U, j, I, T, C, B, N, P, R, O, L, q, D, F, H, z, K, V, G, W, X, J, Z, $, Y, Q, ee, te, re, ne, ie, oe, ae, se, ue, ce;

        for (n = 0; n < 48; n += 2) {
          i = e[0] ^ e[10] ^ e[20] ^ e[30] ^ e[40], o = e[1] ^ e[11] ^ e[21] ^ e[31] ^ e[41], a = e[2] ^ e[12] ^ e[22] ^ e[32] ^ e[42], s = e[3] ^ e[13] ^ e[23] ^ e[33] ^ e[43], u = e[4] ^ e[14] ^ e[24] ^ e[34] ^ e[44], c = e[5] ^ e[15] ^ e[25] ^ e[35] ^ e[45], f = e[6] ^ e[16] ^ e[26] ^ e[36] ^ e[46], h = e[7] ^ e[17] ^ e[27] ^ e[37] ^ e[47], t = (d = e[8] ^ e[18] ^ e[28] ^ e[38] ^ e[48]) ^ (a << 1 | s >>> 31), r = (l = e[9] ^ e[19] ^ e[29] ^ e[39] ^ e[49]) ^ (s << 1 | a >>> 31), e[0] ^= t, e[1] ^= r, e[10] ^= t, e[11] ^= r, e[20] ^= t, e[21] ^= r, e[30] ^= t, e[31] ^= r, e[40] ^= t, e[41] ^= r, t = i ^ (u << 1 | c >>> 31), r = o ^ (c << 1 | u >>> 31), e[2] ^= t, e[3] ^= r, e[12] ^= t, e[13] ^= r, e[22] ^= t, e[23] ^= r, e[32] ^= t, e[33] ^= r, e[42] ^= t, e[43] ^= r, t = a ^ (f << 1 | h >>> 31), r = s ^ (h << 1 | f >>> 31), e[4] ^= t, e[5] ^= r, e[14] ^= t, e[15] ^= r, e[24] ^= t, e[25] ^= r, e[34] ^= t, e[35] ^= r, e[44] ^= t, e[45] ^= r, t = u ^ (d << 1 | l >>> 31), r = c ^ (l << 1 | d >>> 31), e[6] ^= t, e[7] ^= r, e[16] ^= t, e[17] ^= r, e[26] ^= t, e[27] ^= r, e[36] ^= t, e[37] ^= r, e[46] ^= t, e[47] ^= r, t = f ^ (i << 1 | o >>> 31), r = h ^ (o << 1 | i >>> 31), e[8] ^= t, e[9] ^= r, e[18] ^= t, e[19] ^= r, e[28] ^= t, e[29] ^= r, e[38] ^= t, e[39] ^= r, e[48] ^= t, e[49] ^= r, p = e[0], b = e[1], G = e[11] << 4 | e[10] >>> 28, W = e[10] << 4 | e[11] >>> 28, U = e[20] << 3 | e[21] >>> 29, j = e[21] << 3 | e[20] >>> 29, ae = e[31] << 9 | e[30] >>> 23, se = e[30] << 9 | e[31] >>> 23, H = e[40] << 18 | e[41] >>> 14, z = e[41] << 18 | e[40] >>> 14, N = e[2] << 1 | e[3] >>> 31, P = e[3] << 1 | e[2] >>> 31, y = e[13] << 12 | e[12] >>> 20, m = e[12] << 12 | e[13] >>> 20, X = e[22] << 10 | e[23] >>> 22, J = e[23] << 10 | e[22] >>> 22, I = e[33] << 13 | e[32] >>> 19, T = e[32] << 13 | e[33] >>> 19, ue = e[42] << 2 | e[43] >>> 30, ce = e[43] << 2 | e[42] >>> 30, ee = e[5] << 30 | e[4] >>> 2, te = e[4] << 30 | e[5] >>> 2, R = e[14] << 6 | e[15] >>> 26, O = e[15] << 6 | e[14] >>> 26, v = e[25] << 11 | e[24] >>> 21, g = e[24] << 11 | e[25] >>> 21, Z = e[34] << 15 | e[35] >>> 17, $ = e[35] << 15 | e[34] >>> 17, C = e[45] << 29 | e[44] >>> 3, B = e[44] << 29 | e[45] >>> 3, M = e[6] << 28 | e[7] >>> 4, k = e[7] << 28 | e[6] >>> 4, re = e[17] << 23 | e[16] >>> 9, ne = e[16] << 23 | e[17] >>> 9, L = e[26] << 25 | e[27] >>> 7, q = e[27] << 25 | e[26] >>> 7, w = e[36] << 21 | e[37] >>> 11, _ = e[37] << 21 | e[36] >>> 11, Y = e[47] << 24 | e[46] >>> 8, Q = e[46] << 24 | e[47] >>> 8, K = e[8] << 27 | e[9] >>> 5, V = e[9] << 27 | e[8] >>> 5, E = e[18] << 20 | e[19] >>> 12, S = e[19] << 20 | e[18] >>> 12, ie = e[29] << 7 | e[28] >>> 25, oe = e[28] << 7 | e[29] >>> 25, D = e[38] << 8 | e[39] >>> 24, F = e[39] << 8 | e[38] >>> 24, A = e[48] << 14 | e[49] >>> 18, x = e[49] << 14 | e[48] >>> 18, e[0] = p ^ ~y & v, e[1] = b ^ ~m & g, e[10] = M ^ ~E & U, e[11] = k ^ ~S & j, e[20] = N ^ ~R & L, e[21] = P ^ ~O & q, e[30] = K ^ ~G & X, e[31] = V ^ ~W & J, e[40] = ee ^ ~re & ie, e[41] = te ^ ~ne & oe, e[2] = y ^ ~v & w, e[3] = m ^ ~g & _, e[12] = E ^ ~U & I, e[13] = S ^ ~j & T, e[22] = R ^ ~L & D, e[23] = O ^ ~q & F, e[32] = G ^ ~X & Z, e[33] = W ^ ~J & $, e[42] = re ^ ~ie & ae, e[43] = ne ^ ~oe & se, e[4] = v ^ ~w & A, e[5] = g ^ ~_ & x, e[14] = U ^ ~I & C, e[15] = j ^ ~T & B, e[24] = L ^ ~D & H, e[25] = q ^ ~F & z, e[34] = X ^ ~Z & Y, e[35] = J ^ ~$ & Q, e[44] = ie ^ ~ae & ue, e[45] = oe ^ ~se & ce, e[6] = w ^ ~A & p, e[7] = _ ^ ~x & b, e[16] = I ^ ~C & M, e[17] = T ^ ~B & k, e[26] = D ^ ~H & N, e[27] = F ^ ~z & P, e[36] = Z ^ ~Y & K, e[37] = $ ^ ~Q & V, e[46] = ae ^ ~ue & ee, e[47] = se ^ ~ce & te, e[8] = A ^ ~p & y, e[9] = x ^ ~b & m, e[18] = C ^ ~M & E, e[19] = B ^ ~k & S, e[28] = H ^ ~N & R, e[29] = z ^ ~P & O, e[38] = Y ^ ~K & G, e[39] = Q ^ ~V & W, e[48] = ue ^ ~ee & re, e[49] = ce ^ ~te & ne, e[0] ^= fe[n], e[1] ^= fe[n + 1];
        }
      },
          n = function n(a) {
        return function (e) {
          var t, r, n;

          if ("0x" === e.slice(0, 2)) {
            t = [];

            for (var i = 2, o = e.length; i < o; i += 2) {
              t.push(parseInt(e.slice(i, i + 2), 16));
            }
          } else t = e;

          return function (e, t) {
            for (var r, n = t.length, i = e.blocks, o = e.blockCount << 2, a = e.blockCount, s = e.outputBlocks, u = e.s, c = 0; c < n;) {
              if (e.reset) for (e.reset = !1, i[0] = e.block, d = 1; d < a + 1; ++d) {
                i[d] = 0;
              }
              if ("string" != typeof t) for (d = e.start; c < n && d < o; ++c) {
                i[d >> 2] |= t[c] << y[3 & d++];
              } else for (d = e.start; c < n && d < o; ++c) {
                (r = t.charCodeAt(c)) < 128 ? i[d >> 2] |= r << y[3 & d++] : (r < 2048 ? i[d >> 2] |= (192 | r >> 6) << y[3 & d++] : (r < 55296 || 57344 <= r ? i[d >> 2] |= (224 | r >> 12) << y[3 & d++] : (r = 65536 + ((1023 & r) << 10 | 1023 & t.charCodeAt(++c)), i[d >> 2] |= (240 | r >> 18) << y[3 & d++], i[d >> 2] |= (128 | r >> 12 & 63) << y[3 & d++]), i[d >> 2] |= (128 | r >> 6 & 63) << y[3 & d++]), i[d >> 2] |= (128 | 63 & r) << y[3 & d++]);
              }

              if (o <= (e.lastByteIndex = d)) {
                for (e.start = d - o, e.block = i[a], d = 0; d < a; ++d) {
                  u[d] ^= i[d];
                }

                m(u), e.reset = !0;
              } else e.start = d;
            }

            if (i[(d = e.lastByteIndex) >> 2] |= b[3 & d], e.lastByteIndex === o) for (i[0] = i[a], d = 1; d < a + 1; ++d) {
              i[d] = 0;
            }

            for (i[a - 1] |= 2147483648, d = 0; d < a; ++d) {
              u[d] ^= i[d];
            }

            m(u);

            for (var f, h = "", d = 0, l = 0; l < s;) {
              for (d = 0; d < a && l < s; ++d, ++l) {
                f = u[d], h += p[f >> 4 & 15] + p[15 & f] + p[f >> 12 & 15] + p[f >> 8 & 15] + p[f >> 20 & 15] + p[f >> 16 & 15] + p[f >> 28 & 15] + p[f >> 24 & 15];
              }

              l % a == 0 && (m(u), d = 0);
            }

            return "0x" + h;
          }({
            blocks: [],
            reset: !0,
            block: 0,
            start: 0,
            blockCount: 1600 - ((r = a) << 1) >> 5,
            outputBlocks: r >> 5,
            s: (n = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [].concat(n, n, n, n, n))
          }, t);
        };
      };

      t.exports = {
        keccak256: n(256),
        keccak512: n(512),
        keccak256s: n(256),
        keccak512s: n(512)
      };
    }, {}],
    175: [function (e, t, r) {
      var n = e("is-function");

      t.exports = function (e, t, r) {
        if (!n(t)) throw new TypeError("iterator must be a function");
        arguments.length < 3 && (r = this);
        "[object Array]" === i.call(e) ? function (e, t, r) {
          for (var n = 0, i = e.length; n < i; n++) {
            o.call(e, n) && t.call(r, e[n], n, e);
          }
        }(e, t, r) : "string" == typeof e ? function (e, t, r) {
          for (var n = 0, i = e.length; n < i; n++) {
            t.call(r, e.charAt(n), n, e);
          }
        }(e, t, r) : function (e, t, r) {
          for (var n in e) {
            o.call(e, n) && t.call(r, e[n], n, e);
          }
        }(e, t, r);
      };

      var i = Object.prototype.toString,
          o = Object.prototype.hasOwnProperty;
    }, {
      "is-function": 177
    }],
    176: [function (e, r, t) {
      (function (e) {
        var t;
        t = "undefined" != typeof window ? window : void 0 !== e ? e : "undefined" != typeof self ? self : {}, r.exports = t;
      }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, {}],
    177: [function (e, t, r) {
      t.exports = function (e) {
        var t = n.call(e);
        return "[object Function]" === t || "function" == typeof e && "[object RegExp]" !== t || "undefined" != typeof window && (e === window.setTimeout || e === window.alert || e === window.confirm || e === window.prompt);
      };

      var n = Object.prototype.toString;
    }, {}],
    178: [function (e, t, r) {
      var u = Object.getOwnPropertySymbols,
          c = Object.prototype.hasOwnProperty,
          f = Object.prototype.propertyIsEnumerable;
      t.exports = function () {
        try {
          if (!Object.assign) return !1;
          var e = new String("abc");
          if (e[5] = "de", "5" === Object.getOwnPropertyNames(e)[0]) return !1;

          for (var t = {}, r = 0; r < 10; r++) {
            t["_" + String.fromCharCode(r)] = r;
          }

          if ("0123456789" !== Object.getOwnPropertyNames(t).map(function (e) {
            return t[e];
          }).join("")) return !1;
          var n = {};
          return "abcdefghijklmnopqrst".split("").forEach(function (e) {
            n[e] = e;
          }), "abcdefghijklmnopqrst" === Object.keys(Object.assign({}, n)).join("");
        } catch (e) {
          return !1;
        }
      }() ? Object.assign : function (e, t) {
        for (var r, n, i = function (e) {
          if (null == e) throw new TypeError("Object.assign cannot be called with null or undefined");
          return Object(e);
        }(e), o = 1; o < arguments.length; o++) {
          for (var a in r = Object(arguments[o])) {
            c.call(r, a) && (i[a] = r[a]);
          }

          if (u) {
            n = u(r);

            for (var s = 0; s < n.length; s++) {
              f.call(r, n[s]) && (i[n[s]] = r[n[s]]);
            }
          }
        }

        return i;
      };
    }, {}],
    179: [function (e, t, r) {
      var a = e("trim"),
          n = e("for-each");

      t.exports = function (e) {
        if (!e) return {};
        var o = {};
        return n(a(e).split("\n"), function (e) {
          var t,
              r = e.indexOf(":"),
              n = a(e.slice(0, r)).toLowerCase(),
              i = a(e.slice(r + 1));
          void 0 === o[n] ? o[n] = i : (t = o[n], "[object Array]" === Object.prototype.toString.call(t) ? o[n].push(i) : o[n] = [o[n], i]);
        }), o;
      };
    }, {
      "for-each": 175,
      trim: 186
    }],
    180: [function (e, t, r) {
      var n = e("strict-uri-encode"),
          a = e("object-assign"),
          s = e("decode-uri-component");

      function u(e, t) {
        return t.encode ? t.strict ? n(e) : encodeURIComponent(e) : e;
      }

      function i(e) {
        var t = e.indexOf("?");
        return -1 === t ? "" : e.slice(t + 1);
      }

      function o(e, t) {
        var i = function (e) {
          var n;

          switch (e.arrayFormat) {
            case "index":
              return function (e, t, r) {
                n = /\[(\d*)\]$/.exec(e), e = e.replace(/\[\d*\]$/, ""), n ? (void 0 === r[e] && (r[e] = {}), r[e][n[1]] = t) : r[e] = t;
              };

            case "bracket":
              return function (e, t, r) {
                n = /(\[\])$/.exec(e), e = e.replace(/\[\]$/, ""), n ? void 0 !== r[e] ? r[e] = [].concat(r[e], t) : r[e] = [t] : r[e] = t;
              };

            default:
              return function (e, t, r) {
                void 0 !== r[e] ? r[e] = [].concat(r[e], t) : r[e] = t;
              };
          }
        }(t = a({
          arrayFormat: "none"
        }, t)),
            o = Object.create(null);

        return "string" != typeof e ? o : (e = e.trim().replace(/^[?#&]/, "")) ? (e.split("&").forEach(function (e) {
          var t = e.replace(/\+/g, " ").split("="),
              r = t.shift(),
              n = 0 < t.length ? t.join("=") : void 0;
          n = void 0 === n ? null : s(n), i(s(r), n, o);
        }), Object.keys(o).sort().reduce(function (e, t) {
          var r = o[t];
          return Boolean(r) && "object" === (void 0 === r ? "undefined" : _typeof(r)) && !Array.isArray(r) ? e[t] = function e(t) {
            return Array.isArray(t) ? t.sort() : "object" === (void 0 === t ? "undefined" : _typeof(t)) ? e(Object.keys(t)).sort(function (e, t) {
              return Number(e) - Number(t);
            }).map(function (e) {
              return t[e];
            }) : t;
          }(r) : e[t] = r, e;
        }, Object.create(null))) : o;
      }

      r.extract = i, r.parse = o, r.stringify = function (n, i) {
        !1 === (i = a({
          encode: !0,
          strict: !0,
          arrayFormat: "none"
        }, i)).sort && (i.sort = function () {});

        var o = function (n) {
          switch (n.arrayFormat) {
            case "index":
              return function (e, t, r) {
                return null === t ? [u(e, n), "[", r, "]"].join("") : [u(e, n), "[", u(r, n), "]=", u(t, n)].join("");
              };

            case "bracket":
              return function (e, t) {
                return null === t ? u(e, n) : [u(e, n), "[]=", u(t, n)].join("");
              };

            default:
              return function (e, t) {
                return null === t ? u(e, n) : [u(e, n), "=", u(t, n)].join("");
              };
          }
        }(i);

        return n ? Object.keys(n).sort(i.sort).map(function (t) {
          var e = n[t];
          if (void 0 === e) return "";
          if (null === e) return u(t, i);

          if (Array.isArray(e)) {
            var r = [];
            return e.slice().forEach(function (e) {
              void 0 !== e && r.push(o(t, e, r.length));
            }), r.join("&");
          }

          return u(t, i) + "=" + u(e, i);
        }).filter(function (e) {
          return 0 < e.length;
        }).join("&") : "";
      }, r.parseUrl = function (e, t) {
        return {
          url: e.split("?")[0] || "",
          query: o(i(e), t)
        };
      };
    }, {
      "decode-uri-component": 171,
      "object-assign": 178,
      "strict-uri-encode": 181
    }],
    181: [function (e, t, r) {
      t.exports = function (e) {
        return encodeURIComponent(e).replace(/[!'()*]/g, function (e) {
          return "%" + e.charCodeAt(0).toString(16).toUpperCase();
        });
      };
    }, {}],
    182: [function (e, t, r) {
      var n = function n() {
        throw "This swarm.js function isn't available on the browser.";
      },
          i = {
        readFile: n
      },
          o = {
        download: n,
        safeDownloadArchived: n,
        directoryTree: n
      },
          a = {
        platform: n,
        arch: n
      },
          s = {
        join: n,
        slice: n
      },
          u = {
        spawn: n
      },
          c = {
        lookup: n
      },
          f = e("xhr-request-promise"),
          h = e("eth-lib/lib/bytes"),
          d = e("./swarm-hash.js"),
          l = e("./pick.js"),
          p = e("./swarm");

      t.exports = p({
        fsp: i,
        files: o,
        os: a,
        path: s,
        child_process: u,
        defaultArchives: {},
        mimetype: c,
        request: f,
        downloadUrl: null,
        bytes: h,
        hash: d,
        pick: l
      });
    }, {
      "./pick.js": 183,
      "./swarm": 185,
      "./swarm-hash.js": 184,
      "eth-lib/lib/bytes": 173,
      "xhr-request-promise": 189
    }],
    183: [function (e, t, r) {
      var n = function n(c) {
        return function () {
          return new Promise(function (u, e) {
            var t = function t(e) {
              var o = {},
                  a = e.target.files.length,
                  s = 0;
              [].map.call(e.target.files, function (i) {
                var e = new FileReader();
                e.onload = function (e) {
                  var t = new Uint8Array(e.target.result);

                  if ("directory" === c) {
                    var r = i.webkitRelativePath;
                    o[r.slice(r.indexOf("/") + 1)] = {
                      type: "text/plain",
                      data: t
                    }, ++s === a && u(o);
                  } else if ("file" === c) {
                    var n = i.webkitRelativePath;
                    u({
                      type: mimetype.lookup(n),
                      data: t
                    });
                  } else u(t);
                }, e.readAsArrayBuffer(i);
              });
            },
                r = void 0;

            "directory" === c ? ((r = document.createElement("input")).addEventListener("change", t), r.type = "file", r.webkitdirectory = !0, r.mozdirectory = !0, r.msdirectory = !0, r.odirectory = !0, r.directory = !0) : ((r = document.createElement("input")).addEventListener("change", t), r.type = "file");
            var n = document.createEvent("MouseEvents");
            n.initEvent("click", !0, !1), r.dispatchEvent(n);
          });
        };
      };

      t.exports = {
        data: n("data"),
        file: n("file"),
        directory: n("directory")
      };
    }, {}],
    184: [function (e, t, r) {
      var i = e("eth-lib/lib/hash").keccak256,
          s = e("eth-lib/lib/bytes"),
          u = function u(e, t) {
        var r = s.reverse(s.pad(6, s.fromNumber(e))),
            n = s.flatten([r, "0x0000", t]);
        return i(n).slice(2);
      };

      t.exports = function e(t) {
        "string" == typeof t && "0x" !== t.slice(0, 2) ? t = s.fromString(t) : "string" != typeof t && void 0 !== t.length && (t = s.fromUint8Array(t));
        var r = s.length(t);
        if (r <= 4096) return u(r, t);

        for (var n = 4096; 128 * n < r;) {
          n *= 128;
        }

        for (var i = [], o = 0; o < r; o += n) {
          var a = n < r - o ? n : r - o;
          i.push(e(s.slice(t, o, o + a)));
        }

        return u(r, s.flatten(i));
      };
    }, {
      "eth-lib/lib/bytes": 173,
      "eth-lib/lib/hash": 174
    }],
    185: [function (e, t, r) {
      t.exports = function (e) {
        var o = e.fsp,
            s = e.files,
            u = e.os,
            a = e.path,
            p = e.child_process,
            c = e.mimetype,
            f = e.defaultArchives,
            h = e.request,
            d = e.downloadUrl,
            t = e.bytes,
            n = e.hash,
            i = e.pick,
            l = function l(i) {
          return function (e) {
            for (var t = {}, r = 0, n = i.length; r < n; ++r) {
              t[i[r]] = e[r];
            }

            return t;
          };
        },
            b = function b(t) {
          return function (e) {
            return t + "/bzzr:/" + e;
          };
        },
            y = function y(t) {
          return function (e) {
            return h(b(t)(e), {
              responseType: "arraybuffer"
            }).then(function (e) {
              var r,
                  t = new Uint8Array(e);
              if (r = t, function (e) {
                if (r.length !== e.length) return !1;
                var t = 0;

                for (r.length; t < r; ++t) {
                  if (r[t] !== e[t]) return !1;
                }

                return !0;
              }([52, 48, 52, 32, 112, 97, 103, 101, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 10])) throw "Error 404.";
              return t;
            });
          };
        },
            m = function m(r) {
          return function (e) {
            return function s(e) {
              return function (a) {
                return function (o) {
                  var t = function t(e) {
                    return void 0 === e.path ? Promise.resolve() : "application/bzz-manifest+json" === e.contentType ? s(e.hash)(a + e.path)(o) : Promise.resolve((i = a + e.path, r = {
                      type: (n = e).contentType,
                      hash: n.hash
                    }, (t = o)[i] = r, t));
                    var t, r, n, i;
                  };

                  return y(r)(e).then(function (e) {
                    return JSON.parse(R(e)).entries;
                  }).then(function (e) {
                    return Promise.all(e.map(t));
                  }).then(function () {
                    return o;
                  });
                };
              };
            }(e)("")({});
          };
        },
            v = function v(t) {
          return function (e) {
            return m(t)(e).then(function (t) {
              return l(Object.keys(t))(Object.keys(t).map(function (e) {
                return t[e].hash;
              }));
            });
          };
        },
            g = function g(o) {
          return function (e) {
            return m(o)(e).then(function (t) {
              var r = Object.keys(t),
                  e = r.map(function (e) {
                return t[e].hash;
              }),
                  n = r.map(function (e) {
                return t[e].type;
              }),
                  i = e.map(y(o));
              return Promise.all(i).then(function (e) {
                return l(r)(e.map(function (e, t) {
                  return {
                    type: n[t],
                    data: e
                  };
                }));
              });
            });
          };
        },
            w = function w(r) {
          return function (t) {
            return function (e) {
              return s.download(b(r)(t))(e);
            };
          };
        },
            _ = function _(o) {
          return function (e) {
            return function (i) {
              return v(o)(e).then(function (e) {
                var t = [];

                for (var r in e) {
                  if (0 < r.length) {
                    var n = a.join(i, r);
                    t.push(w(o)(e[r])(n));
                  }
                }

                return Promise.all(t).then(function () {
                  return i;
                });
              });
            };
          };
        },
            A = function A(t) {
          return function (e) {
            return h(t + "/bzzr:/", {
              body: "string" == typeof e ? O(e) : e,
              method: "POST"
            });
          };
        },
            x = function x(u) {
          return function (s) {
            return function (a) {
              return function (o) {
                return function t(r) {
                  var e = "/" === a[0] ? a : "/" + a,
                      n = u + "/bzz:/" + s + e,
                      i = {
                    method: "PUT",
                    headers: {
                      "Content-Type": o.type
                    },
                    body: o.data
                  };
                  return h(n, i).then(function (e) {
                    if (-1 !== e.indexOf("error")) throw e;
                    return e;
                  })["catch"](function (e) {
                    return 0 < r && t(r - 1);
                  });
                }(3);
              };
            };
          };
        },
            M = function M(t) {
          return function (e) {
            return k(t)({
              "": e
            });
          };
        },
            r = function r(_r) {
          return function (t) {
            return o.readFile(t).then(function (e) {
              return M(_r)({
                type: c.lookup(t),
                data: e
              });
            });
          };
        },
            k = function k(i) {
          return function (n) {
            return A(i)("{}").then(function (e) {
              return Object.keys(n).reduce(function (e, t) {
                return e.then((r = t, function (e) {
                  return x(i)(e)(r)(n[r]);
                }));
                var r;
              }, Promise.resolve(e));
            });
          };
        },
            E = function E(t) {
          return function (e) {
            return o.readFile(e).then(A(t));
          };
        },
            S = function S(e) {
          return function (t) {
            return function (i) {
              return s.directoryTree(i).then(function (n) {
                return Promise.all(n.map(function (e) {
                  return o.readFile(e);
                })).then(function (e) {
                  var t = n.map(function (e) {
                    return e.slice(i.length);
                  }),
                      r = n.map(function (e) {
                    return c.lookup(e) || "text/plain";
                  });
                  return l(t)(e.map(function (e, t) {
                    return {
                      type: r[t],
                      data: e
                    };
                  }));
                });
              }).then(function (e) {
                return i = t ? {
                  "": e[t]
                } : {}, function (e) {
                  var t = {};

                  for (var r in i) {
                    t[r] = i[r];
                  }

                  for (var n in e) {
                    t[n] = e[n];
                  }

                  return t;
                }(e);
                var i;
              }).then(k(e));
            };
          };
        },
            U = function U(t) {
          return function (e) {
            if ("data" === e.pick) return i.data().then(A(t));
            if ("file" === e.pick) return i.file().then(M(t));
            if ("directory" === e.pick) return i.directory().then(k(t));
            if (e.path) switch (e.kind) {
              case "data":
                return E(t)(e.path);

              case "file":
                return r(t)(e.path);

              case "directory":
                return S(t)(e.defaultFile)(e.path);
            } else {
              if (e.length || "string" == typeof e) return A(t)(e);
              if (e instanceof Object) return k(t)(e);
            }
            return Promise.reject(new Error("Bad arguments"));
          };
        },
            j = function j(n) {
          return function (r) {
            return function (t) {
              return N(n)(r).then(function (e) {
                return e ? t ? _(n)(r)(t) : g(n)(r) : t ? w(n)(r)(t) : y(n)(r);
              });
            };
          };
        },
            I = function I(e, t) {
          var r = u.platform().replace("win32", "windows") + "-" + ("x64" === u.arch() ? "amd64" : "386"),
              n = (t || f)[r],
              i = d + n.archive + ".tar.gz",
              o = n.archiveMD5,
              a = n.binaryMD5;
          return s.safeDownloadArchived(i)(o)(a)(e);
        },
            T = function T(l) {
          return new Promise(function (t, e) {
            var r = p.spawn,
                n = function n(t) {
              return function (e) {
                return -1 !== ("" + e).indexOf(t);
              };
            },
                i = l.account,
                o = l.password,
                a = l.dataDir,
                s = l.ensApi,
                u = l.privateKey,
                c = 0,
                f = r(l.binPath, ["--bzzaccount", i || u, "--datadir", a, "--ens-api", s]),
                h = function h(e) {
              0 === c && n("Passphrase")(e) ? setTimeout(function () {
                c = 1, f.stdin.write(o + "\n");
              }, 500) : n("Swarm http proxy started")(e) && (c = 2, clearTimeout(d), t(f));
            };

            f.stdout.on("data", h), f.stderr.on("data", h);
            var d = setTimeout(function () {
              return e(new Error("Couldn't start swarm process."));
            }, 2e4);
          });
        },
            C = function C(n) {
          return new Promise(function (e, t) {
            n.stderr.removeAllListeners("data"), n.stdout.removeAllListeners("data"), n.stdin.removeAllListeners("error"), n.removeAllListeners("error"), n.removeAllListeners("exit"), n.kill("SIGINT");
            var r = setTimeout(function () {
              return n.kill("SIGKILL");
            }, 8e3);
            n.once("close", function () {
              clearTimeout(r), e();
            });
          });
        },
            B = function B(e) {
          return A(e)("test").then(function (e) {
            return "c9a99c7d326dcc6316f32fe2625b311f6dc49a175e6877681ded93137d3569e7" === e;
          })["catch"](function () {
            return !1;
          });
        },
            N = function N(t) {
          return function (e) {
            return y(t)(e).then(function (e) {
              try {
                return !!JSON.parse(R(e)).entries;
              } catch (e) {
                return !1;
              }
            });
          };
        },
            P = function P(a) {
          return function (e, t, r, n, i) {
            var o;
            return void 0 !== e && (o = a(e)), void 0 !== t && (o = a(t)), void 0 !== r && (o = a(r)), void 0 !== n && (o = a(n)), void 0 !== i && (o = a(i)), o;
          };
        },
            R = function R(e) {
          return t.toString(t.fromUint8Array(e));
        },
            O = function O(e) {
          return t.toUint8Array(t.fromString(e));
        },
            L = function L(r) {
          return {
            download: function download(e, t) {
              return j(r)(e)(t);
            },
            downloadData: P(y(r)),
            downloadDataToDisk: P(w(r)),
            downloadDirectory: P(g(r)),
            downloadDirectoryToDisk: P(_(r)),
            downloadEntries: P(m(r)),
            downloadRoutes: P(v(r)),
            isAvailable: function isAvailable() {
              return B(r);
            },
            upload: function upload(e) {
              return U(r)(e);
            },
            uploadData: P(A(r)),
            uploadFile: P(M(r)),
            uploadFileFromDisk: P(M(r)),
            uploadDataFromDisk: P(E(r)),
            uploadDirectory: P(k(r)),
            uploadDirectoryFromDisk: P(S(r)),
            uploadToManifest: P(x(r)),
            pick: i,
            hash: n,
            fromString: O,
            toString: R
          };
        };

        return {
          at: L,
          local: function local(r) {
            return function (t) {
              return B("http://localhost:8500").then(function (e) {
                return e ? t(L("http://localhost:8500")).then(function () {}) : I(r.binPath, r.archives).onData(function (e) {
                  return (r.onProgress || function () {})(e.length);
                }).then(function () {
                  return T(r);
                }).then(function (e) {
                  return t(L("http://localhost:8500")).then(function () {
                    return e;
                  });
                }).then(C);
              });
            };
          },
          download: j,
          downloadBinary: I,
          downloadData: y,
          downloadDataToDisk: w,
          downloadDirectory: g,
          downloadDirectoryToDisk: _,
          downloadEntries: m,
          downloadRoutes: v,
          isAvailable: B,
          startProcess: T,
          stopProcess: C,
          upload: U,
          uploadData: A,
          uploadDataFromDisk: E,
          uploadFile: M,
          uploadFileFromDisk: r,
          uploadDirectory: k,
          uploadDirectoryFromDisk: S,
          uploadToManifest: x,
          pick: i,
          hash: n,
          fromString: O,
          toString: R
        };
      };
    }, {}],
    186: [function (e, t, r) {
      (r = t.exports = function (e) {
        return e.replace(/^\s*|\s*$/g, "");
      }).left = function (e) {
        return e.replace(/^\s*/, "");
      }, r.right = function (e) {
        return e.replace(/\s*$/, "");
      };
    }, {}],
    187: [function (e, F, H) {
      (function () {
        var e = this,
            t = e._,
            n = Array.prototype,
            a = Object.prototype,
            r = Function.prototype,
            i = n.push,
            u = n.slice,
            d = a.toString,
            o = a.hasOwnProperty,
            s = Array.isArray,
            c = Object.keys,
            f = r.bind,
            h = Object.create,
            l = function l() {},
            p = function e(t) {
          return t instanceof e ? t : this instanceof e ? void (this._wrapped = t) : new e(t);
        };

        void 0 !== H ? (void 0 !== F && F.exports && (H = F.exports = p), H._ = p) : e._ = p, p.VERSION = "1.8.3";

        var b = function b(i, o, e) {
          if (void 0 === o) return i;

          switch (null == e ? 3 : e) {
            case 1:
              return function (e) {
                return i.call(o, e);
              };

            case 2:
              return function (e, t) {
                return i.call(o, e, t);
              };

            case 3:
              return function (e, t, r) {
                return i.call(o, e, t, r);
              };

            case 4:
              return function (e, t, r, n) {
                return i.call(o, e, t, r, n);
              };
          }

          return function () {
            return i.apply(o, arguments);
          };
        },
            y = function y(e, t, r) {
          return null == e ? p.identity : p.isFunction(e) ? b(e, t, r) : p.isObject(e) ? p.matcher(e) : p.property(e);
        };

        p.iteratee = function (e, t) {
          return y(e, t, 1 / 0);
        };

        var m = function m(u, c) {
          return function (e) {
            var t = arguments.length;
            if (t < 2 || null == e) return e;

            for (var r = 1; r < t; r++) {
              for (var n = arguments[r], i = u(n), o = i.length, a = 0; a < o; a++) {
                var s = i[a];
                c && void 0 !== e[s] || (e[s] = n[s]);
              }
            }

            return e;
          };
        },
            v = function v(e) {
          if (!p.isObject(e)) return {};
          if (h) return h(e);
          l.prototype = e;
          var t = new l();
          return l.prototype = null, t;
        },
            g = function g(t) {
          return function (e) {
            return null == e ? void 0 : e[t];
          };
        },
            w = Math.pow(2, 53) - 1,
            _ = g("length"),
            A = function A(e) {
          var t = _(e);

          return "number" == typeof t && 0 <= t && t <= w;
        };

        function x(s) {
          return function (e, t, r, n) {
            t = b(t, n, 4);
            var i = !A(e) && p.keys(e),
                o = (i || e).length,
                a = 0 < s ? 0 : o - 1;
            return arguments.length < 3 && (r = e[i ? i[a] : a], a += s), function (e, t, r, n, i, o) {
              for (; 0 <= i && i < o; i += s) {
                var a = n ? n[i] : i;
                r = t(r, e[a], a, e);
              }

              return r;
            }(e, t, r, i, a, o);
          };
        }

        p.each = p.forEach = function (e, t, r) {
          var n, i;
          if (t = b(t, r), A(e)) for (n = 0, i = e.length; n < i; n++) {
            t(e[n], n, e);
          } else {
            var o = p.keys(e);

            for (n = 0, i = o.length; n < i; n++) {
              t(e[o[n]], o[n], e);
            }
          }
          return e;
        }, p.map = p.collect = function (e, t, r) {
          t = y(t, r);

          for (var n = !A(e) && p.keys(e), i = (n || e).length, o = Array(i), a = 0; a < i; a++) {
            var s = n ? n[a] : a;
            o[a] = t(e[s], s, e);
          }

          return o;
        }, p.reduce = p.foldl = p.inject = x(1), p.reduceRight = p.foldr = x(-1), p.find = p.detect = function (e, t, r) {
          var n;
          if (void 0 !== (n = A(e) ? p.findIndex(e, t, r) : p.findKey(e, t, r)) && -1 !== n) return e[n];
        }, p.filter = p.select = function (e, n, t) {
          var i = [];
          return n = y(n, t), p.each(e, function (e, t, r) {
            n(e, t, r) && i.push(e);
          }), i;
        }, p.reject = function (e, t, r) {
          return p.filter(e, p.negate(y(t)), r);
        }, p.every = p.all = function (e, t, r) {
          t = y(t, r);

          for (var n = !A(e) && p.keys(e), i = (n || e).length, o = 0; o < i; o++) {
            var a = n ? n[o] : o;
            if (!t(e[a], a, e)) return !1;
          }

          return !0;
        }, p.some = p.any = function (e, t, r) {
          t = y(t, r);

          for (var n = !A(e) && p.keys(e), i = (n || e).length, o = 0; o < i; o++) {
            var a = n ? n[o] : o;
            if (t(e[a], a, e)) return !0;
          }

          return !1;
        }, p.contains = p.includes = p.include = function (e, t, r, n) {
          return A(e) || (e = p.values(e)), ("number" != typeof r || n) && (r = 0), 0 <= p.indexOf(e, t, r);
        }, p.invoke = function (e, r) {
          var n = u.call(arguments, 2),
              i = p.isFunction(r);
          return p.map(e, function (e) {
            var t = i ? r : e[r];
            return null == t ? t : t.apply(e, n);
          });
        }, p.pluck = function (e, t) {
          return p.map(e, p.property(t));
        }, p.where = function (e, t) {
          return p.filter(e, p.matcher(t));
        }, p.findWhere = function (e, t) {
          return p.find(e, p.matcher(t));
        }, p.max = function (e, n, t) {
          var r,
              i,
              o = -1 / 0,
              a = -1 / 0;
          if (null == n && null != e) for (var s = 0, u = (e = A(e) ? e : p.values(e)).length; s < u; s++) {
            r = e[s], o < r && (o = r);
          } else n = y(n, t), p.each(e, function (e, t, r) {
            i = n(e, t, r), (a < i || i === -1 / 0 && o === -1 / 0) && (o = e, a = i);
          });
          return o;
        }, p.min = function (e, n, t) {
          var r,
              i,
              o = 1 / 0,
              a = 1 / 0;
          if (null == n && null != e) for (var s = 0, u = (e = A(e) ? e : p.values(e)).length; s < u; s++) {
            (r = e[s]) < o && (o = r);
          } else n = y(n, t), p.each(e, function (e, t, r) {
            ((i = n(e, t, r)) < a || i === 1 / 0 && o === 1 / 0) && (o = e, a = i);
          });
          return o;
        }, p.shuffle = function (e) {
          for (var t, r = A(e) ? e : p.values(e), n = r.length, i = Array(n), o = 0; o < n; o++) {
            (t = p.random(0, o)) !== o && (i[o] = i[t]), i[t] = r[o];
          }

          return i;
        }, p.sample = function (e, t, r) {
          return null == t || r ? (A(e) || (e = p.values(e)), e[p.random(e.length - 1)]) : p.shuffle(e).slice(0, Math.max(0, t));
        }, p.sortBy = function (e, n, t) {
          return n = y(n, t), p.pluck(p.map(e, function (e, t, r) {
            return {
              value: e,
              index: t,
              criteria: n(e, t, r)
            };
          }).sort(function (e, t) {
            var r = e.criteria,
                n = t.criteria;

            if (r !== n) {
              if (n < r || void 0 === r) return 1;
              if (r < n || void 0 === n) return -1;
            }

            return e.index - t.index;
          }), "value");
        };

        var M = function M(a) {
          return function (n, i, e) {
            var o = {};
            return i = y(i, e), p.each(n, function (e, t) {
              var r = i(e, t, n);
              a(o, e, r);
            }), o;
          };
        };

        p.groupBy = M(function (e, t, r) {
          p.has(e, r) ? e[r].push(t) : e[r] = [t];
        }), p.indexBy = M(function (e, t, r) {
          e[r] = t;
        }), p.countBy = M(function (e, t, r) {
          p.has(e, r) ? e[r]++ : e[r] = 1;
        }), p.toArray = function (e) {
          return e ? p.isArray(e) ? u.call(e) : A(e) ? p.map(e, p.identity) : p.values(e) : [];
        }, p.size = function (e) {
          return null == e ? 0 : A(e) ? e.length : p.keys(e).length;
        }, p.partition = function (e, n, t) {
          n = y(n, t);
          var i = [],
              o = [];
          return p.each(e, function (e, t, r) {
            (n(e, t, r) ? i : o).push(e);
          }), [i, o];
        }, p.first = p.head = p.take = function (e, t, r) {
          if (null != e) return null == t || r ? e[0] : p.initial(e, e.length - t);
        }, p.initial = function (e, t, r) {
          return u.call(e, 0, Math.max(0, e.length - (null == t || r ? 1 : t)));
        }, p.last = function (e, t, r) {
          if (null != e) return null == t || r ? e[e.length - 1] : p.rest(e, Math.max(0, e.length - t));
        }, p.rest = p.tail = p.drop = function (e, t, r) {
          return u.call(e, null == t || r ? 1 : t);
        }, p.compact = function (e) {
          return p.filter(e, p.identity);
        };

        var k = function e(t, r, n, i) {
          for (var o = [], a = 0, s = i || 0, u = _(t); s < u; s++) {
            var c = t[s];

            if (A(c) && (p.isArray(c) || p.isArguments(c))) {
              r || (c = e(c, r, n));
              var f = 0,
                  h = c.length;

              for (o.length += h; f < h;) {
                o[a++] = c[f++];
              }
            } else n || (o[a++] = c);
          }

          return o;
        };

        function E(o) {
          return function (e, t, r) {
            t = y(t, r);

            for (var n = _(e), i = 0 < o ? 0 : n - 1; 0 <= i && i < n; i += o) {
              if (t(e[i], i, e)) return i;
            }

            return -1;
          };
        }

        function S(o, a, s) {
          return function (e, t, r) {
            var n = 0,
                i = _(e);

            if ("number" == typeof r) 0 < o ? n = 0 <= r ? r : Math.max(r + i, n) : i = 0 <= r ? Math.min(r + 1, i) : r + i + 1;else if (s && r && i) return e[r = s(e, t)] === t ? r : -1;
            if (t != t) return 0 <= (r = a(u.call(e, n, i), p.isNaN)) ? r + n : -1;

            for (r = 0 < o ? n : i - 1; 0 <= r && r < i; r += o) {
              if (e[r] === t) return r;
            }

            return -1;
          };
        }

        p.flatten = function (e, t) {
          return k(e, t, !1);
        }, p.without = function (e) {
          return p.difference(e, u.call(arguments, 1));
        }, p.uniq = p.unique = function (e, t, r, n) {
          p.isBoolean(t) || (n = r, r = t, t = !1), null != r && (r = y(r, n));

          for (var i = [], o = [], a = 0, s = _(e); a < s; a++) {
            var u = e[a],
                c = r ? r(u, a, e) : u;
            t ? (a && o === c || i.push(u), o = c) : r ? p.contains(o, c) || (o.push(c), i.push(u)) : p.contains(i, u) || i.push(u);
          }

          return i;
        }, p.union = function () {
          return p.uniq(k(arguments, !0, !0));
        }, p.intersection = function (e) {
          for (var t = [], r = arguments.length, n = 0, i = _(e); n < i; n++) {
            var o = e[n];

            if (!p.contains(t, o)) {
              for (var a = 1; a < r && p.contains(arguments[a], o); a++) {
                ;
              }

              a === r && t.push(o);
            }
          }

          return t;
        }, p.difference = function (e) {
          var t = k(arguments, !0, !0, 1);
          return p.filter(e, function (e) {
            return !p.contains(t, e);
          });
        }, p.zip = function () {
          return p.unzip(arguments);
        }, p.unzip = function (e) {
          for (var t = e && p.max(e, _).length || 0, r = Array(t), n = 0; n < t; n++) {
            r[n] = p.pluck(e, n);
          }

          return r;
        }, p.object = function (e, t) {
          for (var r = {}, n = 0, i = _(e); n < i; n++) {
            t ? r[e[n]] = t[n] : r[e[n][0]] = e[n][1];
          }

          return r;
        }, p.findIndex = E(1), p.findLastIndex = E(-1), p.sortedIndex = function (e, t, r, n) {
          for (var i = (r = y(r, n, 1))(t), o = 0, a = _(e); o < a;) {
            var s = Math.floor((o + a) / 2);
            r(e[s]) < i ? o = s + 1 : a = s;
          }

          return o;
        }, p.indexOf = S(1, p.findIndex, p.sortedIndex), p.lastIndexOf = S(-1, p.findLastIndex), p.range = function (e, t, r) {
          null == t && (t = e || 0, e = 0), r = r || 1;

          for (var n = Math.max(Math.ceil((t - e) / r), 0), i = Array(n), o = 0; o < n; o++, e += r) {
            i[o] = e;
          }

          return i;
        };

        var U = function U(e, t, r, n, i) {
          if (!(n instanceof t)) return e.apply(r, i);
          var o = v(e.prototype),
              a = e.apply(o, i);
          return p.isObject(a) ? a : o;
        };

        p.bind = function (t, r) {
          if (f && t.bind === f) return f.apply(t, u.call(arguments, 1));
          if (!p.isFunction(t)) throw new TypeError("Bind must be called on a function");
          var n = u.call(arguments, 2);
          return function e() {
            return U(t, e, r, this, n.concat(u.call(arguments)));
          };
        }, p.partial = function (o) {
          var a = u.call(arguments, 1);
          return function e() {
            for (var t = 0, r = a.length, n = Array(r), i = 0; i < r; i++) {
              n[i] = a[i] === p ? arguments[t++] : a[i];
            }

            for (; t < arguments.length;) {
              n.push(arguments[t++]);
            }

            return U(o, e, this, this, n);
          };
        }, p.bindAll = function (e) {
          var t,
              r,
              n = arguments.length;
          if (n <= 1) throw new Error("bindAll must be passed function names");

          for (t = 1; t < n; t++) {
            e[r = arguments[t]] = p.bind(e[r], e);
          }

          return e;
        }, p.memoize = function (i, o) {
          var e = function e(t) {
            var r = e.cache,
                n = "" + (o ? o.apply(this, arguments) : t);
            return p.has(r, n) || (r[n] = i.apply(this, arguments)), r[n];
          };

          return e.cache = {}, e;
        }, p.delay = function (e, t) {
          var r = u.call(arguments, 2);
          return setTimeout(function () {
            return e.apply(null, r);
          }, t);
        }, p.defer = p.partial(p.delay, p, 1), p.throttle = function (r, n, i) {
          var o,
              a,
              s,
              u = null,
              c = 0;
          i || (i = {});

          var f = function f() {
            c = !1 === i.leading ? 0 : p.now(), u = null, s = r.apply(o, a), u || (o = a = null);
          };

          return function () {
            var e = p.now();
            c || !1 !== i.leading || (c = e);
            var t = n - (e - c);
            return o = this, a = arguments, t <= 0 || n < t ? (u && (clearTimeout(u), u = null), c = e, s = r.apply(o, a), u || (o = a = null)) : u || !1 === i.trailing || (u = setTimeout(f, t)), s;
          };
        }, p.debounce = function (r, n, i) {
          var o,
              a,
              s,
              u,
              c,
              t = function e() {
            var t = p.now() - u;
            t < n && 0 <= t ? o = setTimeout(e, n - t) : (o = null, i || (c = r.apply(s, a), o || (s = a = null)));
          };

          return function () {
            s = this, a = arguments, u = p.now();
            var e = i && !o;
            return o || (o = setTimeout(t, n)), e && (c = r.apply(s, a), s = a = null), c;
          };
        }, p.wrap = function (e, t) {
          return p.partial(t, e);
        }, p.negate = function (e) {
          return function () {
            return !e.apply(this, arguments);
          };
        }, p.compose = function () {
          var r = arguments,
              n = r.length - 1;
          return function () {
            for (var e = n, t = r[n].apply(this, arguments); e--;) {
              t = r[e].call(this, t);
            }

            return t;
          };
        }, p.after = function (e, t) {
          return function () {
            if (--e < 1) return t.apply(this, arguments);
          };
        }, p.before = function (e, t) {
          var r;
          return function () {
            return 0 < --e && (r = t.apply(this, arguments)), e <= 1 && (t = null), r;
          };
        }, p.once = p.partial(p.before, 2);
        var j = !{
          toString: null
        }.propertyIsEnumerable("toString"),
            I = ["valueOf", "isPrototypeOf", "toString", "propertyIsEnumerable", "hasOwnProperty", "toLocaleString"];

        function T(e, t) {
          var r = I.length,
              n = e.constructor,
              i = p.isFunction(n) && n.prototype || a,
              o = "constructor";

          for (p.has(e, o) && !p.contains(t, o) && t.push(o); r--;) {
            (o = I[r]) in e && e[o] !== i[o] && !p.contains(t, o) && t.push(o);
          }
        }

        p.keys = function (e) {
          if (!p.isObject(e)) return [];
          if (c) return c(e);
          var t = [];

          for (var r in e) {
            p.has(e, r) && t.push(r);
          }

          return j && T(e, t), t;
        }, p.allKeys = function (e) {
          if (!p.isObject(e)) return [];
          var t = [];

          for (var r in e) {
            t.push(r);
          }

          return j && T(e, t), t;
        }, p.values = function (e) {
          for (var t = p.keys(e), r = t.length, n = Array(r), i = 0; i < r; i++) {
            n[i] = e[t[i]];
          }

          return n;
        }, p.mapObject = function (e, t, r) {
          t = y(t, r);

          for (var n, i = p.keys(e), o = i.length, a = {}, s = 0; s < o; s++) {
            a[n = i[s]] = t(e[n], n, e);
          }

          return a;
        }, p.pairs = function (e) {
          for (var t = p.keys(e), r = t.length, n = Array(r), i = 0; i < r; i++) {
            n[i] = [t[i], e[t[i]]];
          }

          return n;
        }, p.invert = function (e) {
          for (var t = {}, r = p.keys(e), n = 0, i = r.length; n < i; n++) {
            t[e[r[n]]] = r[n];
          }

          return t;
        }, p.functions = p.methods = function (e) {
          var t = [];

          for (var r in e) {
            p.isFunction(e[r]) && t.push(r);
          }

          return t.sort();
        }, p.extend = m(p.allKeys), p.extendOwn = p.assign = m(p.keys), p.findKey = function (e, t, r) {
          t = y(t, r);

          for (var n, i = p.keys(e), o = 0, a = i.length; o < a; o++) {
            if (t(e[n = i[o]], n, e)) return n;
          }
        }, p.pick = function (e, t, r) {
          var n,
              i,
              o = {},
              a = e;
          if (null == a) return o;
          p.isFunction(t) ? (i = p.allKeys(a), n = b(t, r)) : (i = k(arguments, !1, !1, 1), n = function n(e, t, r) {
            return t in r;
          }, a = Object(a));

          for (var s = 0, u = i.length; s < u; s++) {
            var c = i[s],
                f = a[c];
            n(f, c, a) && (o[c] = f);
          }

          return o;
        }, p.omit = function (e, t, r) {
          if (p.isFunction(t)) t = p.negate(t);else {
            var n = p.map(k(arguments, !1, !1, 1), String);

            t = function t(e, _t) {
              return !p.contains(n, _t);
            };
          }
          return p.pick(e, t, r);
        }, p.defaults = m(p.allKeys, !0), p.create = function (e, t) {
          var r = v(e);
          return t && p.extendOwn(r, t), r;
        }, p.clone = function (e) {
          return p.isObject(e) ? p.isArray(e) ? e.slice() : p.extend({}, e) : e;
        }, p.tap = function (e, t) {
          return t(e), e;
        }, p.isMatch = function (e, t) {
          var r = p.keys(t),
              n = r.length;
          if (null == e) return !n;

          for (var i = Object(e), o = 0; o < n; o++) {
            var a = r[o];
            if (t[a] !== i[a] || !(a in i)) return !1;
          }

          return !0;
        };
        p.isEqual = function (e, t) {
          return function e(t, r, n, i) {
            if (t === r) return 0 !== t || 1 / t == 1 / r;
            if (null == t || null == r) return t === r;
            t instanceof p && (t = t._wrapped), r instanceof p && (r = r._wrapped);
            var o = d.call(t);
            if (o !== d.call(r)) return !1;

            switch (o) {
              case "[object RegExp]":
              case "[object String]":
                return "" + t == "" + r;

              case "[object Number]":
                return +t != +t ? +r != +r : 0 == +t ? 1 / +t == 1 / r : +t == +r;

              case "[object Date]":
              case "[object Boolean]":
                return +t == +r;
            }

            var a = "[object Array]" === o;

            if (!a) {
              if ("object" != (void 0 === t ? "undefined" : _typeof(t)) || "object" != (void 0 === r ? "undefined" : _typeof(r))) return !1;
              var s = t.constructor,
                  u = r.constructor;
              if (s !== u && !(p.isFunction(s) && s instanceof s && p.isFunction(u) && u instanceof u) && "constructor" in t && "constructor" in r) return !1;
            }

            i = i || [];

            for (var c = (n = n || []).length; c--;) {
              if (n[c] === t) return i[c] === r;
            }

            if (n.push(t), i.push(r), a) {
              if ((c = t.length) !== r.length) return !1;

              for (; c--;) {
                if (!e(t[c], r[c], n, i)) return !1;
              }
            } else {
              var f,
                  h = p.keys(t);
              if (c = h.length, p.keys(r).length !== c) return !1;

              for (; c--;) {
                if (f = h[c], !p.has(r, f) || !e(t[f], r[f], n, i)) return !1;
              }
            }

            return n.pop(), i.pop(), !0;
          }(e, t);
        }, p.isEmpty = function (e) {
          return null == e || (A(e) && (p.isArray(e) || p.isString(e) || p.isArguments(e)) ? 0 === e.length : 0 === p.keys(e).length);
        }, p.isElement = function (e) {
          return !(!e || 1 !== e.nodeType);
        }, p.isArray = s || function (e) {
          return "[object Array]" === d.call(e);
        }, p.isObject = function (e) {
          var t = void 0 === e ? "undefined" : _typeof(e);
          return "function" === t || "object" === t && !!e;
        }, p.each(["Arguments", "Function", "String", "Number", "Date", "RegExp", "Error"], function (t) {
          p["is" + t] = function (e) {
            return d.call(e) === "[object " + t + "]";
          };
        }), p.isArguments(arguments) || (p.isArguments = function (e) {
          return p.has(e, "callee");
        }), "function" != typeof /./ && "object" != ("undefined" == typeof Int8Array ? "undefined" : _typeof(Int8Array)) && (p.isFunction = function (e) {
          return "function" == typeof e || !1;
        }), p.isFinite = function (e) {
          return isFinite(e) && !isNaN(parseFloat(e));
        }, p.isNaN = function (e) {
          return p.isNumber(e) && e !== +e;
        }, p.isBoolean = function (e) {
          return !0 === e || !1 === e || "[object Boolean]" === d.call(e);
        }, p.isNull = function (e) {
          return null === e;
        }, p.isUndefined = function (e) {
          return void 0 === e;
        }, p.has = function (e, t) {
          return null != e && o.call(e, t);
        }, p.noConflict = function () {
          return e._ = t, this;
        }, p.identity = function (e) {
          return e;
        }, p.constant = function (e) {
          return function () {
            return e;
          };
        }, p.noop = function () {}, p.property = g, p.propertyOf = function (t) {
          return null == t ? function () {} : function (e) {
            return t[e];
          };
        }, p.matcher = p.matches = function (t) {
          return t = p.extendOwn({}, t), function (e) {
            return p.isMatch(e, t);
          };
        }, p.times = function (e, t, r) {
          var n = Array(Math.max(0, e));
          t = b(t, r, 1);

          for (var i = 0; i < e; i++) {
            n[i] = t(i);
          }

          return n;
        }, p.random = function (e, t) {
          return null == t && (t = e, e = 0), e + Math.floor(Math.random() * (t - e + 1));
        }, p.now = Date.now || function () {
          return new Date().getTime();
        };

        var C = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#x27;",
          "`": "&#x60;"
        },
            B = p.invert(C),
            N = function N(t) {
          var r = function r(e) {
            return t[e];
          },
              e = "(?:" + p.keys(t).join("|") + ")",
              n = RegExp(e),
              i = RegExp(e, "g");

          return function (e) {
            return e = null == e ? "" : "" + e, n.test(e) ? e.replace(i, r) : e;
          };
        };

        p.escape = N(C), p.unescape = N(B), p.result = function (e, t, r) {
          var n = null == e ? void 0 : e[t];
          return void 0 === n && (n = r), p.isFunction(n) ? n.call(e) : n;
        };
        var P = 0;
        p.uniqueId = function (e) {
          var t = ++P + "";
          return e ? e + t : t;
        }, p.templateSettings = {
          evaluate: /<%([\s\S]+?)%>/g,
          interpolate: /<%=([\s\S]+?)%>/g,
          escape: /<%-([\s\S]+?)%>/g
        };

        var R = /(.)^/,
            O = {
          "'": "'",
          "\\": "\\",
          "\r": "r",
          "\n": "n",
          "\u2028": "u2028",
          "\u2029": "u2029"
        },
            L = /\\|'|\r|\n|\u2028|\u2029/g,
            q = function q(e) {
          return "\\" + O[e];
        };

        p.template = function (o, e, t) {
          !e && t && (e = t), e = p.defaults({}, e, p.templateSettings);
          var r = RegExp([(e.escape || R).source, (e.interpolate || R).source, (e.evaluate || R).source].join("|") + "|$", "g"),
              a = 0,
              s = "__p+='";
          o.replace(r, function (e, t, r, n, i) {
            return s += o.slice(a, i).replace(L, q), a = i + e.length, t ? s += "'+\n((__t=(" + t + "))==null?'':_.escape(__t))+\n'" : r ? s += "'+\n((__t=(" + r + "))==null?'':__t)+\n'" : n && (s += "';\n" + n + "\n__p+='"), e;
          }), s += "';\n", e.variable || (s = "with(obj||{}){\n" + s + "}\n"), s = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + s + "return __p;\n";

          try {
            var n = new Function(e.variable || "obj", "_", s);
          } catch (e) {
            throw e.source = s, e;
          }

          var i = function i(e) {
            return n.call(this, e, p);
          },
              u = e.variable || "obj";

          return i.source = "function(" + u + "){\n" + s + "}", i;
        }, p.chain = function (e) {
          var t = p(e);
          return t._chain = !0, t;
        };

        var D = function D(e, t) {
          return e._chain ? p(t).chain() : t;
        };

        p.mixin = function (r) {
          p.each(p.functions(r), function (e) {
            var t = p[e] = r[e];

            p.prototype[e] = function () {
              var e = [this._wrapped];
              return i.apply(e, arguments), D(this, t.apply(p, e));
            };
          });
        }, p.mixin(p), p.each(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function (t) {
          var r = n[t];

          p.prototype[t] = function () {
            var e = this._wrapped;
            return r.apply(e, arguments), "shift" !== t && "splice" !== t || 0 !== e.length || delete e[0], D(this, e);
          };
        }), p.each(["concat", "join", "slice"], function (e) {
          var t = n[e];

          p.prototype[e] = function () {
            return D(this, t.apply(this._wrapped, arguments));
          };
        }), p.prototype.value = function () {
          return this._wrapped;
        }, p.prototype.valueOf = p.prototype.toJSON = p.prototype.value, p.prototype.toString = function () {
          return "" + this._wrapped;
        }, "function" == typeof define && define.amd && define("underscore", [], function () {
          return p;
        });
      }).call(this);
    }, {}],
    188: [function (e, t, r) {
      t.exports = function (e, t) {
        if (t) {
          t = (t = t.trim().replace(/^(\?|#|&)/, "")) ? "?" + t : t;
          var r = e.split(/[\?\#]/),
              n = r[0];
          t && /\:\/\/[^\/]*$/.test(n) && (n += "/");
          var i = e.match(/(\#.*)$/);
          e = n + t, i && (e += i[0]);
        }

        return e;
      };
    }, {}],
    189: [function (e, t, r) {
      var i = e("xhr-request");

      t.exports = function (e, t) {
        return new Promise(function (r, n) {
          i(e, t, function (e, t) {
            e ? n(e) : r(t);
          });
        });
      };
    }, {
      "xhr-request": 190
    }],
    190: [function (e, t, r) {
      var s = e("query-string"),
          u = e("url-set-query"),
          c = e("object-assign"),
          f = e("./lib/ensure-header.js"),
          h = e("./lib/request.js"),
          d = "application/json",
          l = function l() {};

      t.exports = function (e, t, r) {
        if (!e || "string" != typeof e) throw new TypeError("must specify a URL");
        "function" == typeof t && (r = t, t = {});
        if (r && "function" != typeof r) throw new TypeError("expected cb to be undefined or a function");
        r = r || l;
        var n = (t = t || {}).json ? "json" : "text",
            i = (t = c({
          responseType: n
        }, t)).headers || {},
            o = (t.method || "GET").toUpperCase(),
            a = t.query;
        a && ("string" != typeof a && (a = s.stringify(a)), e = u(e, a));
        "json" === t.responseType && f(i, "Accept", d);
        t.json && "GET" !== o && "HEAD" !== o && (f(i, "Content-Type", d), t.body = JSON.stringify(t.body));
        return t.method = o, t.url = e, t.headers = i, delete t.query, delete t.json, h(t, r);
      };
    }, {
      "./lib/ensure-header.js": 191,
      "./lib/request.js": 193,
      "object-assign": 178,
      "query-string": 180,
      "url-set-query": 188
    }],
    191: [function (e, t, r) {
      t.exports = function (e, t, r) {
        var n = t.toLowerCase();
        e[t] || e[n] || (e[t] = r);
      };
    }, {}],
    192: [function (e, t, r) {
      t.exports = function (e, t) {
        return t ? {
          statusCode: t.statusCode,
          headers: t.headers,
          method: e.method,
          url: e.url,
          rawRequest: t.rawRequest ? t.rawRequest : t
        } : null;
      };
    }, {}],
    193: [function (e, t, r) {
      var n = e("xhr"),
          s = e("./normalize-response"),
          u = function u() {};

      t.exports = function (i, o) {
        delete i.uri;
        var a = !1;
        "json" === i.responseType && (i.responseType = "text", a = !0);
        var t = n(i, function (t, e, r) {
          if (a && !t) try {
            var n = e.rawRequest.responseText;
            r = JSON.parse(n);
          } catch (e) {
            t = e;
          }
          e = s(i, e), o(t, t ? null : r, e), o = u;
        }),
            r = t.onabort;
        return t.onabort = function () {
          var e = r.apply(t, Array.prototype.slice.call(arguments));
          return o(new Error("XHR Aborted")), o = u, e;
        }, t;
      };
    }, {
      "./normalize-response": 192,
      xhr: 194
    }],
    194: [function (e, t, r) {
      var n = e("global/window"),
          i = e("is-function"),
          y = e("parse-headers"),
          o = e("xtend");

      function a(e, t, r) {
        var n = e;
        return i(t) ? (r = t, "string" == typeof e && (n = {
          uri: e
        })) : n = o(t, {
          uri: e
        }), n.callback = r, n;
      }

      function m(e, t, r) {
        return s(t = a(e, t, r));
      }

      function s(n) {
        if (void 0 === n.callback) throw new Error("callback argument missing");

        var i = !1,
            o = function o(e, t, r) {
          i || (i = !0, n.callback(e, t, r));
        };

        function t(e) {
          return clearTimeout(u), e instanceof Error || (e = new Error("" + (e || "Unknown XMLHttpRequest Error"))), e.statusCode = 0, o(e, b);
        }

        function e() {
          if (!a) {
            var e;
            clearTimeout(u), e = n.useXDR && void 0 === s.status ? 200 : 1223 === s.status ? 204 : s.status;
            var t = b,
                r = null;
            return 0 !== e ? (t = {
              body: function () {
                var e = void 0;
                if (e = s.response ? s.response : s.responseText || function (e) {
                  try {
                    if ("document" === e.responseType) return e.responseXML;
                    var t = e.responseXML && "parsererror" === e.responseXML.documentElement.nodeName;
                    if ("" === e.responseType && !t) return e.responseXML;
                  } catch (e) {}

                  return null;
                }(s), p) try {
                  e = JSON.parse(e);
                } catch (e) {}
                return e;
              }(),
              statusCode: e,
              method: f,
              headers: {},
              url: c,
              rawRequest: s
            }, s.getAllResponseHeaders && (t.headers = y(s.getAllResponseHeaders()))) : r = new Error("Internal XMLHttpRequest Error"), o(r, t, t.body);
          }
        }

        var r,
            a,
            s = n.xhr || null;
        s || (s = n.cors || n.useXDR ? new m.XDomainRequest() : new m.XMLHttpRequest());
        var u,
            c = s.url = n.uri || n.url,
            f = s.method = n.method || "GET",
            h = n.body || n.data,
            d = s.headers = n.headers || {},
            l = !!n.sync,
            p = !1,
            b = {
          body: void 0,
          headers: {},
          statusCode: 0,
          method: f,
          url: c,
          rawRequest: s
        };
        if ("json" in n && !1 !== n.json && (p = !0, d.accept || d.Accept || (d.Accept = "application/json"), "GET" !== f && "HEAD" !== f && (d["content-type"] || d["Content-Type"] || (d["Content-Type"] = "application/json"), h = JSON.stringify(!0 === n.json ? h : n.json))), s.onreadystatechange = function () {
          4 === s.readyState && setTimeout(e, 0);
        }, s.onload = e, s.onerror = t, s.onprogress = function () {}, s.onabort = function () {
          a = !0;
        }, s.ontimeout = t, s.open(f, c, !l, n.username, n.password), l || (s.withCredentials = !!n.withCredentials), !l && 0 < n.timeout && (u = setTimeout(function () {
          if (!a) {
            a = !0, s.abort("timeout");
            var e = new Error("XMLHttpRequest timeout");
            e.code = "ETIMEDOUT", t(e);
          }
        }, n.timeout)), s.setRequestHeader) for (r in d) {
          d.hasOwnProperty(r) && s.setRequestHeader(r, d[r]);
        } else if (n.headers && !function (e) {
          for (var t in e) {
            if (e.hasOwnProperty(t)) return !1;
          }

          return !0;
        }(n.headers)) throw new Error("Headers cannot be set on an XDomainRequest object");
        return "responseType" in n && (s.responseType = n.responseType), "beforeSend" in n && "function" == typeof n.beforeSend && n.beforeSend(s), s.send(h || null), s;
      }

      t.exports = m, (t.exports["default"] = m).XMLHttpRequest = n.XMLHttpRequest || function () {}, m.XDomainRequest = "withCredentials" in new m.XMLHttpRequest() ? m.XMLHttpRequest : n.XDomainRequest, function (e, t) {
        for (var r = 0; r < e.length; r++) {
          t(e[r]);
        }
      }(["get", "put", "post", "patch", "head", "delete"], function (n) {
        m["delete" === n ? "del" : n] = function (e, t, r) {
          return (t = a(e, t, r)).method = n.toUpperCase(), s(t);
        };
      });
    }, {
      "global/window": 176,
      "is-function": 177,
      "parse-headers": 179,
      xtend: 195
    }],
    195: [function (e, t, r) {
      arguments[4][170][0].apply(r, arguments);
    }, {
      dup: 170
    }],
    196: [function (e, t, r) {
      var n = e("underscore"),
          i = e("swarm-js"),
          o = function e(t) {
        this.givenProvider = e.givenProvider, t && t._requestManager && (t = t.currentProvider), "undefined" != typeof document && (this.pick = i.pick), this.setProvider(t);
      };

      o.givenProvider = null, "undefined" != typeof ethereumProvider && ethereumProvider.bzz && (o.givenProvider = ethereumProvider.bzz), o.prototype.setProvider = function (e) {
        if (n.isObject(e) && n.isString(e.bzz) && (e = e.bzz), !n.isString(e)) {
          this.currentProvider = null;
          var t = new Error("No provider set, please set one using bzz.setProvider().");
          return !(this.download = this.upload = this.isAvailable = function () {
            throw t;
          });
        }

        return this.currentProvider = e, this.download = i.at(e).download, this.upload = i.at(e).upload, this.isAvailable = i.at(e).isAvailable, !0;
      }, t.exports = o;
    }, {
      "swarm-js": 182,
      underscore: 187
    }],
    197: [function (e, t, r) {
      arguments[4][187][0].apply(r, arguments);
    }, {
      dup: 187
    }],
    198: [function (e, t, r) {
      t.exports = {
        ErrorResponse: function ErrorResponse(e) {
          var t = e && e.error && e.error.message ? e.error.message : JSON.stringify(e);
          return new Error("Returned error: " + t);
        },
        InvalidNumberOfParams: function InvalidNumberOfParams(e, t, r) {
          return new Error('Invalid number of parameters for "' + r + '". Got ' + e + " expected " + t + "!");
        },
        InvalidConnection: function InvalidConnection(e) {
          return new Error("CONNECTION ERROR: Couldn't connect to node " + e + ".");
        },
        InvalidProvider: function InvalidProvider() {
          return new Error("Provider not set or invalid");
        },
        InvalidResponse: function InvalidResponse(e) {
          var t = e && e.error && e.error.message ? e.error.message : "Invalid JSON RPC response: " + JSON.stringify(e);
          return new Error(t);
        },
        ConnectionTimeout: function ConnectionTimeout(e) {
          return new Error("CONNECTION TIMEOUT: timeout of " + e + " ms achived");
        }
      };
    }, {}],
    199: [function (e, t, r) {
      var n = e("underscore"),
          i = e("web3-utils"),
          o = e("web3-eth-iban"),
          a = function a(e) {
        return i.toBN(e).toString(10);
      },
          s = function s(e) {
        var t;
        if (void 0 !== e) return "latest" === (t = e) || "pending" === t || "earliest" === t ? e : i.isHexStrict(e) ? n.isString(e) ? e.toLowerCase() : e : i.numberToHex(e);
      },
          u = function u(t) {
        if (t.to && (t.to = h(t.to)), t.data && t.input) throw new Error('You can\'t have "data" and "input" as properties of transactions at the same time, please use either "data" or "input" instead.');
        if (!t.data && t.input && (t.data = t.input, delete t.input), t.data && !i.isHex(t.data)) throw new Error("The data field must be HEX encoded data.");
        return (t.gas || t.gasLimit) && (t.gas = t.gas || t.gasLimit), ["gasPrice", "gas", "value", "nonce"].filter(function (e) {
          return void 0 !== t[e];
        }).forEach(function (e) {
          t[e] = i.numberToHex(t[e]);
        }), t;
      },
          c = function c(e) {
        return null !== e.blockNumber && (e.blockNumber = i.hexToNumber(e.blockNumber)), null !== e.transactionIndex && (e.transactionIndex = i.hexToNumber(e.transactionIndex)), e.nonce = i.hexToNumber(e.nonce), e.gas = i.hexToNumber(e.gas), e.gasPrice = a(e.gasPrice), e.value = a(e.value), e.to && i.isAddress(e.to) ? e.to = i.toChecksumAddress(e.to) : e.to = null, e.from && (e.from = i.toChecksumAddress(e.from)), e;
      },
          f = function f(e) {
        if ("string" == typeof e.blockHash && "string" == typeof e.transactionHash && "string" == typeof e.logIndex) {
          var t = i.sha3(e.blockHash.replace("0x", "") + e.transactionHash.replace("0x", "") + e.logIndex.replace("0x", ""));
          e.id = "log_" + t.replace("0x", "").substr(0, 8);
        } else e.id || (e.id = null);

        return null !== e.blockNumber && (e.blockNumber = i.hexToNumber(e.blockNumber)), null !== e.transactionIndex && (e.transactionIndex = i.hexToNumber(e.transactionIndex)), null !== e.logIndex && (e.logIndex = i.hexToNumber(e.logIndex)), e.address && (e.address = i.toChecksumAddress(e.address)), e;
      },
          h = function h(e) {
        var t = new o(e);
        if (t.isValid() && t.isDirect()) return t.toAddress().toLowerCase();
        if (i.isAddress(e)) return "0x" + e.toLowerCase().replace("0x", "");
        throw new Error('Provided address "' + e + "\" is invalid, the capitalization checksum test failed, or its an indrect IBAN address which can't be converted.");
      };

      t.exports = {
        inputDefaultBlockNumberFormatter: function inputDefaultBlockNumberFormatter(e) {
          return this && null == e ? this.defaultBlock : "genesis" === e || "earliest" === e ? "0x0" : s(e);
        },
        inputBlockNumberFormatter: s,
        inputCallFormatter: function inputCallFormatter(e) {
          var t = (e = u(e)).from || (this ? this.defaultAccount : null);
          return t && (e.from = h(t)), e;
        },
        inputTransactionFormatter: function inputTransactionFormatter(e) {
          if (e = u(e), !n.isNumber(e.from) && !n.isObject(e.from)) {
            if (e.from = e.from || (this ? this.defaultAccount : null), !e.from && !n.isNumber(e.from)) throw new Error('The send transactions "from" field must be defined!');
            e.from = h(e.from);
          }

          return e;
        },
        inputAddressFormatter: h,
        inputPostFormatter: function inputPostFormatter(e) {
          return e.ttl && (e.ttl = i.numberToHex(e.ttl)), e.workToProve && (e.workToProve = i.numberToHex(e.workToProve)), e.priority && (e.priority = i.numberToHex(e.priority)), n.isArray(e.topics) || (e.topics = e.topics ? [e.topics] : []), e.topics = e.topics.map(function (e) {
            return 0 === e.indexOf("0x") ? e : i.fromUtf8(e);
          }), e;
        },
        inputLogFormatter: function inputLogFormatter(e) {
          var t = function t(e) {
            return null == e ? null : 0 === (e = String(e)).indexOf("0x") ? e : i.fromUtf8(e);
          };

          return e.fromBlock && (e.fromBlock = s(e.fromBlock)), e.toBlock && (e.toBlock = s(e.toBlock)), e.topics = e.topics || [], e.topics = e.topics.map(function (e) {
            return n.isArray(e) ? e.map(t) : t(e);
          }), t = null, e.address && (e.address = n.isArray(e.address) ? e.address.map(function (e) {
            return h(e);
          }) : h(e.address)), e;
        },
        inputSignFormatter: function inputSignFormatter(e) {
          return i.isHexStrict(e) ? e : i.utf8ToHex(e);
        },
        outputBigNumberFormatter: a,
        outputTransactionFormatter: c,
        outputTransactionReceiptFormatter: function outputTransactionReceiptFormatter(e) {
          if ("object" !== (void 0 === e ? "undefined" : _typeof(e))) throw new Error("Received receipt is invalid: " + e);
          return null !== e.blockNumber && (e.blockNumber = i.hexToNumber(e.blockNumber)), null !== e.transactionIndex && (e.transactionIndex = i.hexToNumber(e.transactionIndex)), e.cumulativeGasUsed = i.hexToNumber(e.cumulativeGasUsed), e.gasUsed = i.hexToNumber(e.gasUsed), n.isArray(e.logs) && (e.logs = e.logs.map(f)), e.contractAddress && (e.contractAddress = i.toChecksumAddress(e.contractAddress)), void 0 !== e.status && (e.status = Boolean(parseInt(e.status))), e;
        },
        outputBlockFormatter: function outputBlockFormatter(e) {
          return e.gasLimit = i.hexToNumber(e.gasLimit), e.gasUsed = i.hexToNumber(e.gasUsed), e.size = i.hexToNumber(e.size), e.timestamp = i.hexToNumber(e.timestamp), null !== e.number && (e.number = i.hexToNumber(e.number)), e.difficulty && (e.difficulty = a(e.difficulty)), e.totalDifficulty && (e.totalDifficulty = a(e.totalDifficulty)), n.isArray(e.transactions) && e.transactions.forEach(function (e) {
            if (!n.isString(e)) return c(e);
          }), e.miner && (e.miner = i.toChecksumAddress(e.miner)), e;
        },
        outputLogFormatter: f,
        outputPostFormatter: function outputPostFormatter(e) {
          return e.expiry = i.hexToNumber(e.expiry), e.sent = i.hexToNumber(e.sent), e.ttl = i.hexToNumber(e.ttl), e.workProved = i.hexToNumber(e.workProved), e.topics || (e.topics = []), e.topics = e.topics.map(function (e) {
            return i.toUtf8(e);
          }), e;
        },
        outputSyncingFormatter: function outputSyncingFormatter(e) {
          return e.startingBlock = i.hexToNumber(e.startingBlock), e.currentBlock = i.hexToNumber(e.currentBlock), e.highestBlock = i.hexToNumber(e.highestBlock), e.knownStates && (e.knownStates = i.hexToNumber(e.knownStates), e.pulledStates = i.hexToNumber(e.pulledStates)), e;
        }
      };
    }, {
      underscore: 197,
      "web3-eth-iban": 388,
      "web3-utils": 419
    }],
    200: [function (e, t, r) {
      var n = e("./errors"),
          i = e("./formatters");
      t.exports = {
        errors: n,
        formatters: i
      };
    }, {
      "./errors": 198,
      "./formatters": 199
    }],
    201: [function (e, t, r) {
      arguments[4][187][0].apply(r, arguments);
    }, {
      dup: 187
    }],
    202: [function (e, t, r) {
      var m = e("underscore"),
          n = e("web3-core-helpers").errors,
          i = e("web3-core-helpers").formatters,
          v = e("web3-utils"),
          g = e("web3-core-promievent"),
          w = e("web3-core-subscriptions").subscriptions,
          _ = function _(e) {
        if (!e.call || !e.name) throw new Error('When creating a method you need to provide at least the "name" and "call" property.');
        this.name = e.name, this.call = e.call, this.params = e.params || 0, this.inputFormatter = e.inputFormatter, this.outputFormatter = e.outputFormatter, this.transformPayload = e.transformPayload, this.extraFormatters = e.extraFormatters, this.requestManager = e.requestManager, this.accounts = e.accounts, this.defaultBlock = e.defaultBlock || "latest", this.defaultAccount = e.defaultAccount || null;
      };

      _.prototype.setRequestManager = function (e, t) {
        this.requestManager = e, t && (this.accounts = t);
      }, _.prototype.createFunction = function (e, t) {
        var r = this.buildCall();
        return r.call = this.call, this.setRequestManager(e || this.requestManager, t || this.accounts), r;
      }, _.prototype.attachToObject = function (e) {
        var t = this.buildCall();
        t.call = this.call;
        var r = this.name.split(".");
        1 < r.length ? (e[r[0]] = e[r[0]] || {}, e[r[0]][r[1]] = t) : e[r[0]] = t;
      }, _.prototype.getCall = function (e) {
        return m.isFunction(this.call) ? this.call(e) : this.call;
      }, _.prototype.extractCallback = function (e) {
        if (m.isFunction(e[e.length - 1])) return e.pop();
      }, _.prototype.validateArgs = function (e) {
        if (e.length !== this.params) throw n.InvalidNumberOfParams(e.length, this.params, this.name);
      }, _.prototype.formatInput = function (r) {
        var n = this;
        return this.inputFormatter ? this.inputFormatter.map(function (e, t) {
          return e ? e.call(n, r[t]) : r[t];
        }) : r;
      }, _.prototype.formatOutput = function (e) {
        var t = this;
        return m.isArray(e) ? e.map(function (e) {
          return t.outputFormatter && e ? t.outputFormatter(e) : e;
        }) : this.outputFormatter && e ? this.outputFormatter(e) : e;
      }, _.prototype.toPayload = function (e) {
        var t = this.getCall(e),
            r = this.extractCallback(e),
            n = this.formatInput(e);
        this.validateArgs(n);
        var i = {
          method: t,
          params: n,
          callback: r
        };
        return this.transformPayload && (i = this.transformPayload(i)), i;
      }, _.prototype._confirmTransaction = function (o, a, e) {
        var s = this,
            u = !1,
            c = !0,
            f = 0,
            h = 0,
            d = null,
            l = "",
            p = m.isObject(e.params[0]) && e.params[0].gas ? e.params[0].gas : null,
            b = m.isObject(e.params[0]) && e.params[0].data && e.params[0].from && !e.params[0].to,
            t = [new _({
          name: "getTransactionReceipt",
          call: "eth_getTransactionReceipt",
          params: 1,
          inputFormatter: [null],
          outputFormatter: i.outputTransactionReceiptFormatter
        }), new _({
          name: "getCode",
          call: "eth_getCode",
          params: 2,
          inputFormatter: [i.inputAddressFormatter, i.inputDefaultBlockNumberFormatter]
        }), new w({
          name: "subscribe",
          type: "eth",
          subscriptions: {
            newBlockHeaders: {
              subscriptionName: "newHeads",
              params: 0,
              outputFormatter: i.outputBlockFormatter
            }
          }
        })],
            y = {};
        m.each(t, function (e) {
          e.attachToObject(y), e.requestManager = s.requestManager;
        });

        var r = function r(t, e, _r2, n, i) {
          if (!_r2) return i || (i = {
            unsubscribe: function unsubscribe() {
              clearInterval(d);
            }
          }), (t ? g.resolve(t) : y.getTransactionReceipt(a))["catch"](function (e) {
            i.unsubscribe(), u = !0, v._fireError({
              message: "Failed to check for transaction receipt:",
              data: e
            }, o.eventEmitter, o.reject);
          }).then(function (e) {
            if (!e || !e.blockHash) throw new Error("Receipt missing or blockHash null");
            return s.extraFormatters && s.extraFormatters.receiptFormatter && (e = s.extraFormatters.receiptFormatter(e)), 0 < o.eventEmitter.listeners("confirmation").length && (void 0 !== t && 0 === h || o.eventEmitter.emit("confirmation", h, e), c = !1, 25 === ++h && (i.unsubscribe(), o.eventEmitter.removeAllListeners())), e;
          }).then(function (r) {
            if (b && !u) {
              if (!r.contractAddress) return c && (i.unsubscribe(), u = !0), void v._fireError(new Error("The transaction receipt didn't contain a contract address."), o.eventEmitter, o.reject);
              y.getCode(r.contractAddress, function (e, t) {
                t && (2 < t.length ? (o.eventEmitter.emit("receipt", r), s.extraFormatters && s.extraFormatters.contractDeployFormatter ? o.resolve(s.extraFormatters.contractDeployFormatter(r)) : o.resolve(r), c && o.eventEmitter.removeAllListeners()) : v._fireError(new Error("The contract code couldn't be stored, please check your gas limit."), o.eventEmitter, o.reject), c && i.unsubscribe(), u = !0);
              });
            }

            return r;
          }).then(function (e) {
            b || u || (e.outOfGas || p && p === e.gasUsed || !0 !== e.status && "0x1" !== e.status && void 0 !== e.status ? (l = JSON.stringify(e, null, 2), !1 === e.status || "0x0" === e.status ? v._fireError(new Error("Transaction has been reverted by the EVM:\n" + l), o.eventEmitter, o.reject) : v._fireError(new Error("Transaction ran out of gas. Please provide more gas:\n" + l), o.eventEmitter, o.reject)) : (o.eventEmitter.emit("receipt", e), o.resolve(e), c && o.eventEmitter.removeAllListeners()), c && i.unsubscribe(), u = !0);
          })["catch"](function () {
            f++, e ? 750 <= f - 1 && (i.unsubscribe(), u = !0, v._fireError(new Error("Transaction was not mined within750 seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!"), o.eventEmitter, o.reject)) : 50 <= f - 1 && (i.unsubscribe(), u = !0, v._fireError(new Error("Transaction was not mined within 50 blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!"), o.eventEmitter, o.reject));
          });
          i.unsubscribe(), u = !0, v._fireError({
            message: "Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.",
            data: _r2
          }, o.eventEmitter, o.reject);
        },
            n = function (e) {
          m.isFunction(this.requestManager.provider.on) ? y.subscribe("newBlockHeaders", r.bind(null, e, !1)) : d = setInterval(r.bind(null, e, !0), 1e3);
        }.bind(this);

        y.getTransactionReceipt(a).then(function (e) {
          e && e.blockHash ? (0 < o.eventEmitter.listeners("confirmation").length && n(e), r(e, !1)) : u || n();
        })["catch"](function () {
          u || n();
        });
      };

      var c = function c(e, t) {
        return m.isNumber(e) ? t.wallet[e] : m.isObject(e) && e.address && e.privateKey ? e : t.wallet[e.toLowerCase()];
      };

      _.prototype.buildCall = function () {
        var i = this,
            o = "eth_sendTransaction" === i.call || "eth_sendRawTransaction" === i.call,
            e = function e() {
          var a = g(!o),
              r = i.toPayload(Array.prototype.slice.call(arguments)),
              s = function s(t, e) {
            try {
              e = i.formatOutput(e);
            } catch (e) {
              t = e;
            }

            if (e instanceof Error && (t = e), t) return t.error && (t = t.error), v._fireError(t, a.eventEmitter, a.reject, r.callback);
            r.callback && r.callback(null, e), o ? (a.eventEmitter.emit("transactionHash", e), i._confirmTransaction(a, e, r)) : t || a.resolve(e);
          },
              u = function u(e) {
            var t = m.extend({}, r, {
              method: "eth_sendRawTransaction",
              params: [e.rawTransaction]
            });
            i.requestManager.send(t, s);
          },
              n = function n(e, t) {
            var r;
            if (t && t.accounts && t.accounts.wallet && t.accounts.wallet.length) if ("eth_sendTransaction" === e.method) {
              var n = e.params[0];
              if ((r = c(m.isObject(n) ? n.from : null, t.accounts)) && r.privateKey) return t.accounts.signTransaction(m.omit(n, "from"), r.privateKey).then(u);
            } else if ("eth_sign" === e.method) {
              var i = e.params[1];

              if ((r = c(e.params[0], t.accounts)) && r.privateKey) {
                var o = t.accounts.sign(i, r.privateKey);
                return e.callback && e.callback(null, o.signature), void a.resolve(o.signature);
              }
            }
            return t.requestManager.send(e, s);
          };

          o && m.isObject(r.params[0]) && void 0 === r.params[0].gasPrice ? new _({
            name: "getGasPrice",
            call: "eth_gasPrice",
            params: 0
          }).createFunction(i.requestManager)(function (e, t) {
            t && (r.params[0].gasPrice = t), n(r, i);
          }) : n(r, i);
          return a.eventEmitter;
        };

        return e.method = i, e.request = this.request.bind(this), e;
      }, _.prototype.request = function () {
        var e = this.toPayload(Array.prototype.slice.call(arguments));
        return e.format = this.formatOutput.bind(this), e;
      }, t.exports = _;
    }, {
      underscore: 201,
      "web3-core-helpers": 200,
      "web3-core-promievent": 207,
      "web3-core-subscriptions": 215,
      "web3-utils": 419
    }],
    203: [function (e, t, r) {
      t.exports = e("./register")().Promise;
    }, {
      "./register": 205
    }],
    204: [function (e, t, r) {
      var o = "@@any-promise/REGISTRATION",
          a = null;

      t.exports = function (n, i) {
        return function (e, t) {
          e = e || null;
          var r = !1 !== (t = t || {}).global;
          if (null === a && r && (a = n[o] || null), null !== a && null !== e && a.implementation !== e) throw new Error('any-promise already defined as "' + a.implementation + '".  You can only register an implementation before the first  call to require("any-promise") and an implementation cannot be changed');
          return null === a && (a = null !== e && void 0 !== t.Promise ? {
            Promise: t.Promise,
            implementation: e
          } : i(e), r && (n[o] = a)), a;
        };
      };
    }, {}],
    205: [function (e, t, r) {
      t.exports = e("./loader")(window, function () {
        if (void 0 === window.Promise) throw new Error("any-promise browser requires a polyfill or explicit registration e.g: require('any-promise/register/bluebird')");
        return {
          Promise: window.Promise,
          implementation: "window.Promise"
        };
      });
    }, {
      "./loader": 204
    }],
    206: [function (e, t, r) {
      var l = "function" != typeof Object.create && "~";

      function o(e, t, r) {
        this.fn = e, this.context = t, this.once = r || !1;
      }

      function n() {}

      n.prototype._events = void 0, n.prototype.listeners = function (e, t) {
        var r = l ? l + e : e,
            n = this._events && this._events[r];
        if (t) return !!n;
        if (!n) return [];
        if (n.fn) return [n.fn];

        for (var i = 0, o = n.length, a = new Array(o); i < o; i++) {
          a[i] = n[i].fn;
        }

        return a;
      }, n.prototype.emit = function (e, t, r, n, i, o) {
        var a = l ? l + e : e;
        if (!this._events || !this._events[a]) return !1;
        var s,
            u,
            c = this._events[a],
            f = arguments.length;

        if ("function" == typeof c.fn) {
          switch (c.once && this.removeListener(e, c.fn, void 0, !0), f) {
            case 1:
              return c.fn.call(c.context), !0;

            case 2:
              return c.fn.call(c.context, t), !0;

            case 3:
              return c.fn.call(c.context, t, r), !0;

            case 4:
              return c.fn.call(c.context, t, r, n), !0;

            case 5:
              return c.fn.call(c.context, t, r, n, i), !0;

            case 6:
              return c.fn.call(c.context, t, r, n, i, o), !0;
          }

          for (u = 1, s = new Array(f - 1); u < f; u++) {
            s[u - 1] = arguments[u];
          }

          c.fn.apply(c.context, s);
        } else {
          var h,
              d = c.length;

          for (u = 0; u < d; u++) {
            switch (c[u].once && this.removeListener(e, c[u].fn, void 0, !0), f) {
              case 1:
                c[u].fn.call(c[u].context);
                break;

              case 2:
                c[u].fn.call(c[u].context, t);
                break;

              case 3:
                c[u].fn.call(c[u].context, t, r);
                break;

              default:
                if (!s) for (h = 1, s = new Array(f - 1); h < f; h++) {
                  s[h - 1] = arguments[h];
                }
                c[u].fn.apply(c[u].context, s);
            }
          }
        }

        return !0;
      }, n.prototype.on = function (e, t, r) {
        var n = new o(t, r || this),
            i = l ? l + e : e;
        return this._events || (this._events = l ? {} : Object.create(null)), this._events[i] ? this._events[i].fn ? this._events[i] = [this._events[i], n] : this._events[i].push(n) : this._events[i] = n, this;
      }, n.prototype.once = function (e, t, r) {
        var n = new o(t, r || this, !0),
            i = l ? l + e : e;
        return this._events || (this._events = l ? {} : Object.create(null)), this._events[i] ? this._events[i].fn ? this._events[i] = [this._events[i], n] : this._events[i].push(n) : this._events[i] = n, this;
      }, n.prototype.removeListener = function (e, t, r, n) {
        var i = l ? l + e : e;
        if (!this._events || !this._events[i]) return this;
        var o = this._events[i],
            a = [];
        if (t) if (o.fn) (o.fn !== t || n && !o.once || r && o.context !== r) && a.push(o);else for (var s = 0, u = o.length; s < u; s++) {
          (o[s].fn !== t || n && !o[s].once || r && o[s].context !== r) && a.push(o[s]);
        }
        return a.length ? this._events[i] = 1 === a.length ? a[0] : a : delete this._events[i], this;
      }, n.prototype.removeAllListeners = function (e) {
        return this._events && (e ? delete this._events[l ? l + e : e] : this._events = l ? {} : Object.create(null)), this;
      }, n.prototype.off = n.prototype.removeListener, n.prototype.addListener = n.prototype.on, n.prototype.setMaxListeners = function () {
        return this;
      }, n.prefixed = l, void 0 !== t && (t.exports = n);
    }, {}],
    207: [function (e, t, r) {
      var o = e("eventemitter3"),
          a = e("any-promise"),
          n = function n(e) {
        var t,
            r,
            n = new a(function () {
          t = arguments[0], r = arguments[1];
        });
        if (e) return {
          resolve: t,
          reject: r,
          eventEmitter: n
        };
        var i = new o();
        return n._events = i._events, n.emit = i.emit, n.on = i.on, n.once = i.once, n.off = i.off, n.listeners = i.listeners, n.addListener = i.addListener, n.removeListener = i.removeListener, n.removeAllListeners = i.removeAllListeners, {
          resolve: t,
          reject: r,
          eventEmitter: n
        };
      };

      n.resolve = function (e) {
        var t = n(!0);
        return t.resolve(e), t.eventEmitter;
      }, t.exports = n;
    }, {
      "any-promise": 203,
      eventemitter3: 206
    }],
    208: [function (e, t, r) {
      arguments[4][187][0].apply(r, arguments);
    }, {
      dup: 187
    }],
    209: [function (e, t, r) {
      var i = e("./jsonrpc"),
          o = e("web3-core-helpers").errors,
          n = function n(e) {
        this.requestManager = e, this.requests = [];
      };

      n.prototype.add = function (e) {
        this.requests.push(e);
      }, n.prototype.execute = function () {
        var n = this.requests;
        this.requestManager.sendBatch(n, function (e, r) {
          r = r || [], n.map(function (e, t) {
            return r[t] || {};
          }).forEach(function (e, t) {
            if (n[t].callback) {
              if (e && e.error) return n[t].callback(o.ErrorResponse(e));
              if (!i.isValidResponse(e)) return n[t].callback(o.InvalidResponse(e));

              try {
                n[t].callback(null, n[t].format ? n[t].format(e.result) : e.result);
              } catch (e) {
                n[t].callback(e);
              }
            }
          });
        });
      }, t.exports = n;
    }, {
      "./jsonrpc": 212,
      "web3-core-helpers": 200
    }],
    210: [function (e, t, r) {
      var n = null,
          i = Function("return this")();
      void 0 !== i.ethereumProvider ? n = i.ethereumProvider : void 0 !== i.web3 && i.web3.currentProvider && (i.web3.currentProvider.sendAsync && (i.web3.currentProvider.send = i.web3.currentProvider.sendAsync, delete i.web3.currentProvider.sendAsync), !i.web3.currentProvider.on && i.web3.currentProvider.connection && "ipcProviderWrapper" === i.web3.currentProvider.connection.constructor.name && (i.web3.currentProvider.on = function (e, r) {
        if ("function" != typeof r) throw new Error("The second parameter callback must be a function.");

        switch (e) {
          case "data":
            this.connection.on("data", function (t) {
              var e = "";
              t = t.toString();

              try {
                e = JSON.parse(t);
              } catch (e) {
                return r(new Error("Couldn't parse response data" + t));
              }

              e.id || -1 === e.method.indexOf("_subscription") || r(null, e);
            });
            break;

          default:
            this.connection.on(e, r);
        }
      }), n = i.web3.currentProvider), t.exports = n;
    }, {}],
    211: [function (e, t, r) {
      var n = e("underscore"),
          i = e("web3-core-helpers").errors,
          o = e("./jsonrpc.js"),
          a = e("./batch.js"),
          s = e("./givenProvider.js"),
          u = function e(t) {
        this.provider = null, this.providers = e.providers, this.setProvider(t), this.subscriptions = {};
      };

      u.givenProvider = s, u.providers = {
        WebsocketProvider: e("web3-providers-ws"),
        HttpProvider: e("web3-providers-http"),
        IpcProvider: e("web3-providers-ipc")
      }, u.prototype.setProvider = function (e, t) {
        var r = this;
        if (e && "string" == typeof e && this.providers) if (/^http(s)?:\/\//i.test(e)) e = new this.providers.HttpProvider(e);else if (/^ws(s)?:\/\//i.test(e)) e = new this.providers.WebsocketProvider(e);else if (e && "object" === (void 0 === t ? "undefined" : _typeof(t)) && "function" == typeof t.connect) e = new this.providers.IpcProvider(e, t);else if (e) throw new Error("Can't autodetect provider for \"" + e + '"');
        this.provider && this.provider.connected && this.clearSubscriptions(), this.provider = e || null, this.provider && this.provider.on && this.provider.on("data", function (e, t) {
          (e = e || t).method && r.subscriptions[e.params.subscription] && r.subscriptions[e.params.subscription].callback && r.subscriptions[e.params.subscription].callback(null, e.params.result);
        });
      }, u.prototype.send = function (e, r) {
        if (r = r || function () {}, !this.provider) return r(i.InvalidProvider());
        var n = o.toPayload(e.method, e.params);
        this.provider[this.provider.sendAsync ? "sendAsync" : "send"](n, function (e, t) {
          return t && t.id && n.id !== t.id ? r(new Error('Wrong response id "' + t.id + '" (expected: "' + n.id + '") in ' + JSON.stringify(n))) : e ? r(e) : t && t.error ? r(i.ErrorResponse(t)) : o.isValidResponse(t) ? void r(null, t.result) : r(i.InvalidResponse(t));
        });
      }, u.prototype.sendBatch = function (e, r) {
        if (!this.provider) return r(i.InvalidProvider());
        var t = o.toBatchPayload(e);
        this.provider[this.provider.sendAsync ? "sendAsync" : "send"](t, function (e, t) {
          return e ? r(e) : n.isArray(t) ? void r(null, t) : r(i.InvalidResponse(t));
        });
      }, u.prototype.addSubscription = function (e, t, r, n) {
        if (!this.provider.on) throw new Error("The provider doesn't support subscriptions: " + this.provider.constructor.name);
        this.subscriptions[e] = {
          callback: n,
          type: r,
          name: t
        };
      }, u.prototype.removeSubscription = function (e, t) {
        this.subscriptions[e] && (this.send({
          method: this.subscriptions[e].type + "_unsubscribe",
          params: [e]
        }, t), delete this.subscriptions[e]);
      }, u.prototype.clearSubscriptions = function (t) {
        var r = this;
        Object.keys(this.subscriptions).forEach(function (e) {
          t && "syncing" === r.subscriptions[e].name || r.removeSubscription(e);
        }), this.provider.reset && this.provider.reset();
      }, t.exports = {
        Manager: u,
        BatchManager: a
      };
    }, {
      "./batch.js": 209,
      "./givenProvider.js": 210,
      "./jsonrpc.js": 212,
      underscore: 208,
      "web3-core-helpers": 200,
      "web3-providers-http": 401,
      "web3-providers-ipc": 404,
      "web3-providers-ws": 406
    }],
    212: [function (e, t, r) {
      var n = {
        messageId: 0,
        toPayload: function toPayload(e, t) {
          if (!e) throw new Error('JSONRPC method should be specified for params: "' + JSON.stringify(t) + '"!');
          return n.messageId++, {
            jsonrpc: "2.0",
            id: n.messageId,
            method: e,
            params: t || []
          };
        },
        isValidResponse: function isValidResponse(e) {
          return Array.isArray(e) ? e.every(t) : t(e);

          function t(e) {
            return !(!e || e.error || "2.0" !== e.jsonrpc || "number" != typeof e.id && "string" != typeof e.id || void 0 === e.result);
          }
        },
        toBatchPayload: function toBatchPayload(e) {
          return e.map(function (e) {
            return n.toPayload(e.method, e.params);
          });
        }
      };
      t.exports = n;
    }, {}],
    213: [function (e, t, r) {
      arguments[4][206][0].apply(r, arguments);
    }, {
      dup: 206
    }],
    214: [function (e, t, r) {
      arguments[4][187][0].apply(r, arguments);
    }, {
      dup: 187
    }],
    215: [function (e, t, r) {
      var n = e("./subscription.js"),
          i = function i(e) {
        this.name = e.name, this.type = e.type, this.subscriptions = e.subscriptions || {}, this.requestManager = null;
      };

      i.prototype.setRequestManager = function (e) {
        this.requestManager = e;
      }, i.prototype.attachToObject = function (e) {
        var t = this.buildCall(),
            r = this.name.split(".");
        1 < r.length ? (e[r[0]] = e[r[0]] || {}, e[r[0]][r[1]] = t) : e[r[0]] = t;
      }, i.prototype.buildCall = function () {
        var t = this;
        return function () {
          t.subscriptions[arguments[0]] || console.warn("Subscription " + JSON.stringify(arguments[0]) + " doesn't exist. Subscribing anyway.");
          var e = new n({
            subscription: t.subscriptions[arguments[0]],
            requestManager: t.requestManager,
            type: t.type
          });
          return e.subscribe.apply(e, arguments);
        };
      }, t.exports = {
        subscriptions: i,
        subscription: n
      };
    }, {
      "./subscription.js": 216
    }],
    216: [function (e, t, r) {
      var o = e("underscore"),
          n = e("web3-core-helpers").errors,
          i = e("eventemitter3");

      function a(e) {
        i.call(this), this.id = null, this.callback = o.identity, this.arguments = null, this._reconnectIntervalId = null, this.options = {
          subscription: e.subscription,
          type: e.type,
          requestManager: e.requestManager
        };
      }

      ((a.prototype = Object.create(i.prototype)).constructor = a).prototype._extractCallback = function (e) {
        if (o.isFunction(e[e.length - 1])) return e.pop();
      }, a.prototype._validateArgs = function (e) {
        var t = this.options.subscription;
        if (t || (t = {}), t.params || (t.params = 0), e.length !== t.params) throw n.InvalidNumberOfParams(e.length, t.params + 1, e[0]);
      }, a.prototype._formatInput = function (r) {
        var e = this.options.subscription;
        return e && e.inputFormatter ? e.inputFormatter.map(function (e, t) {
          return e ? e(r[t]) : r[t];
        }) : r;
      }, a.prototype._formatOutput = function (e) {
        var t = this.options.subscription;
        return t && t.outputFormatter && e ? t.outputFormatter(e) : e;
      }, a.prototype._toPayload = function (e) {
        var t = [];
        if (this.callback = this._extractCallback(e) || o.identity, this.subscriptionMethod || (this.subscriptionMethod = e.shift(), this.options.subscription.subscriptionName && (this.subscriptionMethod = this.options.subscription.subscriptionName)), this.arguments || (this.arguments = this._formatInput(e), this._validateArgs(this.arguments), e = []), t.push(this.subscriptionMethod), t = t.concat(this.arguments), e.length) throw new Error("Only a callback is allowed as parameter on an already instantiated subscription.");
        return {
          method: this.options.type + "_subscribe",
          params: t
        };
      }, a.prototype.unsubscribe = function (e) {
        this.options.requestManager.removeSubscription(this.id, e), this.id = null, this.removeAllListeners(), clearInterval(this._reconnectIntervalId);
      }, a.prototype.subscribe = function () {
        var r = this,
            e = Array.prototype.slice.call(arguments),
            n = this._toPayload(e);

        if (!n) return this;

        if (!this.options.requestManager.provider) {
          var t = new Error("No provider set.");
          return this.callback(t, null, this), this.emit("error", t), this;
        }

        if (!this.options.requestManager.provider.on) {
          var i = new Error("The current provider doesn't support subscriptions: " + this.options.requestManager.provider.constructor.name);
          return this.callback(i, null, this), this.emit("error", i), this;
        }

        return this.id && this.unsubscribe(), this.options.params = n.params[1], "logs" === n.params[0] && o.isObject(n.params[1]) && n.params[1].hasOwnProperty("fromBlock") && isFinite(n.params[1].fromBlock) && this.options.requestManager.send({
          method: "eth_getLogs",
          params: [n.params[1]]
        }, function (e, t) {
          e ? (r.callback(e, null, r), r.emit("error", e)) : t.forEach(function (e) {
            var t = r._formatOutput(e);

            r.callback(null, t, r), r.emit("data", t);
          });
        }), "object" === _typeof(n.params[1]) && delete n.params[1].fromBlock, this.options.requestManager.send(n, function (e, t) {
          !e && t ? (r.id = t, r.options.requestManager.addSubscription(r.id, n.params[0], r.options.type, function (e, t) {
            e ? (r.options.requestManager.removeSubscription(r.id), r.options.requestManager.provider.once && (r._reconnectIntervalId = setInterval(function () {
              r.options.requestManager.provider.reconnect && r.options.requestManager.provider.reconnect();
            }, 500), r.options.requestManager.provider.once("connect", function () {
              clearInterval(r._reconnectIntervalId), r.subscribe(r.callback);
            })), r.emit("error", e), r.callback(e, null, r)) : (o.isArray(t) || (t = [t]), t.forEach(function (e) {
              var t = r._formatOutput(e);

              if (o.isFunction(r.options.subscription.subscriptionHandler)) return r.options.subscription.subscriptionHandler.call(r, t);
              r.emit("data", t), r.callback(null, t, r);
            }));
          })) : (r.callback(e, null, r), r.emit("error", e));
        }), this;
      }, t.exports = a;
    }, {
      eventemitter3: 213,
      underscore: 214,
      "web3-core-helpers": 200
    }],
    217: [function (e, t, r) {
      var n = e("web3-core-helpers").formatters,
          i = e("web3-core-method"),
          o = e("web3-utils");

      t.exports = function (r) {
        var e = function e(_e2) {
          var t;
          return _e2.property ? (r[_e2.property] || (r[_e2.property] = {}), t = r[_e2.property]) : t = r, _e2.methods && _e2.methods.forEach(function (e) {
            e instanceof i || (e = new i(e)), e.attachToObject(t), e.setRequestManager(r._requestManager);
          }), r;
        };

        return e.formatters = n, e.utils = o, e.Method = i, e;
      };
    }, {
      "web3-core-helpers": 200,
      "web3-core-method": 202,
      "web3-utils": 419
    }],
    218: [function (e, t, r) {
      var n = e("web3-core-requestmanager"),
          i = e("./extend.js");
      t.exports = {
        packageInit: function packageInit(r, e) {
          if (e = Array.prototype.slice.call(e), !r) throw new Error('You need to instantiate using the "new" keyword.');
          Object.defineProperty(r, "currentProvider", {
            get: function get() {
              return r._provider;
            },
            set: function set(e) {
              return r.setProvider(e);
            },
            enumerable: !0,
            configurable: !0
          }), e[0] && e[0]._requestManager ? r._requestManager = new n.Manager(e[0].currentProvider) : (r._requestManager = new n.Manager(), r._requestManager.setProvider(e[0], e[1])), r.givenProvider = n.Manager.givenProvider, r.providers = n.Manager.providers, r._provider = r._requestManager.provider, r.setProvider || (r.setProvider = function (e, t) {
            return r._requestManager.setProvider(e, t), r._provider = r._requestManager.provider, !0;
          }), r.BatchRequest = n.BatchManager.bind(null, r._requestManager), r.extend = i(r);
        },
        addProviders: function addProviders(e) {
          e.givenProvider = n.Manager.givenProvider, e.providers = n.Manager.providers;
        }
      };
    }, {
      "./extend.js": 217,
      "web3-core-requestmanager": 211
    }],
    219: [function (x, e, t) {
      !function (e, t) {
        function y(e, t) {
          if (!e) throw new Error(t || "Assertion failed");
        }

        function r(e, t) {
          e.super_ = t;

          var r = function r() {};

          r.prototype = t.prototype, e.prototype = new r(), e.prototype.constructor = e;
        }

        function m(e, t, r) {
          if (m.isBN(e)) return e;
          this.negative = 0, this.words = null, this.length = 0, (this.red = null) !== e && ("le" !== t && "be" !== t || (r = t, t = 10), this._init(e || 0, t || 10, r || "be"));
        }

        var n;
        "object" === (void 0 === e ? "undefined" : _typeof(e)) ? e.exports = m : t.BN = m, (m.BN = m).wordSize = 26;

        try {
          n = x("buffer").Buffer;
        } catch (e) {}

        function a(e, t, r) {
          for (var n = 0, i = Math.min(e.length, r), o = t; o < i; o++) {
            var a = e.charCodeAt(o) - 48;
            n <<= 4, n |= 49 <= a && a <= 54 ? a - 49 + 10 : 17 <= a && a <= 22 ? a - 17 + 10 : 15 & a;
          }

          return n;
        }

        function h(e, t, r, n) {
          for (var i = 0, o = Math.min(e.length, r), a = t; a < o; a++) {
            var s = e.charCodeAt(a) - 48;
            i *= n, i += 49 <= s ? s - 49 + 10 : 17 <= s ? s - 17 + 10 : s;
          }

          return i;
        }

        m.isBN = function (e) {
          return e instanceof m || null !== e && "object" === (void 0 === e ? "undefined" : _typeof(e)) && e.constructor.wordSize === m.wordSize && Array.isArray(e.words);
        }, m.max = function (e, t) {
          return 0 < e.cmp(t) ? e : t;
        }, m.min = function (e, t) {
          return e.cmp(t) < 0 ? e : t;
        }, m.prototype._init = function (e, t, r) {
          if ("number" == typeof e) return this._initNumber(e, t, r);
          if ("object" === (void 0 === e ? "undefined" : _typeof(e))) return this._initArray(e, t, r);
          "hex" === t && (t = 16), y(t === (0 | t) && 2 <= t && t <= 36);
          var n = 0;
          "-" === (e = e.toString().replace(/\s+/g, ""))[0] && n++, 16 === t ? this._parseHex(e, n) : this._parseBase(e, t, n), "-" === e[0] && (this.negative = 1), this.strip(), "le" === r && this._initArray(this.toArray(), t, r);
        }, m.prototype._initNumber = function (e, t, r) {
          e < 0 && (this.negative = 1, e = -e), e < 67108864 ? (this.words = [67108863 & e], this.length = 1) : e < 4503599627370496 ? (this.words = [67108863 & e, e / 67108864 & 67108863], this.length = 2) : (y(e < 9007199254740992), this.words = [67108863 & e, e / 67108864 & 67108863, 1], this.length = 3), "le" === r && this._initArray(this.toArray(), t, r);
        }, m.prototype._initArray = function (e, t, r) {
          if (y("number" == typeof e.length), e.length <= 0) return this.words = [0], this.length = 1, this;
          this.length = Math.ceil(e.length / 3), this.words = new Array(this.length);

          for (var n = 0; n < this.length; n++) {
            this.words[n] = 0;
          }

          var i,
              o,
              a = 0;
          if ("be" === r) for (n = e.length - 1, i = 0; 0 <= n; n -= 3) {
            o = e[n] | e[n - 1] << 8 | e[n - 2] << 16, this.words[i] |= o << a & 67108863, this.words[i + 1] = o >>> 26 - a & 67108863, 26 <= (a += 24) && (a -= 26, i++);
          } else if ("le" === r) for (i = n = 0; n < e.length; n += 3) {
            o = e[n] | e[n + 1] << 8 | e[n + 2] << 16, this.words[i] |= o << a & 67108863, this.words[i + 1] = o >>> 26 - a & 67108863, 26 <= (a += 24) && (a -= 26, i++);
          }
          return this.strip();
        }, m.prototype._parseHex = function (e, t) {
          this.length = Math.ceil((e.length - t) / 6), this.words = new Array(this.length);

          for (var r = 0; r < this.length; r++) {
            this.words[r] = 0;
          }

          var n,
              i,
              o = 0;

          for (r = e.length - 6, n = 0; t <= r; r -= 6) {
            i = a(e, r, r + 6), this.words[n] |= i << o & 67108863, this.words[n + 1] |= i >>> 26 - o & 4194303, 26 <= (o += 24) && (o -= 26, n++);
          }

          r + 6 !== t && (i = a(e, t, r + 6), this.words[n] |= i << o & 67108863, this.words[n + 1] |= i >>> 26 - o & 4194303), this.strip();
        }, m.prototype._parseBase = function (e, t, r) {
          this.words = [0];

          for (var n = 0, i = this.length = 1; i <= 67108863; i *= t) {
            n++;
          }

          n--, i = i / t | 0;

          for (var o = e.length - r, a = o % n, s = Math.min(o, o - a) + r, u = 0, c = r; c < s; c += n) {
            u = h(e, c, c + n, t), this.imuln(i), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
          }

          if (0 !== a) {
            var f = 1;

            for (u = h(e, c, e.length, t), c = 0; c < a; c++) {
              f *= t;
            }

            this.imuln(f), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
          }
        }, m.prototype.copy = function (e) {
          e.words = new Array(this.length);

          for (var t = 0; t < this.length; t++) {
            e.words[t] = this.words[t];
          }

          e.length = this.length, e.negative = this.negative, e.red = this.red;
        }, m.prototype.clone = function () {
          var e = new m(null);
          return this.copy(e), e;
        }, m.prototype._expand = function (e) {
          for (; this.length < e;) {
            this.words[this.length++] = 0;
          }

          return this;
        }, m.prototype.strip = function () {
          for (; 1 < this.length && 0 === this.words[this.length - 1];) {
            this.length--;
          }

          return this._normSign();
        }, m.prototype._normSign = function () {
          return 1 === this.length && 0 === this.words[0] && (this.negative = 0), this;
        }, m.prototype.inspect = function () {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        };
        var d = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"],
            l = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
            p = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];

        function i(e, t, r) {
          r.negative = t.negative ^ e.negative;
          var n = e.length + t.length | 0;
          n = (r.length = n) - 1 | 0;
          var i = 0 | e.words[0],
              o = 0 | t.words[0],
              a = i * o,
              s = 67108863 & a,
              u = a / 67108864 | 0;
          r.words[0] = s;

          for (var c = 1; c < n; c++) {
            for (var f = u >>> 26, h = 67108863 & u, d = Math.min(c, t.length - 1), l = Math.max(0, c - e.length + 1); l <= d; l++) {
              var p = c - l | 0;
              f += (a = (i = 0 | e.words[p]) * (o = 0 | t.words[l]) + h) / 67108864 | 0, h = 67108863 & a;
            }

            r.words[c] = 0 | h, u = 0 | f;
          }

          return 0 !== u ? r.words[c] = 0 | u : r.length--, r.strip();
        }

        m.prototype.toString = function (e, t) {
          var r;

          if (t = 0 | t || 1, 16 === (e = e || 10) || "hex" === e) {
            r = "";

            for (var n = 0, i = 0, o = 0; o < this.length; o++) {
              var a = this.words[o],
                  s = (16777215 & (a << n | i)).toString(16);
              r = 0 !== (i = a >>> 24 - n & 16777215) || o !== this.length - 1 ? d[6 - s.length] + s + r : s + r, 26 <= (n += 2) && (n -= 26, o--);
            }

            for (0 !== i && (r = i.toString(16) + r); r.length % t != 0;) {
              r = "0" + r;
            }

            return 0 !== this.negative && (r = "-" + r), r;
          }

          if (e === (0 | e) && 2 <= e && e <= 36) {
            var u = l[e],
                c = p[e];
            r = "";
            var f = this.clone();

            for (f.negative = 0; !f.isZero();) {
              var h = f.modn(c).toString(e);
              r = (f = f.idivn(c)).isZero() ? h + r : d[u - h.length] + h + r;
            }

            for (this.isZero() && (r = "0" + r); r.length % t != 0;) {
              r = "0" + r;
            }

            return 0 !== this.negative && (r = "-" + r), r;
          }

          y(!1, "Base should be between 2 and 36");
        }, m.prototype.toNumber = function () {
          var e = this.words[0];
          return 2 === this.length ? e += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? e += 4503599627370496 + 67108864 * this.words[1] : 2 < this.length && y(!1, "Number can only safely store up to 53 bits"), 0 !== this.negative ? -e : e;
        }, m.prototype.toJSON = function () {
          return this.toString(16);
        }, m.prototype.toBuffer = function (e, t) {
          return y(void 0 !== n), this.toArrayLike(n, e, t);
        }, m.prototype.toArray = function (e, t) {
          return this.toArrayLike(Array, e, t);
        }, m.prototype.toArrayLike = function (e, t, r) {
          var n = this.byteLength(),
              i = r || Math.max(1, n);
          y(n <= i, "byte array longer than desired length"), y(0 < i, "Requested array length <= 0"), this.strip();
          var o,
              a,
              s = "le" === t,
              u = new e(i),
              c = this.clone();

          if (s) {
            for (a = 0; !c.isZero(); a++) {
              o = c.andln(255), c.iushrn(8), u[a] = o;
            }

            for (; a < i; a++) {
              u[a] = 0;
            }
          } else {
            for (a = 0; a < i - n; a++) {
              u[a] = 0;
            }

            for (a = 0; !c.isZero(); a++) {
              o = c.andln(255), c.iushrn(8), u[i - a - 1] = o;
            }
          }

          return u;
        }, m.prototype._countBits = Math.clz32 ? function (e) {
          return 32 - Math.clz32(e);
        } : function (e) {
          var t = e,
              r = 0;
          return 4096 <= t && (r += 13, t >>>= 13), 64 <= t && (r += 7, t >>>= 7), 8 <= t && (r += 4, t >>>= 4), 2 <= t && (r += 2, t >>>= 2), r + t;
        }, m.prototype._zeroBits = function (e) {
          if (0 === e) return 26;
          var t = e,
              r = 0;
          return 0 == (8191 & t) && (r += 13, t >>>= 13), 0 == (127 & t) && (r += 7, t >>>= 7), 0 == (15 & t) && (r += 4, t >>>= 4), 0 == (3 & t) && (r += 2, t >>>= 2), 0 == (1 & t) && r++, r;
        }, m.prototype.bitLength = function () {
          var e = this.words[this.length - 1],
              t = this._countBits(e);

          return 26 * (this.length - 1) + t;
        }, m.prototype.zeroBits = function () {
          if (this.isZero()) return 0;

          for (var e = 0, t = 0; t < this.length; t++) {
            var r = this._zeroBits(this.words[t]);

            if (e += r, 26 !== r) break;
          }

          return e;
        }, m.prototype.byteLength = function () {
          return Math.ceil(this.bitLength() / 8);
        }, m.prototype.toTwos = function (e) {
          return 0 !== this.negative ? this.abs().inotn(e).iaddn(1) : this.clone();
        }, m.prototype.fromTwos = function (e) {
          return this.testn(e - 1) ? this.notn(e).iaddn(1).ineg() : this.clone();
        }, m.prototype.isNeg = function () {
          return 0 !== this.negative;
        }, m.prototype.neg = function () {
          return this.clone().ineg();
        }, m.prototype.ineg = function () {
          return this.isZero() || (this.negative ^= 1), this;
        }, m.prototype.iuor = function (e) {
          for (; this.length < e.length;) {
            this.words[this.length++] = 0;
          }

          for (var t = 0; t < e.length; t++) {
            this.words[t] = this.words[t] | e.words[t];
          }

          return this.strip();
        }, m.prototype.ior = function (e) {
          return y(0 == (this.negative | e.negative)), this.iuor(e);
        }, m.prototype.or = function (e) {
          return this.length > e.length ? this.clone().ior(e) : e.clone().ior(this);
        }, m.prototype.uor = function (e) {
          return this.length > e.length ? this.clone().iuor(e) : e.clone().iuor(this);
        }, m.prototype.iuand = function (e) {
          var t;
          t = this.length > e.length ? e : this;

          for (var r = 0; r < t.length; r++) {
            this.words[r] = this.words[r] & e.words[r];
          }

          return this.length = t.length, this.strip();
        }, m.prototype.iand = function (e) {
          return y(0 == (this.negative | e.negative)), this.iuand(e);
        }, m.prototype.and = function (e) {
          return this.length > e.length ? this.clone().iand(e) : e.clone().iand(this);
        }, m.prototype.uand = function (e) {
          return this.length > e.length ? this.clone().iuand(e) : e.clone().iuand(this);
        }, m.prototype.iuxor = function (e) {
          var t, r;
          this.length > e.length ? (t = this, r = e) : (t = e, r = this);

          for (var n = 0; n < r.length; n++) {
            this.words[n] = t.words[n] ^ r.words[n];
          }

          if (this !== t) for (; n < t.length; n++) {
            this.words[n] = t.words[n];
          }
          return this.length = t.length, this.strip();
        }, m.prototype.ixor = function (e) {
          return y(0 == (this.negative | e.negative)), this.iuxor(e);
        }, m.prototype.xor = function (e) {
          return this.length > e.length ? this.clone().ixor(e) : e.clone().ixor(this);
        }, m.prototype.uxor = function (e) {
          return this.length > e.length ? this.clone().iuxor(e) : e.clone().iuxor(this);
        }, m.prototype.inotn = function (e) {
          y("number" == typeof e && 0 <= e);
          var t = 0 | Math.ceil(e / 26),
              r = e % 26;
          this._expand(t), 0 < r && t--;

          for (var n = 0; n < t; n++) {
            this.words[n] = 67108863 & ~this.words[n];
          }

          return 0 < r && (this.words[n] = ~this.words[n] & 67108863 >> 26 - r), this.strip();
        }, m.prototype.notn = function (e) {
          return this.clone().inotn(e);
        }, m.prototype.setn = function (e, t) {
          y("number" == typeof e && 0 <= e);
          var r = e / 26 | 0,
              n = e % 26;
          return this._expand(r + 1), this.words[r] = t ? this.words[r] | 1 << n : this.words[r] & ~(1 << n), this.strip();
        }, m.prototype.iadd = function (e) {
          var t, r, n;
          if (0 !== this.negative && 0 === e.negative) return this.negative = 0, t = this.isub(e), this.negative ^= 1, this._normSign();
          if (0 === this.negative && 0 !== e.negative) return e.negative = 0, t = this.isub(e), e.negative = 1, t._normSign();
          this.length > e.length ? (r = this, n = e) : (r = e, n = this);

          for (var i = 0, o = 0; o < n.length; o++) {
            t = (0 | r.words[o]) + (0 | n.words[o]) + i, this.words[o] = 67108863 & t, i = t >>> 26;
          }

          for (; 0 !== i && o < r.length; o++) {
            t = (0 | r.words[o]) + i, this.words[o] = 67108863 & t, i = t >>> 26;
          }

          if (this.length = r.length, 0 !== i) this.words[this.length] = i, this.length++;else if (r !== this) for (; o < r.length; o++) {
            this.words[o] = r.words[o];
          }
          return this;
        }, m.prototype.add = function (e) {
          var t;
          return 0 !== e.negative && 0 === this.negative ? (e.negative = 0, t = this.sub(e), e.negative ^= 1, t) : 0 === e.negative && 0 !== this.negative ? (this.negative = 0, t = e.sub(this), this.negative = 1, t) : this.length > e.length ? this.clone().iadd(e) : e.clone().iadd(this);
        }, m.prototype.isub = function (e) {
          if (0 !== e.negative) {
            e.negative = 0;
            var t = this.iadd(e);
            return e.negative = 1, t._normSign();
          }

          if (0 !== this.negative) return this.negative = 0, this.iadd(e), this.negative = 1, this._normSign();
          var r,
              n,
              i = this.cmp(e);
          if (0 === i) return this.negative = 0, this.length = 1, this.words[0] = 0, this;
          0 < i ? (r = this, n = e) : (r = e, n = this);

          for (var o = 0, a = 0; a < n.length; a++) {
            o = (t = (0 | r.words[a]) - (0 | n.words[a]) + o) >> 26, this.words[a] = 67108863 & t;
          }

          for (; 0 !== o && a < r.length; a++) {
            o = (t = (0 | r.words[a]) + o) >> 26, this.words[a] = 67108863 & t;
          }

          if (0 === o && a < r.length && r !== this) for (; a < r.length; a++) {
            this.words[a] = r.words[a];
          }
          return this.length = Math.max(this.length, a), r !== this && (this.negative = 1), this.strip();
        }, m.prototype.sub = function (e) {
          return this.clone().isub(e);
        };

        var o = function o(e, t, r) {
          var n,
              i,
              o,
              a = e.words,
              s = t.words,
              u = r.words,
              c = 0,
              f = 0 | a[0],
              h = 8191 & f,
              d = f >>> 13,
              l = 0 | a[1],
              p = 8191 & l,
              b = l >>> 13,
              y = 0 | a[2],
              m = 8191 & y,
              v = y >>> 13,
              g = 0 | a[3],
              w = 8191 & g,
              _ = g >>> 13,
              A = 0 | a[4],
              x = 8191 & A,
              M = A >>> 13,
              k = 0 | a[5],
              E = 8191 & k,
              S = k >>> 13,
              U = 0 | a[6],
              j = 8191 & U,
              I = U >>> 13,
              T = 0 | a[7],
              C = 8191 & T,
              B = T >>> 13,
              N = 0 | a[8],
              P = 8191 & N,
              R = N >>> 13,
              O = 0 | a[9],
              L = 8191 & O,
              q = O >>> 13,
              D = 0 | s[0],
              F = 8191 & D,
              H = D >>> 13,
              z = 0 | s[1],
              K = 8191 & z,
              V = z >>> 13,
              G = 0 | s[2],
              W = 8191 & G,
              X = G >>> 13,
              J = 0 | s[3],
              Z = 8191 & J,
              $ = J >>> 13,
              Y = 0 | s[4],
              Q = 8191 & Y,
              ee = Y >>> 13,
              te = 0 | s[5],
              re = 8191 & te,
              ne = te >>> 13,
              ie = 0 | s[6],
              oe = 8191 & ie,
              ae = ie >>> 13,
              se = 0 | s[7],
              ue = 8191 & se,
              ce = se >>> 13,
              fe = 0 | s[8],
              he = 8191 & fe,
              de = fe >>> 13,
              le = 0 | s[9],
              pe = 8191 & le,
              be = le >>> 13;

          r.negative = e.negative ^ t.negative, r.length = 19;
          var ye = (c + (n = Math.imul(h, F)) | 0) + ((8191 & (i = (i = Math.imul(h, H)) + Math.imul(d, F) | 0)) << 13) | 0;
          c = ((o = Math.imul(d, H)) + (i >>> 13) | 0) + (ye >>> 26) | 0, ye &= 67108863, n = Math.imul(p, F), i = (i = Math.imul(p, H)) + Math.imul(b, F) | 0, o = Math.imul(b, H);
          var me = (c + (n = n + Math.imul(h, K) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, V) | 0) + Math.imul(d, K) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(d, V) | 0) + (i >>> 13) | 0) + (me >>> 26) | 0, me &= 67108863, n = Math.imul(m, F), i = (i = Math.imul(m, H)) + Math.imul(v, F) | 0, o = Math.imul(v, H), n = n + Math.imul(p, K) | 0, i = (i = i + Math.imul(p, V) | 0) + Math.imul(b, K) | 0, o = o + Math.imul(b, V) | 0;
          var ve = (c + (n = n + Math.imul(h, W) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, X) | 0) + Math.imul(d, W) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(d, X) | 0) + (i >>> 13) | 0) + (ve >>> 26) | 0, ve &= 67108863, n = Math.imul(w, F), i = (i = Math.imul(w, H)) + Math.imul(_, F) | 0, o = Math.imul(_, H), n = n + Math.imul(m, K) | 0, i = (i = i + Math.imul(m, V) | 0) + Math.imul(v, K) | 0, o = o + Math.imul(v, V) | 0, n = n + Math.imul(p, W) | 0, i = (i = i + Math.imul(p, X) | 0) + Math.imul(b, W) | 0, o = o + Math.imul(b, X) | 0;
          var ge = (c + (n = n + Math.imul(h, Z) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, $) | 0) + Math.imul(d, Z) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(d, $) | 0) + (i >>> 13) | 0) + (ge >>> 26) | 0, ge &= 67108863, n = Math.imul(x, F), i = (i = Math.imul(x, H)) + Math.imul(M, F) | 0, o = Math.imul(M, H), n = n + Math.imul(w, K) | 0, i = (i = i + Math.imul(w, V) | 0) + Math.imul(_, K) | 0, o = o + Math.imul(_, V) | 0, n = n + Math.imul(m, W) | 0, i = (i = i + Math.imul(m, X) | 0) + Math.imul(v, W) | 0, o = o + Math.imul(v, X) | 0, n = n + Math.imul(p, Z) | 0, i = (i = i + Math.imul(p, $) | 0) + Math.imul(b, Z) | 0, o = o + Math.imul(b, $) | 0;
          var we = (c + (n = n + Math.imul(h, Q) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, ee) | 0) + Math.imul(d, Q) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(d, ee) | 0) + (i >>> 13) | 0) + (we >>> 26) | 0, we &= 67108863, n = Math.imul(E, F), i = (i = Math.imul(E, H)) + Math.imul(S, F) | 0, o = Math.imul(S, H), n = n + Math.imul(x, K) | 0, i = (i = i + Math.imul(x, V) | 0) + Math.imul(M, K) | 0, o = o + Math.imul(M, V) | 0, n = n + Math.imul(w, W) | 0, i = (i = i + Math.imul(w, X) | 0) + Math.imul(_, W) | 0, o = o + Math.imul(_, X) | 0, n = n + Math.imul(m, Z) | 0, i = (i = i + Math.imul(m, $) | 0) + Math.imul(v, Z) | 0, o = o + Math.imul(v, $) | 0, n = n + Math.imul(p, Q) | 0, i = (i = i + Math.imul(p, ee) | 0) + Math.imul(b, Q) | 0, o = o + Math.imul(b, ee) | 0;

          var _e = (c + (n = n + Math.imul(h, re) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, ne) | 0) + Math.imul(d, re) | 0)) << 13) | 0;

          c = ((o = o + Math.imul(d, ne) | 0) + (i >>> 13) | 0) + (_e >>> 26) | 0, _e &= 67108863, n = Math.imul(j, F), i = (i = Math.imul(j, H)) + Math.imul(I, F) | 0, o = Math.imul(I, H), n = n + Math.imul(E, K) | 0, i = (i = i + Math.imul(E, V) | 0) + Math.imul(S, K) | 0, o = o + Math.imul(S, V) | 0, n = n + Math.imul(x, W) | 0, i = (i = i + Math.imul(x, X) | 0) + Math.imul(M, W) | 0, o = o + Math.imul(M, X) | 0, n = n + Math.imul(w, Z) | 0, i = (i = i + Math.imul(w, $) | 0) + Math.imul(_, Z) | 0, o = o + Math.imul(_, $) | 0, n = n + Math.imul(m, Q) | 0, i = (i = i + Math.imul(m, ee) | 0) + Math.imul(v, Q) | 0, o = o + Math.imul(v, ee) | 0, n = n + Math.imul(p, re) | 0, i = (i = i + Math.imul(p, ne) | 0) + Math.imul(b, re) | 0, o = o + Math.imul(b, ne) | 0;
          var Ae = (c + (n = n + Math.imul(h, oe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, ae) | 0) + Math.imul(d, oe) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(d, ae) | 0) + (i >>> 13) | 0) + (Ae >>> 26) | 0, Ae &= 67108863, n = Math.imul(C, F), i = (i = Math.imul(C, H)) + Math.imul(B, F) | 0, o = Math.imul(B, H), n = n + Math.imul(j, K) | 0, i = (i = i + Math.imul(j, V) | 0) + Math.imul(I, K) | 0, o = o + Math.imul(I, V) | 0, n = n + Math.imul(E, W) | 0, i = (i = i + Math.imul(E, X) | 0) + Math.imul(S, W) | 0, o = o + Math.imul(S, X) | 0, n = n + Math.imul(x, Z) | 0, i = (i = i + Math.imul(x, $) | 0) + Math.imul(M, Z) | 0, o = o + Math.imul(M, $) | 0, n = n + Math.imul(w, Q) | 0, i = (i = i + Math.imul(w, ee) | 0) + Math.imul(_, Q) | 0, o = o + Math.imul(_, ee) | 0, n = n + Math.imul(m, re) | 0, i = (i = i + Math.imul(m, ne) | 0) + Math.imul(v, re) | 0, o = o + Math.imul(v, ne) | 0, n = n + Math.imul(p, oe) | 0, i = (i = i + Math.imul(p, ae) | 0) + Math.imul(b, oe) | 0, o = o + Math.imul(b, ae) | 0;
          var xe = (c + (n = n + Math.imul(h, ue) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, ce) | 0) + Math.imul(d, ue) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(d, ce) | 0) + (i >>> 13) | 0) + (xe >>> 26) | 0, xe &= 67108863, n = Math.imul(P, F), i = (i = Math.imul(P, H)) + Math.imul(R, F) | 0, o = Math.imul(R, H), n = n + Math.imul(C, K) | 0, i = (i = i + Math.imul(C, V) | 0) + Math.imul(B, K) | 0, o = o + Math.imul(B, V) | 0, n = n + Math.imul(j, W) | 0, i = (i = i + Math.imul(j, X) | 0) + Math.imul(I, W) | 0, o = o + Math.imul(I, X) | 0, n = n + Math.imul(E, Z) | 0, i = (i = i + Math.imul(E, $) | 0) + Math.imul(S, Z) | 0, o = o + Math.imul(S, $) | 0, n = n + Math.imul(x, Q) | 0, i = (i = i + Math.imul(x, ee) | 0) + Math.imul(M, Q) | 0, o = o + Math.imul(M, ee) | 0, n = n + Math.imul(w, re) | 0, i = (i = i + Math.imul(w, ne) | 0) + Math.imul(_, re) | 0, o = o + Math.imul(_, ne) | 0, n = n + Math.imul(m, oe) | 0, i = (i = i + Math.imul(m, ae) | 0) + Math.imul(v, oe) | 0, o = o + Math.imul(v, ae) | 0, n = n + Math.imul(p, ue) | 0, i = (i = i + Math.imul(p, ce) | 0) + Math.imul(b, ue) | 0, o = o + Math.imul(b, ce) | 0;
          var Me = (c + (n = n + Math.imul(h, he) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, de) | 0) + Math.imul(d, he) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(d, de) | 0) + (i >>> 13) | 0) + (Me >>> 26) | 0, Me &= 67108863, n = Math.imul(L, F), i = (i = Math.imul(L, H)) + Math.imul(q, F) | 0, o = Math.imul(q, H), n = n + Math.imul(P, K) | 0, i = (i = i + Math.imul(P, V) | 0) + Math.imul(R, K) | 0, o = o + Math.imul(R, V) | 0, n = n + Math.imul(C, W) | 0, i = (i = i + Math.imul(C, X) | 0) + Math.imul(B, W) | 0, o = o + Math.imul(B, X) | 0, n = n + Math.imul(j, Z) | 0, i = (i = i + Math.imul(j, $) | 0) + Math.imul(I, Z) | 0, o = o + Math.imul(I, $) | 0, n = n + Math.imul(E, Q) | 0, i = (i = i + Math.imul(E, ee) | 0) + Math.imul(S, Q) | 0, o = o + Math.imul(S, ee) | 0, n = n + Math.imul(x, re) | 0, i = (i = i + Math.imul(x, ne) | 0) + Math.imul(M, re) | 0, o = o + Math.imul(M, ne) | 0, n = n + Math.imul(w, oe) | 0, i = (i = i + Math.imul(w, ae) | 0) + Math.imul(_, oe) | 0, o = o + Math.imul(_, ae) | 0, n = n + Math.imul(m, ue) | 0, i = (i = i + Math.imul(m, ce) | 0) + Math.imul(v, ue) | 0, o = o + Math.imul(v, ce) | 0, n = n + Math.imul(p, he) | 0, i = (i = i + Math.imul(p, de) | 0) + Math.imul(b, he) | 0, o = o + Math.imul(b, de) | 0;
          var ke = (c + (n = n + Math.imul(h, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, be) | 0) + Math.imul(d, pe) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(d, be) | 0) + (i >>> 13) | 0) + (ke >>> 26) | 0, ke &= 67108863, n = Math.imul(L, K), i = (i = Math.imul(L, V)) + Math.imul(q, K) | 0, o = Math.imul(q, V), n = n + Math.imul(P, W) | 0, i = (i = i + Math.imul(P, X) | 0) + Math.imul(R, W) | 0, o = o + Math.imul(R, X) | 0, n = n + Math.imul(C, Z) | 0, i = (i = i + Math.imul(C, $) | 0) + Math.imul(B, Z) | 0, o = o + Math.imul(B, $) | 0, n = n + Math.imul(j, Q) | 0, i = (i = i + Math.imul(j, ee) | 0) + Math.imul(I, Q) | 0, o = o + Math.imul(I, ee) | 0, n = n + Math.imul(E, re) | 0, i = (i = i + Math.imul(E, ne) | 0) + Math.imul(S, re) | 0, o = o + Math.imul(S, ne) | 0, n = n + Math.imul(x, oe) | 0, i = (i = i + Math.imul(x, ae) | 0) + Math.imul(M, oe) | 0, o = o + Math.imul(M, ae) | 0, n = n + Math.imul(w, ue) | 0, i = (i = i + Math.imul(w, ce) | 0) + Math.imul(_, ue) | 0, o = o + Math.imul(_, ce) | 0, n = n + Math.imul(m, he) | 0, i = (i = i + Math.imul(m, de) | 0) + Math.imul(v, he) | 0, o = o + Math.imul(v, de) | 0;
          var Ee = (c + (n = n + Math.imul(p, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(p, be) | 0) + Math.imul(b, pe) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(b, be) | 0) + (i >>> 13) | 0) + (Ee >>> 26) | 0, Ee &= 67108863, n = Math.imul(L, W), i = (i = Math.imul(L, X)) + Math.imul(q, W) | 0, o = Math.imul(q, X), n = n + Math.imul(P, Z) | 0, i = (i = i + Math.imul(P, $) | 0) + Math.imul(R, Z) | 0, o = o + Math.imul(R, $) | 0, n = n + Math.imul(C, Q) | 0, i = (i = i + Math.imul(C, ee) | 0) + Math.imul(B, Q) | 0, o = o + Math.imul(B, ee) | 0, n = n + Math.imul(j, re) | 0, i = (i = i + Math.imul(j, ne) | 0) + Math.imul(I, re) | 0, o = o + Math.imul(I, ne) | 0, n = n + Math.imul(E, oe) | 0, i = (i = i + Math.imul(E, ae) | 0) + Math.imul(S, oe) | 0, o = o + Math.imul(S, ae) | 0, n = n + Math.imul(x, ue) | 0, i = (i = i + Math.imul(x, ce) | 0) + Math.imul(M, ue) | 0, o = o + Math.imul(M, ce) | 0, n = n + Math.imul(w, he) | 0, i = (i = i + Math.imul(w, de) | 0) + Math.imul(_, he) | 0, o = o + Math.imul(_, de) | 0;
          var Se = (c + (n = n + Math.imul(m, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(m, be) | 0) + Math.imul(v, pe) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(v, be) | 0) + (i >>> 13) | 0) + (Se >>> 26) | 0, Se &= 67108863, n = Math.imul(L, Z), i = (i = Math.imul(L, $)) + Math.imul(q, Z) | 0, o = Math.imul(q, $), n = n + Math.imul(P, Q) | 0, i = (i = i + Math.imul(P, ee) | 0) + Math.imul(R, Q) | 0, o = o + Math.imul(R, ee) | 0, n = n + Math.imul(C, re) | 0, i = (i = i + Math.imul(C, ne) | 0) + Math.imul(B, re) | 0, o = o + Math.imul(B, ne) | 0, n = n + Math.imul(j, oe) | 0, i = (i = i + Math.imul(j, ae) | 0) + Math.imul(I, oe) | 0, o = o + Math.imul(I, ae) | 0, n = n + Math.imul(E, ue) | 0, i = (i = i + Math.imul(E, ce) | 0) + Math.imul(S, ue) | 0, o = o + Math.imul(S, ce) | 0, n = n + Math.imul(x, he) | 0, i = (i = i + Math.imul(x, de) | 0) + Math.imul(M, he) | 0, o = o + Math.imul(M, de) | 0;
          var Ue = (c + (n = n + Math.imul(w, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(w, be) | 0) + Math.imul(_, pe) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(_, be) | 0) + (i >>> 13) | 0) + (Ue >>> 26) | 0, Ue &= 67108863, n = Math.imul(L, Q), i = (i = Math.imul(L, ee)) + Math.imul(q, Q) | 0, o = Math.imul(q, ee), n = n + Math.imul(P, re) | 0, i = (i = i + Math.imul(P, ne) | 0) + Math.imul(R, re) | 0, o = o + Math.imul(R, ne) | 0, n = n + Math.imul(C, oe) | 0, i = (i = i + Math.imul(C, ae) | 0) + Math.imul(B, oe) | 0, o = o + Math.imul(B, ae) | 0, n = n + Math.imul(j, ue) | 0, i = (i = i + Math.imul(j, ce) | 0) + Math.imul(I, ue) | 0, o = o + Math.imul(I, ce) | 0, n = n + Math.imul(E, he) | 0, i = (i = i + Math.imul(E, de) | 0) + Math.imul(S, he) | 0, o = o + Math.imul(S, de) | 0;
          var je = (c + (n = n + Math.imul(x, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(x, be) | 0) + Math.imul(M, pe) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(M, be) | 0) + (i >>> 13) | 0) + (je >>> 26) | 0, je &= 67108863, n = Math.imul(L, re), i = (i = Math.imul(L, ne)) + Math.imul(q, re) | 0, o = Math.imul(q, ne), n = n + Math.imul(P, oe) | 0, i = (i = i + Math.imul(P, ae) | 0) + Math.imul(R, oe) | 0, o = o + Math.imul(R, ae) | 0, n = n + Math.imul(C, ue) | 0, i = (i = i + Math.imul(C, ce) | 0) + Math.imul(B, ue) | 0, o = o + Math.imul(B, ce) | 0, n = n + Math.imul(j, he) | 0, i = (i = i + Math.imul(j, de) | 0) + Math.imul(I, he) | 0, o = o + Math.imul(I, de) | 0;
          var Ie = (c + (n = n + Math.imul(E, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(E, be) | 0) + Math.imul(S, pe) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(S, be) | 0) + (i >>> 13) | 0) + (Ie >>> 26) | 0, Ie &= 67108863, n = Math.imul(L, oe), i = (i = Math.imul(L, ae)) + Math.imul(q, oe) | 0, o = Math.imul(q, ae), n = n + Math.imul(P, ue) | 0, i = (i = i + Math.imul(P, ce) | 0) + Math.imul(R, ue) | 0, o = o + Math.imul(R, ce) | 0, n = n + Math.imul(C, he) | 0, i = (i = i + Math.imul(C, de) | 0) + Math.imul(B, he) | 0, o = o + Math.imul(B, de) | 0;
          var Te = (c + (n = n + Math.imul(j, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(j, be) | 0) + Math.imul(I, pe) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(I, be) | 0) + (i >>> 13) | 0) + (Te >>> 26) | 0, Te &= 67108863, n = Math.imul(L, ue), i = (i = Math.imul(L, ce)) + Math.imul(q, ue) | 0, o = Math.imul(q, ce), n = n + Math.imul(P, he) | 0, i = (i = i + Math.imul(P, de) | 0) + Math.imul(R, he) | 0, o = o + Math.imul(R, de) | 0;
          var Ce = (c + (n = n + Math.imul(C, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(C, be) | 0) + Math.imul(B, pe) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(B, be) | 0) + (i >>> 13) | 0) + (Ce >>> 26) | 0, Ce &= 67108863, n = Math.imul(L, he), i = (i = Math.imul(L, de)) + Math.imul(q, he) | 0, o = Math.imul(q, de);
          var Be = (c + (n = n + Math.imul(P, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(P, be) | 0) + Math.imul(R, pe) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(R, be) | 0) + (i >>> 13) | 0) + (Be >>> 26) | 0, Be &= 67108863;
          var Ne = (c + (n = Math.imul(L, pe)) | 0) + ((8191 & (i = (i = Math.imul(L, be)) + Math.imul(q, pe) | 0)) << 13) | 0;
          return c = ((o = Math.imul(q, be)) + (i >>> 13) | 0) + (Ne >>> 26) | 0, Ne &= 67108863, u[0] = ye, u[1] = me, u[2] = ve, u[3] = ge, u[4] = we, u[5] = _e, u[6] = Ae, u[7] = xe, u[8] = Me, u[9] = ke, u[10] = Ee, u[11] = Se, u[12] = Ue, u[13] = je, u[14] = Ie, u[15] = Te, u[16] = Ce, u[17] = Be, u[18] = Ne, 0 !== c && (u[19] = c, r.length++), r;
        };

        function s(e, t, r) {
          return new u().mulp(e, t, r);
        }

        function u(e, t) {
          this.x = e, this.y = t;
        }

        Math.imul || (o = i), m.prototype.mulTo = function (e, t) {
          var r = this.length + e.length;
          return 10 === this.length && 10 === e.length ? o(this, e, t) : r < 63 ? i(this, e, t) : r < 1024 ? function (e, t, r) {
            r.negative = t.negative ^ e.negative, r.length = e.length + t.length;

            for (var n = 0, i = 0, o = 0; o < r.length - 1; o++) {
              var a = i;
              i = 0;

              for (var s = 67108863 & n, u = Math.min(o, t.length - 1), c = Math.max(0, o - e.length + 1); c <= u; c++) {
                var f = o - c,
                    h = (0 | e.words[f]) * (0 | t.words[c]),
                    d = 67108863 & h;
                s = 67108863 & (d = d + s | 0), i += (a = (a = a + (h / 67108864 | 0) | 0) + (d >>> 26) | 0) >>> 26, a &= 67108863;
              }

              r.words[o] = s, n = a, a = i;
            }

            return 0 !== n ? r.words[o] = n : r.length--, r.strip();
          }(this, e, t) : s(this, e, t);
        }, u.prototype.makeRBT = function (e) {
          for (var t = new Array(e), r = m.prototype._countBits(e) - 1, n = 0; n < e; n++) {
            t[n] = this.revBin(n, r, e);
          }

          return t;
        }, u.prototype.revBin = function (e, t, r) {
          if (0 === e || e === r - 1) return e;

          for (var n = 0, i = 0; i < t; i++) {
            n |= (1 & e) << t - i - 1, e >>= 1;
          }

          return n;
        }, u.prototype.permute = function (e, t, r, n, i, o) {
          for (var a = 0; a < o; a++) {
            n[a] = t[e[a]], i[a] = r[e[a]];
          }
        }, u.prototype.transform = function (e, t, r, n, i, o) {
          this.permute(o, e, t, r, n, i);

          for (var a = 1; a < i; a <<= 1) {
            for (var s = a << 1, u = Math.cos(2 * Math.PI / s), c = Math.sin(2 * Math.PI / s), f = 0; f < i; f += s) {
              for (var h = u, d = c, l = 0; l < a; l++) {
                var p = r[f + l],
                    b = n[f + l],
                    y = r[f + l + a],
                    m = n[f + l + a],
                    v = h * y - d * m;
                m = h * m + d * y, y = v, r[f + l] = p + y, n[f + l] = b + m, r[f + l + a] = p - y, n[f + l + a] = b - m, l !== s && (v = u * h - c * d, d = u * d + c * h, h = v);
              }
            }
          }
        }, u.prototype.guessLen13b = function (e, t) {
          var r = 1 | Math.max(t, e),
              n = 1 & r,
              i = 0;

          for (r = r / 2 | 0; r; r >>>= 1) {
            i++;
          }

          return 1 << i + 1 + n;
        }, u.prototype.conjugate = function (e, t, r) {
          if (!(r <= 1)) for (var n = 0; n < r / 2; n++) {
            var i = e[n];
            e[n] = e[r - n - 1], e[r - n - 1] = i, i = t[n], t[n] = -t[r - n - 1], t[r - n - 1] = -i;
          }
        }, u.prototype.normalize13b = function (e, t) {
          for (var r = 0, n = 0; n < t / 2; n++) {
            var i = 8192 * Math.round(e[2 * n + 1] / t) + Math.round(e[2 * n] / t) + r;
            e[n] = 67108863 & i, r = i < 67108864 ? 0 : i / 67108864 | 0;
          }

          return e;
        }, u.prototype.convert13b = function (e, t, r, n) {
          for (var i = 0, o = 0; o < t; o++) {
            i += 0 | e[o], r[2 * o] = 8191 & i, i >>>= 13, r[2 * o + 1] = 8191 & i, i >>>= 13;
          }

          for (o = 2 * t; o < n; ++o) {
            r[o] = 0;
          }

          y(0 === i), y(0 == (-8192 & i));
        }, u.prototype.stub = function (e) {
          for (var t = new Array(e), r = 0; r < e; r++) {
            t[r] = 0;
          }

          return t;
        }, u.prototype.mulp = function (e, t, r) {
          var n = 2 * this.guessLen13b(e.length, t.length),
              i = this.makeRBT(n),
              o = this.stub(n),
              a = new Array(n),
              s = new Array(n),
              u = new Array(n),
              c = new Array(n),
              f = new Array(n),
              h = new Array(n),
              d = r.words;
          d.length = n, this.convert13b(e.words, e.length, a, n), this.convert13b(t.words, t.length, c, n), this.transform(a, o, s, u, n, i), this.transform(c, o, f, h, n, i);

          for (var l = 0; l < n; l++) {
            var p = s[l] * f[l] - u[l] * h[l];
            u[l] = s[l] * h[l] + u[l] * f[l], s[l] = p;
          }

          return this.conjugate(s, u, n), this.transform(s, u, d, o, n, i), this.conjugate(d, o, n), this.normalize13b(d, n), r.negative = e.negative ^ t.negative, r.length = e.length + t.length, r.strip();
        }, m.prototype.mul = function (e) {
          var t = new m(null);
          return t.words = new Array(this.length + e.length), this.mulTo(e, t);
        }, m.prototype.mulf = function (e) {
          var t = new m(null);
          return t.words = new Array(this.length + e.length), s(this, e, t);
        }, m.prototype.imul = function (e) {
          return this.clone().mulTo(e, this);
        }, m.prototype.imuln = function (e) {
          y("number" == typeof e), y(e < 67108864);

          for (var t = 0, r = 0; r < this.length; r++) {
            var n = (0 | this.words[r]) * e,
                i = (67108863 & n) + (67108863 & t);
            t >>= 26, t += n / 67108864 | 0, t += i >>> 26, this.words[r] = 67108863 & i;
          }

          return 0 !== t && (this.words[r] = t, this.length++), this;
        }, m.prototype.muln = function (e) {
          return this.clone().imuln(e);
        }, m.prototype.sqr = function () {
          return this.mul(this);
        }, m.prototype.isqr = function () {
          return this.imul(this.clone());
        }, m.prototype.pow = function (e) {
          var t = function (e) {
            for (var t = new Array(e.bitLength()), r = 0; r < t.length; r++) {
              var n = r / 26 | 0,
                  i = r % 26;
              t[r] = (e.words[n] & 1 << i) >>> i;
            }

            return t;
          }(e);

          if (0 === t.length) return new m(1);

          for (var r = this, n = 0; n < t.length && 0 === t[n]; n++, r = r.sqr()) {
            ;
          }

          if (++n < t.length) for (var i = r.sqr(); n < t.length; n++, i = i.sqr()) {
            0 !== t[n] && (r = r.mul(i));
          }
          return r;
        }, m.prototype.iushln = function (e) {
          y("number" == typeof e && 0 <= e);
          var t,
              r = e % 26,
              n = (e - r) / 26,
              i = 67108863 >>> 26 - r << 26 - r;

          if (0 !== r) {
            var o = 0;

            for (t = 0; t < this.length; t++) {
              var a = this.words[t] & i,
                  s = (0 | this.words[t]) - a << r;
              this.words[t] = s | o, o = a >>> 26 - r;
            }

            o && (this.words[t] = o, this.length++);
          }

          if (0 !== n) {
            for (t = this.length - 1; 0 <= t; t--) {
              this.words[t + n] = this.words[t];
            }

            for (t = 0; t < n; t++) {
              this.words[t] = 0;
            }

            this.length += n;
          }

          return this.strip();
        }, m.prototype.ishln = function (e) {
          return y(0 === this.negative), this.iushln(e);
        }, m.prototype.iushrn = function (e, t, r) {
          var n;
          y("number" == typeof e && 0 <= e), n = t ? (t - t % 26) / 26 : 0;
          var i = e % 26,
              o = Math.min((e - i) / 26, this.length),
              a = 67108863 ^ 67108863 >>> i << i,
              s = r;

          if (n -= o, n = Math.max(0, n), s) {
            for (var u = 0; u < o; u++) {
              s.words[u] = this.words[u];
            }

            s.length = o;
          }

          if (0 === o) ;else if (this.length > o) for (this.length -= o, u = 0; u < this.length; u++) {
            this.words[u] = this.words[u + o];
          } else this.words[0] = 0, this.length = 1;
          var c = 0;

          for (u = this.length - 1; 0 <= u && (0 !== c || n <= u); u--) {
            var f = 0 | this.words[u];
            this.words[u] = c << 26 - i | f >>> i, c = f & a;
          }

          return s && 0 !== c && (s.words[s.length++] = c), 0 === this.length && (this.words[0] = 0, this.length = 1), this.strip();
        }, m.prototype.ishrn = function (e, t, r) {
          return y(0 === this.negative), this.iushrn(e, t, r);
        }, m.prototype.shln = function (e) {
          return this.clone().ishln(e);
        }, m.prototype.ushln = function (e) {
          return this.clone().iushln(e);
        }, m.prototype.shrn = function (e) {
          return this.clone().ishrn(e);
        }, m.prototype.ushrn = function (e) {
          return this.clone().iushrn(e);
        }, m.prototype.testn = function (e) {
          y("number" == typeof e && 0 <= e);
          var t = e % 26,
              r = (e - t) / 26,
              n = 1 << t;
          return !(this.length <= r) && !!(this.words[r] & n);
        }, m.prototype.imaskn = function (e) {
          y("number" == typeof e && 0 <= e);
          var t = e % 26,
              r = (e - t) / 26;
          if (y(0 === this.negative, "imaskn works only with positive numbers"), this.length <= r) return this;

          if (0 !== t && r++, this.length = Math.min(r, this.length), 0 !== t) {
            var n = 67108863 ^ 67108863 >>> t << t;
            this.words[this.length - 1] &= n;
          }

          return this.strip();
        }, m.prototype.maskn = function (e) {
          return this.clone().imaskn(e);
        }, m.prototype.iaddn = function (e) {
          return y("number" == typeof e), y(e < 67108864), e < 0 ? this.isubn(-e) : 0 !== this.negative ? (1 === this.length && (0 | this.words[0]) < e ? (this.words[0] = e - (0 | this.words[0]), this.negative = 0) : (this.negative = 0, this.isubn(e), this.negative = 1), this) : this._iaddn(e);
        }, m.prototype._iaddn = function (e) {
          this.words[0] += e;

          for (var t = 0; t < this.length && 67108864 <= this.words[t]; t++) {
            this.words[t] -= 67108864, t === this.length - 1 ? this.words[t + 1] = 1 : this.words[t + 1]++;
          }

          return this.length = Math.max(this.length, t + 1), this;
        }, m.prototype.isubn = function (e) {
          if (y("number" == typeof e), y(e < 67108864), e < 0) return this.iaddn(-e);
          if (0 !== this.negative) return this.negative = 0, this.iaddn(e), this.negative = 1, this;
          if (this.words[0] -= e, 1 === this.length && this.words[0] < 0) this.words[0] = -this.words[0], this.negative = 1;else for (var t = 0; t < this.length && this.words[t] < 0; t++) {
            this.words[t] += 67108864, this.words[t + 1] -= 1;
          }
          return this.strip();
        }, m.prototype.addn = function (e) {
          return this.clone().iaddn(e);
        }, m.prototype.subn = function (e) {
          return this.clone().isubn(e);
        }, m.prototype.iabs = function () {
          return this.negative = 0, this;
        }, m.prototype.abs = function () {
          return this.clone().iabs();
        }, m.prototype._ishlnsubmul = function (e, t, r) {
          var n,
              i,
              o = e.length + r;

          this._expand(o);

          var a = 0;

          for (n = 0; n < e.length; n++) {
            i = (0 | this.words[n + r]) + a;
            var s = (0 | e.words[n]) * t;
            a = ((i -= 67108863 & s) >> 26) - (s / 67108864 | 0), this.words[n + r] = 67108863 & i;
          }

          for (; n < this.length - r; n++) {
            a = (i = (0 | this.words[n + r]) + a) >> 26, this.words[n + r] = 67108863 & i;
          }

          if (0 === a) return this.strip();

          for (y(-1 === a), n = a = 0; n < this.length; n++) {
            a = (i = -(0 | this.words[n]) + a) >> 26, this.words[n] = 67108863 & i;
          }

          return this.negative = 1, this.strip();
        }, m.prototype._wordDiv = function (e, t) {
          var r = (this.length, e.length),
              n = this.clone(),
              i = e,
              o = 0 | i.words[i.length - 1];
          0 !== (r = 26 - this._countBits(o)) && (i = i.ushln(r), n.iushln(r), o = 0 | i.words[i.length - 1]);
          var a,
              s = n.length - i.length;

          if ("mod" !== t) {
            (a = new m(null)).length = s + 1, a.words = new Array(a.length);

            for (var u = 0; u < a.length; u++) {
              a.words[u] = 0;
            }
          }

          var c = n.clone()._ishlnsubmul(i, 1, s);

          0 === c.negative && (n = c, a && (a.words[s] = 1));

          for (var f = s - 1; 0 <= f; f--) {
            var h = 67108864 * (0 | n.words[i.length + f]) + (0 | n.words[i.length + f - 1]);

            for (h = Math.min(h / o | 0, 67108863), n._ishlnsubmul(i, h, f); 0 !== n.negative;) {
              h--, n.negative = 0, n._ishlnsubmul(i, 1, f), n.isZero() || (n.negative ^= 1);
            }

            a && (a.words[f] = h);
          }

          return a && a.strip(), n.strip(), "div" !== t && 0 !== r && n.iushrn(r), {
            div: a || null,
            mod: n
          };
        }, m.prototype.divmod = function (e, t, r) {
          return y(!e.isZero()), this.isZero() ? {
            div: new m(0),
            mod: new m(0)
          } : 0 !== this.negative && 0 === e.negative ? (o = this.neg().divmod(e, t), "mod" !== t && (n = o.div.neg()), "div" !== t && (i = o.mod.neg(), r && 0 !== i.negative && i.iadd(e)), {
            div: n,
            mod: i
          }) : 0 === this.negative && 0 !== e.negative ? (o = this.divmod(e.neg(), t), "mod" !== t && (n = o.div.neg()), {
            div: n,
            mod: o.mod
          }) : 0 != (this.negative & e.negative) ? (o = this.neg().divmod(e.neg(), t), "div" !== t && (i = o.mod.neg(), r && 0 !== i.negative && i.isub(e)), {
            div: o.div,
            mod: i
          }) : e.length > this.length || this.cmp(e) < 0 ? {
            div: new m(0),
            mod: this
          } : 1 === e.length ? "div" === t ? {
            div: this.divn(e.words[0]),
            mod: null
          } : "mod" === t ? {
            div: null,
            mod: new m(this.modn(e.words[0]))
          } : {
            div: this.divn(e.words[0]),
            mod: new m(this.modn(e.words[0]))
          } : this._wordDiv(e, t);
          var n, i, o;
        }, m.prototype.div = function (e) {
          return this.divmod(e, "div", !1).div;
        }, m.prototype.mod = function (e) {
          return this.divmod(e, "mod", !1).mod;
        }, m.prototype.umod = function (e) {
          return this.divmod(e, "mod", !0).mod;
        }, m.prototype.divRound = function (e) {
          var t = this.divmod(e);
          if (t.mod.isZero()) return t.div;
          var r = 0 !== t.div.negative ? t.mod.isub(e) : t.mod,
              n = e.ushrn(1),
              i = e.andln(1),
              o = r.cmp(n);
          return o < 0 || 1 === i && 0 === o ? t.div : 0 !== t.div.negative ? t.div.isubn(1) : t.div.iaddn(1);
        }, m.prototype.modn = function (e) {
          y(e <= 67108863);

          for (var t = (1 << 26) % e, r = 0, n = this.length - 1; 0 <= n; n--) {
            r = (t * r + (0 | this.words[n])) % e;
          }

          return r;
        }, m.prototype.idivn = function (e) {
          y(e <= 67108863);

          for (var t = 0, r = this.length - 1; 0 <= r; r--) {
            var n = (0 | this.words[r]) + 67108864 * t;
            this.words[r] = n / e | 0, t = n % e;
          }

          return this.strip();
        }, m.prototype.divn = function (e) {
          return this.clone().idivn(e);
        }, m.prototype.egcd = function (e) {
          y(0 === e.negative), y(!e.isZero());
          var t = this,
              r = e.clone();
          t = 0 !== t.negative ? t.umod(e) : t.clone();

          for (var n = new m(1), i = new m(0), o = new m(0), a = new m(1), s = 0; t.isEven() && r.isEven();) {
            t.iushrn(1), r.iushrn(1), ++s;
          }

          for (var u = r.clone(), c = t.clone(); !t.isZero();) {
            for (var f = 0, h = 1; 0 == (t.words[0] & h) && f < 26; ++f, h <<= 1) {
              ;
            }

            if (0 < f) for (t.iushrn(f); 0 < f--;) {
              (n.isOdd() || i.isOdd()) && (n.iadd(u), i.isub(c)), n.iushrn(1), i.iushrn(1);
            }

            for (var d = 0, l = 1; 0 == (r.words[0] & l) && d < 26; ++d, l <<= 1) {
              ;
            }

            if (0 < d) for (r.iushrn(d); 0 < d--;) {
              (o.isOdd() || a.isOdd()) && (o.iadd(u), a.isub(c)), o.iushrn(1), a.iushrn(1);
            }
            0 <= t.cmp(r) ? (t.isub(r), n.isub(o), i.isub(a)) : (r.isub(t), o.isub(n), a.isub(i));
          }

          return {
            a: o,
            b: a,
            gcd: r.iushln(s)
          };
        }, m.prototype._invmp = function (e) {
          y(0 === e.negative), y(!e.isZero());
          var t = this,
              r = e.clone();
          t = 0 !== t.negative ? t.umod(e) : t.clone();

          for (var n, i = new m(1), o = new m(0), a = r.clone(); 0 < t.cmpn(1) && 0 < r.cmpn(1);) {
            for (var s = 0, u = 1; 0 == (t.words[0] & u) && s < 26; ++s, u <<= 1) {
              ;
            }

            if (0 < s) for (t.iushrn(s); 0 < s--;) {
              i.isOdd() && i.iadd(a), i.iushrn(1);
            }

            for (var c = 0, f = 1; 0 == (r.words[0] & f) && c < 26; ++c, f <<= 1) {
              ;
            }

            if (0 < c) for (r.iushrn(c); 0 < c--;) {
              o.isOdd() && o.iadd(a), o.iushrn(1);
            }
            0 <= t.cmp(r) ? (t.isub(r), i.isub(o)) : (r.isub(t), o.isub(i));
          }

          return (n = 0 === t.cmpn(1) ? i : o).cmpn(0) < 0 && n.iadd(e), n;
        }, m.prototype.gcd = function (e) {
          if (this.isZero()) return e.abs();
          if (e.isZero()) return this.abs();
          var t = this.clone(),
              r = e.clone();
          t.negative = 0;

          for (var n = r.negative = 0; t.isEven() && r.isEven(); n++) {
            t.iushrn(1), r.iushrn(1);
          }

          for (;;) {
            for (; t.isEven();) {
              t.iushrn(1);
            }

            for (; r.isEven();) {
              r.iushrn(1);
            }

            var i = t.cmp(r);

            if (i < 0) {
              var o = t;
              t = r, r = o;
            } else if (0 === i || 0 === r.cmpn(1)) break;

            t.isub(r);
          }

          return r.iushln(n);
        }, m.prototype.invm = function (e) {
          return this.egcd(e).a.umod(e);
        }, m.prototype.isEven = function () {
          return 0 == (1 & this.words[0]);
        }, m.prototype.isOdd = function () {
          return 1 == (1 & this.words[0]);
        }, m.prototype.andln = function (e) {
          return this.words[0] & e;
        }, m.prototype.bincn = function (e) {
          y("number" == typeof e);
          var t = e % 26,
              r = (e - t) / 26,
              n = 1 << t;
          if (this.length <= r) return this._expand(r + 1), this.words[r] |= n, this;

          for (var i = n, o = r; 0 !== i && o < this.length; o++) {
            var a = 0 | this.words[o];
            i = (a += i) >>> 26, a &= 67108863, this.words[o] = a;
          }

          return 0 !== i && (this.words[o] = i, this.length++), this;
        }, m.prototype.isZero = function () {
          return 1 === this.length && 0 === this.words[0];
        }, m.prototype.cmpn = function (e) {
          var t,
              r = e < 0;
          if (0 !== this.negative && !r) return -1;
          if (0 === this.negative && r) return 1;
          if (this.strip(), 1 < this.length) t = 1;else {
            r && (e = -e), y(e <= 67108863, "Number is too big");
            var n = 0 | this.words[0];
            t = n === e ? 0 : n < e ? -1 : 1;
          }
          return 0 !== this.negative ? 0 | -t : t;
        }, m.prototype.cmp = function (e) {
          if (0 !== this.negative && 0 === e.negative) return -1;
          if (0 === this.negative && 0 !== e.negative) return 1;
          var t = this.ucmp(e);
          return 0 !== this.negative ? 0 | -t : t;
        }, m.prototype.ucmp = function (e) {
          if (this.length > e.length) return 1;
          if (this.length < e.length) return -1;

          for (var t = 0, r = this.length - 1; 0 <= r; r--) {
            var n = 0 | this.words[r],
                i = 0 | e.words[r];

            if (n !== i) {
              n < i ? t = -1 : i < n && (t = 1);
              break;
            }
          }

          return t;
        }, m.prototype.gtn = function (e) {
          return 1 === this.cmpn(e);
        }, m.prototype.gt = function (e) {
          return 1 === this.cmp(e);
        }, m.prototype.gten = function (e) {
          return 0 <= this.cmpn(e);
        }, m.prototype.gte = function (e) {
          return 0 <= this.cmp(e);
        }, m.prototype.ltn = function (e) {
          return -1 === this.cmpn(e);
        }, m.prototype.lt = function (e) {
          return -1 === this.cmp(e);
        }, m.prototype.lten = function (e) {
          return this.cmpn(e) <= 0;
        }, m.prototype.lte = function (e) {
          return this.cmp(e) <= 0;
        }, m.prototype.eqn = function (e) {
          return 0 === this.cmpn(e);
        }, m.prototype.eq = function (e) {
          return 0 === this.cmp(e);
        }, m.red = function (e) {
          return new _(e);
        }, m.prototype.toRed = function (e) {
          return y(!this.red, "Already a number in reduction context"), y(0 === this.negative, "red works only with positives"), e.convertTo(this)._forceRed(e);
        }, m.prototype.fromRed = function () {
          return y(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
        }, m.prototype._forceRed = function (e) {
          return this.red = e, this;
        }, m.prototype.forceRed = function (e) {
          return y(!this.red, "Already a number in reduction context"), this._forceRed(e);
        }, m.prototype.redAdd = function (e) {
          return y(this.red, "redAdd works only with red numbers"), this.red.add(this, e);
        }, m.prototype.redIAdd = function (e) {
          return y(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, e);
        }, m.prototype.redSub = function (e) {
          return y(this.red, "redSub works only with red numbers"), this.red.sub(this, e);
        }, m.prototype.redISub = function (e) {
          return y(this.red, "redISub works only with red numbers"), this.red.isub(this, e);
        }, m.prototype.redShl = function (e) {
          return y(this.red, "redShl works only with red numbers"), this.red.shl(this, e);
        }, m.prototype.redMul = function (e) {
          return y(this.red, "redMul works only with red numbers"), this.red._verify2(this, e), this.red.mul(this, e);
        }, m.prototype.redIMul = function (e) {
          return y(this.red, "redMul works only with red numbers"), this.red._verify2(this, e), this.red.imul(this, e);
        }, m.prototype.redSqr = function () {
          return y(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
        }, m.prototype.redISqr = function () {
          return y(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
        }, m.prototype.redSqrt = function () {
          return y(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
        }, m.prototype.redInvm = function () {
          return y(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
        }, m.prototype.redNeg = function () {
          return y(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
        }, m.prototype.redPow = function (e) {
          return y(this.red && !e.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, e);
        };
        var c = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
        };

        function f(e, t) {
          this.name = e, this.p = new m(t, 16), this.n = this.p.bitLength(), this.k = new m(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
        }

        function b() {
          f.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
        }

        function v() {
          f.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
        }

        function g() {
          f.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
        }

        function w() {
          f.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
        }

        function _(e) {
          if ("string" == typeof e) {
            var t = m._prime(e);

            this.m = t.p, this.prime = t;
          } else y(e.gtn(1), "modulus must be greater than 1"), this.m = e, this.prime = null;
        }

        function A(e) {
          _.call(this, e), this.shift = this.m.bitLength(), this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26), this.r = new m(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
        }

        f.prototype._tmp = function () {
          var e = new m(null);
          return e.words = new Array(Math.ceil(this.n / 13)), e;
        }, f.prototype.ireduce = function (e) {
          for (var t, r = e; this.split(r, this.tmp), (t = (r = (r = this.imulK(r)).iadd(this.tmp)).bitLength()) > this.n;) {
            ;
          }

          var n = t < this.n ? -1 : r.ucmp(this.p);
          return 0 === n ? (r.words[0] = 0, r.length = 1) : 0 < n ? r.isub(this.p) : r.strip(), r;
        }, f.prototype.split = function (e, t) {
          e.iushrn(this.n, 0, t);
        }, f.prototype.imulK = function (e) {
          return e.imul(this.k);
        }, r(b, f), b.prototype.split = function (e, t) {
          for (var r = Math.min(e.length, 9), n = 0; n < r; n++) {
            t.words[n] = e.words[n];
          }

          if (t.length = r, e.length <= 9) return e.words[0] = 0, void (e.length = 1);
          var i = e.words[9];

          for (t.words[t.length++] = 4194303 & i, n = 10; n < e.length; n++) {
            var o = 0 | e.words[n];
            e.words[n - 10] = (4194303 & o) << 4 | i >>> 22, i = o;
          }

          i >>>= 22, 0 === (e.words[n - 10] = i) && 10 < e.length ? e.length -= 10 : e.length -= 9;
        }, b.prototype.imulK = function (e) {
          e.words[e.length] = 0, e.words[e.length + 1] = 0, e.length += 2;

          for (var t = 0, r = 0; r < e.length; r++) {
            var n = 0 | e.words[r];
            t += 977 * n, e.words[r] = 67108863 & t, t = 64 * n + (t / 67108864 | 0);
          }

          return 0 === e.words[e.length - 1] && (e.length--, 0 === e.words[e.length - 1] && e.length--), e;
        }, r(v, f), r(g, f), r(w, f), w.prototype.imulK = function (e) {
          for (var t = 0, r = 0; r < e.length; r++) {
            var n = 19 * (0 | e.words[r]) + t,
                i = 67108863 & n;
            n >>>= 26, e.words[r] = i, t = n;
          }

          return 0 !== t && (e.words[e.length++] = t), e;
        }, m._prime = function (e) {
          if (c[e]) return c[e];
          var t;
          if ("k256" === e) t = new b();else if ("p224" === e) t = new v();else if ("p192" === e) t = new g();else {
            if ("p25519" !== e) throw new Error("Unknown prime " + e);
            t = new w();
          }
          return c[e] = t;
        }, _.prototype._verify1 = function (e) {
          y(0 === e.negative, "red works only with positives"), y(e.red, "red works only with red numbers");
        }, _.prototype._verify2 = function (e, t) {
          y(0 == (e.negative | t.negative), "red works only with positives"), y(e.red && e.red === t.red, "red works only with red numbers");
        }, _.prototype.imod = function (e) {
          return this.prime ? this.prime.ireduce(e)._forceRed(this) : e.umod(this.m)._forceRed(this);
        }, _.prototype.neg = function (e) {
          return e.isZero() ? e.clone() : this.m.sub(e)._forceRed(this);
        }, _.prototype.add = function (e, t) {
          this._verify2(e, t);

          var r = e.add(t);
          return 0 <= r.cmp(this.m) && r.isub(this.m), r._forceRed(this);
        }, _.prototype.iadd = function (e, t) {
          this._verify2(e, t);

          var r = e.iadd(t);
          return 0 <= r.cmp(this.m) && r.isub(this.m), r;
        }, _.prototype.sub = function (e, t) {
          this._verify2(e, t);

          var r = e.sub(t);
          return r.cmpn(0) < 0 && r.iadd(this.m), r._forceRed(this);
        }, _.prototype.isub = function (e, t) {
          this._verify2(e, t);

          var r = e.isub(t);
          return r.cmpn(0) < 0 && r.iadd(this.m), r;
        }, _.prototype.shl = function (e, t) {
          return this._verify1(e), this.imod(e.ushln(t));
        }, _.prototype.imul = function (e, t) {
          return this._verify2(e, t), this.imod(e.imul(t));
        }, _.prototype.mul = function (e, t) {
          return this._verify2(e, t), this.imod(e.mul(t));
        }, _.prototype.isqr = function (e) {
          return this.imul(e, e.clone());
        }, _.prototype.sqr = function (e) {
          return this.mul(e, e);
        }, _.prototype.sqrt = function (e) {
          if (e.isZero()) return e.clone();
          var t = this.m.andln(3);

          if (y(t % 2 == 1), 3 === t) {
            var r = this.m.add(new m(1)).iushrn(2);
            return this.pow(e, r);
          }

          for (var n = this.m.subn(1), i = 0; !n.isZero() && 0 === n.andln(1);) {
            i++, n.iushrn(1);
          }

          y(!n.isZero());
          var o = new m(1).toRed(this),
              a = o.redNeg(),
              s = this.m.subn(1).iushrn(1),
              u = this.m.bitLength();

          for (u = new m(2 * u * u).toRed(this); 0 !== this.pow(u, s).cmp(a);) {
            u.redIAdd(a);
          }

          for (var c = this.pow(u, n), f = this.pow(e, n.addn(1).iushrn(1)), h = this.pow(e, n), d = i; 0 !== h.cmp(o);) {
            for (var l = h, p = 0; 0 !== l.cmp(o); p++) {
              l = l.redSqr();
            }

            y(p < d);
            var b = this.pow(c, new m(1).iushln(d - p - 1));
            f = f.redMul(b), c = b.redSqr(), h = h.redMul(c), d = p;
          }

          return f;
        }, _.prototype.invm = function (e) {
          var t = e._invmp(this.m);

          return 0 !== t.negative ? (t.negative = 0, this.imod(t).redNeg()) : this.imod(t);
        }, _.prototype.pow = function (e, t) {
          if (t.isZero()) return new m(1).toRed(this);
          if (0 === t.cmpn(1)) return e.clone();
          var r = new Array(16);
          r[0] = new m(1).toRed(this), r[1] = e;

          for (var n = 2; n < r.length; n++) {
            r[n] = this.mul(r[n - 1], e);
          }

          var i = r[0],
              o = 0,
              a = 0,
              s = t.bitLength() % 26;

          for (0 === s && (s = 26), n = t.length - 1; 0 <= n; n--) {
            for (var u = t.words[n], c = s - 1; 0 <= c; c--) {
              var f = u >> c & 1;
              i !== r[0] && (i = this.sqr(i)), 0 !== f || 0 !== o ? (o <<= 1, o |= f, (4 === ++a || 0 === n && 0 === c) && (i = this.mul(i, r[o]), o = a = 0)) : a = 0;
            }

            s = 26;
          }

          return i;
        }, _.prototype.convertTo = function (e) {
          var t = e.umod(this.m);
          return t === e ? t.clone() : t;
        }, _.prototype.convertFrom = function (e) {
          var t = e.clone();
          return t.red = null, t;
        }, m.mont = function (e) {
          return new A(e);
        }, r(A, _), A.prototype.convertTo = function (e) {
          return this.imod(e.ushln(this.shift));
        }, A.prototype.convertFrom = function (e) {
          var t = this.imod(e.mul(this.rinv));
          return t.red = null, t;
        }, A.prototype.imul = function (e, t) {
          if (e.isZero() || t.isZero()) return e.words[0] = 0, e.length = 1, e;
          var r = e.imul(t),
              n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),
              i = r.isub(n).iushrn(this.shift),
              o = i;
          return 0 <= i.cmp(this.m) ? o = i.isub(this.m) : i.cmpn(0) < 0 && (o = i.iadd(this.m)), o._forceRed(this);
        }, A.prototype.mul = function (e, t) {
          if (e.isZero() || t.isZero()) return new m(0)._forceRed(this);
          var r = e.mul(t),
              n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),
              i = r.isub(n).iushrn(this.shift),
              o = i;
          return 0 <= i.cmp(this.m) ? o = i.isub(this.m) : i.cmpn(0) < 0 && (o = i.iadd(this.m)), o._forceRed(this);
        }, A.prototype.invm = function (e) {
          return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this);
        };
      }(void 0 === e || e, this);
    }, {
      buffer: 17
    }],
    220: [function (e, t, r) {
      var n,
          i = this && this.__extends || (n = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var r in t) {
          t.hasOwnProperty(r) && (e[r] = t[r]);
        }
      }, function (e, t) {
        function r() {
          this.constructor = e;
        }

        n(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r());
      }),
          o = this && this.__importStar || function (e) {
        if (e && e.__esModule) return e;
        var t = {};
        if (null != e) for (var r in e) {
          Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
        }
        return t["default"] = e, t;
      };

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var a = e("./address"),
          s = e("./bignumber"),
          u = e("./bytes"),
          c = e("./utf8"),
          f = e("./properties"),
          h = o(e("./errors")),
          d = new RegExp(/^bytes([0-9]*)$/),
          l = new RegExp(/^(u?int)([0-9]*)$/),
          p = new RegExp(/^(.*)\[([0-9]*)\]$/);

      r.defaultCoerceFunc = function (e, t) {
        var r = e.match(l);
        return r && parseInt(r[2]) <= 48 ? t.toNumber() : t;
      };

      var b = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$"),
          y = new RegExp("^[A-Za-z_][A-Za-z0-9_]*$");

      function m(e) {
        return e.match(/^uint($|[^1-9])/) ? e = "uint256" + e.substring(4) : e.match(/^int($|[^1-9])/) && (e = "int256" + e.substring(3)), e;
      }

      function v(t, e) {
        function r(e) {
          throw new Error('unexpected character "' + t[e] + '" at position ' + e + ' in "' + t + '"');
        }

        for (var n = {
          type: "",
          name: "",
          state: {
            allowType: !0
          }
        }, i = n, o = 0; o < t.length; o++) {
          var a = t[o];

          switch (a) {
            case "(":
              i.state.allowParams || r(o), i.state.allowType = !1, i.type = m(i.type), i.components = [{
                type: "",
                name: "",
                parent: i,
                state: {
                  allowType: !0
                }
              }], i = i.components[0];
              break;

            case ")":
              delete i.state, e && "indexed" === i.name && (i.indexed = !0, i.name = ""), i.type = m(i.type);
              var s = i;
              (i = i.parent) || r(o), delete s.parent, i.state.allowParams = !1, i.state.allowName = !0, i.state.allowArray = !0;
              break;

            case ",":
              delete i.state, e && "indexed" === i.name && (i.indexed = !0, i.name = ""), i.type = m(i.type);
              var u = {
                type: "",
                name: "",
                parent: i.parent,
                state: {
                  allowType: !0
                }
              };
              i.parent.components.push(u), delete i.parent, i = u;
              break;

            case " ":
              i.state.allowType && "" !== i.type && (i.type = m(i.type), delete i.state.allowType, i.state.allowName = !0, i.state.allowParams = !0), i.state.allowName && "" !== i.name && (e && "indexed" === i.name ? (i.indexed = !0, i.name = "") : i.state.allowName = !1);
              break;

            case "[":
              i.state.allowArray || r(o), i.type += a, i.state.allowArray = !1, i.state.allowName = !1, i.state.readArray = !0;
              break;

            case "]":
              i.state.readArray || r(o), i.type += a, i.state.readArray = !1, i.state.allowArray = !0, i.state.allowName = !0;
              break;

            default:
              i.state.allowType ? (i.type += a, i.state.allowParams = !0, i.state.allowArray = !0) : i.state.allowName ? (i.name += a, delete i.state.allowArray) : i.state.readArray ? i.type += a : r(o);
          }
        }

        if (i.parent) throw new Error("unexpected eof");
        return delete n.state, e && "indexed" === i.name && (i.indexed = !0, i.name = ""), n.type = m(n.type), n;
      }

      function g(e) {
        return q(r.defaultCoerceFunc, e).type;
      }

      r.parseParamType = function (e) {
        return v(e, !0);
      }, r.formatParamType = g, r.formatSignature = function (e) {
        return e.name + "(" + e.inputs.map(function (e) {
          return g(e);
        }).join(",") + ")";
      }, r.parseSignature = function (e) {
        if ("string" == typeof e) return "event " === (e = (e = e.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ")).trim()).substring(0, 6) ? function (e) {
          var t = {
            anonymous: !1,
            inputs: [],
            name: "",
            type: "event"
          },
              r = e.match(b);
          if (!r) throw new Error("invalid event: " + e);
          if (t.name = r[1].trim(), O(r[2]).forEach(function (e) {
            (e = v(e, !0)).indexed = !!e.indexed, t.inputs.push(e);
          }), r[3].split(" ").forEach(function (e) {
            switch (e) {
              case "anonymous":
                t.anonymous = !0;
                break;

              case "":
                break;

              default:
                console.log("unknown modifier: " + e);
            }
          }), t.name && !t.name.match(y)) throw new Error('invalid identifier: "' + t.name + '"');
          return t;
        }(e.substring(6).trim()) : ("function " === e.substring(0, 9) && (e = e.substring(9)), function (e) {
          var t = {
            constant: !1,
            inputs: [],
            name: "",
            outputs: [],
            payable: !1,
            stateMutability: null,
            type: "function"
          },
              r = e.split(" returns "),
              n = r[0].match(b);
          if (!n) throw new Error("invalid signature");
          if (t.name = n[1].trim(), !t.name.match(y)) throw new Error('invalid identifier: "' + n[1] + '"');

          if (O(n[2]).forEach(function (e) {
            t.inputs.push(v(e));
          }), n[3].split(" ").forEach(function (e) {
            switch (e) {
              case "constant":
                t.constant = !0;
                break;

              case "payable":
                t.payable = !0;
                break;

              case "pure":
                t.constant = !0, t.stateMutability = "pure";
                break;

              case "view":
                t.constant = !0, t.stateMutability = "view";
                break;

              case "":
                break;

              default:
                console.log("unknown modifier: " + e);
            }
          }), 1 < r.length) {
            var i = r[1].match(b);
            if ("" != i[1].trim() || "" != i[3].trim()) throw new Error("unexpected tokens");
            O(i[2]).forEach(function (e) {
              t.outputs.push(v(e));
            });
          }

          return t;
        }(e.trim()));
        throw new Error("unknown signature");
      };

      var w = function w(e, t, r, n, i) {
        this.coerceFunc = e, this.name = t, this.type = r, this.localName = n, this.dynamic = i;
      },
          _ = function (r) {
        function e(e) {
          var t = r.call(this, e.coerceFunc, e.name, e.type, void 0, e.dynamic) || this;
          return f.defineReadOnly(t, "coder", e), t;
        }

        return i(e, r), e.prototype.encode = function (e) {
          return this.coder.encode(e);
        }, e.prototype.decode = function (e, t) {
          return this.coder.decode(e, t);
        }, e;
      }(w),
          A = function (r) {
        function e(e, t) {
          return r.call(this, e, "null", "", t, !1) || this;
        }

        return i(e, r), e.prototype.encode = function (e) {
          return u.arrayify([]);
        }, e.prototype.decode = function (e, t) {
          if (t > e.length) throw new Error("invalid null");
          return {
            consumed: 0,
            value: this.coerceFunc("null", void 0)
          };
        }, e;
      }(w),
          x = function (a) {
        function e(e, t, r, n) {
          var i = this,
              o = (r ? "int" : "uint") + 8 * t;
          return (i = a.call(this, e, o, o, n, !1) || this).size = t, i.signed = r, i;
        }

        return i(e, a), e.prototype.encode = function (t) {
          try {
            var e = s.bigNumberify(t);
            return e = e.toTwos(8 * this.size).maskn(8 * this.size), this.signed && (e = e.fromTwos(8 * this.size).toTwos(256)), u.padZeros(u.arrayify(e), 32);
          } catch (e) {
            h.throwError("invalid number value", h.INVALID_ARGUMENT, {
              arg: this.localName,
              coderType: this.name,
              value: t
            });
          }

          return null;
        }, e.prototype.decode = function (e, t) {
          e.length < t + 32 && h.throwError("insufficient data for " + this.name + " type", h.INVALID_ARGUMENT, {
            arg: this.localName,
            coderType: this.name,
            value: u.hexlify(e.slice(t, t + 32))
          });
          var r = 32 - this.size,
              n = s.bigNumberify(e.slice(t + r, t + 32));
          return n = this.signed ? n.fromTwos(8 * this.size) : n.maskn(8 * this.size), {
            consumed: 32,
            value: this.coerceFunc(this.name, n)
          };
        }, e;
      }(w),
          M = new x(function (e, t) {
        return t;
      }, 32, !1, "none"),
          k = function (r) {
        function e(e, t) {
          return r.call(this, e, "bool", "bool", t, !1) || this;
        }

        return i(e, r), e.prototype.encode = function (e) {
          return M.encode(e ? 1 : 0);
        }, e.prototype.decode = function (e, t) {
          try {
            var r = M.decode(e, t);
          } catch (e) {
            throw "insufficient data for uint256 type" === e.reason && h.throwError("insufficient data for boolean type", h.INVALID_ARGUMENT, {
              arg: this.localName,
              coderType: "boolean",
              value: e.value
            }), e;
          }

          return {
            consumed: r.consumed,
            value: this.coerceFunc("bool", !r.value.isZero())
          };
        }, e;
      }(w),
          E = function (o) {
        function e(e, t, r) {
          var n = this,
              i = "bytes" + t;
          return (n = o.call(this, e, i, i, r, !1) || this).length = t, n;
        }

        return i(e, o), e.prototype.encode = function (t) {
          var e = new Uint8Array(32);

          try {
            var r = u.arrayify(t);
            if (32 < r.length) throw new Error();
            e.set(r);
          } catch (e) {
            h.throwError("invalid " + this.name + " value", h.INVALID_ARGUMENT, {
              arg: this.localName,
              coderType: this.name,
              value: e.value || t
            });
          }

          return e;
        }, e.prototype.decode = function (e, t) {
          return e.length < t + 32 && h.throwError("insufficient data for " + name + " type", h.INVALID_ARGUMENT, {
            arg: this.localName,
            coderType: this.name,
            value: u.hexlify(e.slice(t, t + 32))
          }), {
            consumed: 32,
            value: this.coerceFunc(this.name, u.hexlify(e.slice(t, t + this.length)))
          };
        }, e;
      }(w),
          S = function (r) {
        function e(e, t) {
          return r.call(this, e, "address", "address", t, !1) || this;
        }

        return i(e, r), e.prototype.encode = function (t) {
          var e = new Uint8Array(32);

          try {
            e.set(u.arrayify(a.getAddress(t)), 12);
          } catch (e) {
            h.throwError("invalid address", h.INVALID_ARGUMENT, {
              arg: this.localName,
              coderType: "address",
              value: t
            });
          }

          return e;
        }, e.prototype.decode = function (e, t) {
          return e.length < t + 32 && h.throwError("insufficuent data for address type", h.INVALID_ARGUMENT, {
            arg: this.localName,
            coderType: "address",
            value: u.hexlify(e.slice(t, t + 32))
          }), {
            consumed: 32,
            value: this.coerceFunc("address", a.getAddress(u.hexlify(e.slice(t + 12, t + 32))))
          };
        }, e;
      }(w);

      function U(e) {
        var t = 32 * Math.ceil(e.length / 32),
            r = new Uint8Array(t - e.length);
        return u.concat([M.encode(e.length), e, r]);
      }

      function j(e, t, r) {
        e.length < t + 32 && h.throwError("insufficient data for dynamicBytes length", h.INVALID_ARGUMENT, {
          arg: r,
          coderType: "dynamicBytes",
          value: u.hexlify(e.slice(t, t + 32))
        });
        var n = M.decode(e, t).value;

        try {
          n = n.toNumber();
        } catch (e) {
          h.throwError("dynamic bytes count too large", h.INVALID_ARGUMENT, {
            arg: r,
            coderType: "dynamicBytes",
            value: n.toString()
          });
        }

        return e.length < t + 32 + n && h.throwError("insufficient data for dynamicBytes type", h.INVALID_ARGUMENT, {
          arg: r,
          coderType: "dynamicBytes",
          value: u.hexlify(e.slice(t, t + 32 + n))
        }), {
          consumed: 32 + 32 * Math.ceil(n / 32),
          value: e.slice(t + 32, t + 32 + n)
        };
      }

      var I = function (r) {
        function e(e, t) {
          return r.call(this, e, "bytes", "bytes", t, !0) || this;
        }

        return i(e, r), e.prototype.encode = function (e) {
          try {
            return U(u.arrayify(e));
          } catch (e) {
            h.throwError("invalid bytes value", h.INVALID_ARGUMENT, {
              arg: this.localName,
              coderType: "bytes",
              value: e.value
            });
          }

          return null;
        }, e.prototype.decode = function (e, t) {
          var r = j(e, t, this.localName);
          return r.value = this.coerceFunc("bytes", u.hexlify(r.value)), r;
        }, e;
      }(w),
          T = function (r) {
        function e(e, t) {
          return r.call(this, e, "string", "string", t, !0) || this;
        }

        return i(e, r), e.prototype.encode = function (e) {
          return "string" != typeof e && h.throwError("invalid string value", h.INVALID_ARGUMENT, {
            arg: this.localName,
            coderType: "string",
            value: e
          }), U(c.toUtf8Bytes(e));
        }, e.prototype.decode = function (e, t) {
          var r = j(e, t, this.localName);
          return r.value = this.coerceFunc("string", c.toUtf8String(r.value)), r;
        }, e;
      }(w);

      function C(e) {
        return 32 * Math.ceil(e / 32);
      }

      function B(e, r) {
        if (Array.isArray(r)) ;else if (r && "object" === (void 0 === r ? "undefined" : _typeof(r))) {
          var t = [];
          e.forEach(function (e) {
            t.push(r[e.localName]);
          }), r = t;
        } else h.throwError("invalid tuple value", h.INVALID_ARGUMENT, {
          coderType: "tuple",
          value: r
        });
        e.length !== r.length && h.throwError("types/value length mismatch", h.INVALID_ARGUMENT, {
          coderType: "tuple",
          value: r
        });
        var n = [];
        e.forEach(function (e, t) {
          n.push({
            dynamic: e.dynamic,
            value: e.encode(r[t])
          });
        });
        var i = 0,
            o = 0;
        n.forEach(function (e) {
          e.dynamic ? (i += 32, o += C(e.value.length)) : i += C(e.value.length);
        });
        var a = 0,
            s = i,
            u = new Uint8Array(i + o);
        return n.forEach(function (e) {
          e.dynamic ? (u.set(M.encode(s), a), a += 32, u.set(e.value, s), s += C(e.value.length)) : (u.set(e.value, a), a += C(e.value.length));
        }), u;
      }

      function N(e, n, i) {
        var o = i,
            a = 0,
            s = [];
        return e.forEach(function (e) {
          if (e.dynamic) {
            var t = M.decode(n, i);
            (r = e.decode(n, o + t.value.toNumber())).consumed = t.consumed;
          } else var r = e.decode(n, i);

          null != r.value && s.push(r.value), i += r.consumed, a += r.consumed;
        }), e.forEach(function (e, t) {
          var r = e.localName;
          r && ("length" === r && (r = "_length"), null == s[r] && (s[r] = s[t]));
        }), {
          value: s,
          consumed: a
        };
      }

      var P = function (s) {
        function e(e, t, r, n) {
          var i = this,
              o = t.type + "[" + (0 <= r ? r : "") + "]",
              a = -1 === r || t.dynamic;
          return (i = s.call(this, e, "array", o, n, a) || this).coder = t, i.length = r, i;
        }

        return i(e, s), e.prototype.encode = function (e) {
          Array.isArray(e) || h.throwError("expected array value", h.INVALID_ARGUMENT, {
            arg: this.localName,
            coderType: "array",
            value: e
          });
          var t = this.length,
              r = new Uint8Array(0);
          -1 === t && (t = e.length, r = M.encode(t)), h.checkArgumentCount(t, e.length, "in coder array" + (this.localName ? " " + this.localName : ""));

          for (var n = [], i = 0; i < e.length; i++) {
            n.push(this.coder);
          }

          return u.concat([r, B(n, e)]);
        }, e.prototype.decode = function (e, t) {
          var r = 0,
              n = this.length;

          if (-1 === n) {
            try {
              var i = M.decode(e, t);
            } catch (e) {
              h.throwError("insufficient data for dynamic array length", h.INVALID_ARGUMENT, {
                arg: this.localName,
                coderType: "array",
                value: e.value
              });
            }

            try {
              n = i.value.toNumber();
            } catch (e) {
              h.throwError("array count too large", h.INVALID_ARGUMENT, {
                arg: this.localName,
                coderType: "array",
                value: i.value.toString()
              });
            }

            r += i.consumed, t += i.consumed;
          }

          for (var o = [], a = 0; a < n; a++) {
            o.push(new _(this.coder));
          }

          var s = N(o, e, t);
          return s.consumed += r, s.value = this.coerceFunc(this.type, s.value), s;
        }, e;
      }(w),
          R = function (s) {
        function e(e, t, r) {
          var n = this,
              i = !1,
              o = [];
          t.forEach(function (e) {
            e.dynamic && (i = !0), o.push(e.type);
          });
          var a = "tuple(" + o.join(",") + ")";
          return (n = s.call(this, e, "tuple", a, r, i) || this).coders = t, n;
        }

        return i(e, s), e.prototype.encode = function (e) {
          return B(this.coders, e);
        }, e.prototype.decode = function (e, t) {
          var r = N(this.coders, e, t);
          return r.value = this.coerceFunc(this.type, r.value), r;
        }, e;
      }(w);

      function O(e) {
        for (var t = [], r = "", n = 0, i = 0; i < e.length; i++) {
          var o = e[i];
          if ("," === o && 0 === n) t.push(r), r = "";else if (r += o, "(" === o) n++;else if (")" === o && -1 === --n) throw new Error("unbalanced parenthsis");
        }

        return t.push(r), t;
      }

      var L = {
        address: S,
        bool: k,
        string: T,
        bytes: I
      };

      function q(e, t) {
        var r,
            n = L[t.type];
        if (n) return new n(e, t.name);
        if (r = t.type.match(l)) return (0 === (i = parseInt(r[2] || "256")) || 256 < i || i % 8 != 0) && h.throwError("invalid " + r[1] + " bit length", h.INVALID_ARGUMENT, {
          arg: "param",
          value: t
        }), new x(e, i / 8, "int" === r[1], t.name);
        if (r = t.type.match(d)) return (0 === (i = parseInt(r[1])) || 32 < i) && h.throwError("invalid bytes length", h.INVALID_ARGUMENT, {
          arg: "param",
          value: t
        }), new E(e, i, t.name);

        if (r = t.type.match(p)) {
          var i = parseInt(r[2] || "-1");
          return (t = f.jsonCopy(t)).type = r[1], new P(e, q(e, t), i, t.name);
        }

        return "tuple" === t.type.substring(0, 5) ? function (t, e, r) {
          e || (e = []);
          var n = [];
          return e.forEach(function (e) {
            n.push(q(t, e));
          }), new R(t, n, r);
        }(e, t.components, t.name) : "" === t.type ? new A(e, t.name) : (h.throwError("invalid type", h.INVALID_ARGUMENT, {
          arg: "type",
          value: t.type
        }), null);
      }

      var D = function () {
        function t(e) {
          h.checkNew(this, t), e || (e = r.defaultCoerceFunc), f.defineReadOnly(this, "coerceFunc", e);
        }

        return t.prototype.encode = function (e, t) {
          e.length !== t.length && h.throwError("types/values length mismatch", h.INVALID_ARGUMENT, {
            count: {
              types: e.length,
              values: t.length
            },
            value: {
              types: e,
              values: t
            }
          });
          var r = [];
          return e.forEach(function (e) {
            var t = null;
            t = "string" == typeof e ? v(e) : e, r.push(q(this.coerceFunc, t));
          }, this), u.hexlify(new R(this.coerceFunc, r, "_").encode(t));
        }, t.prototype.decode = function (e, t) {
          var r = [];
          return e.forEach(function (e) {
            var t = null;
            t = "string" == typeof e ? v(e) : f.jsonCopy(e), r.push(q(this.coerceFunc, t));
          }, this), new R(this.coerceFunc, r, "_").decode(u.arrayify(t), 0).value;
        }, t;
      }();

      r.AbiCoder = D, r.defaultAbiCoder = new D();
    }, {
      "./address": 221,
      "./bignumber": 222,
      "./bytes": 223,
      "./errors": 224,
      "./properties": 226,
      "./utf8": 229
    }],
    221: [function (e, t, r) {
      var n = this && this.__importDefault || function (e) {
        return e && e.__esModule ? e : {
          "default": e
        };
      };

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var i = n(e("bn.js")),
          o = e("./bytes"),
          a = e("./keccak256"),
          s = e("./rlp"),
          u = e("./errors");

      function c(e) {
        "string" == typeof e && e.match(/^0x[0-9A-Fa-f]{40}$/) || u.throwError("invalid address", u.INVALID_ARGUMENT, {
          arg: "address",
          value: e
        });

        for (var t = (e = e.toLowerCase()).substring(2).split(""), r = new Uint8Array(40), n = 0; n < 40; n++) {
          r[n] = t[n].charCodeAt(0);
        }

        r = o.arrayify(a.keccak256(r));

        for (var i = 0; i < 40; i += 2) {
          8 <= r[i >> 1] >> 4 && (t[i] = t[i].toUpperCase()), 8 <= (15 & r[i >> 1]) && (t[i + 1] = t[i + 1].toUpperCase());
        }

        return "0x" + t.join("");
      }

      for (var f = {}, h = 0; h < 10; h++) {
        f[String(h)] = String(h);
      }

      for (h = 0; h < 26; h++) {
        f[String.fromCharCode(65 + h)] = String(10 + h);
      }

      var d,
          l = Math.floor((d = 9007199254740991, Math.log10 ? Math.log10(d) : Math.log(d) / Math.LN10));

      function p(e) {
        e = (e = e.toUpperCase()).substring(4) + e.substring(0, 2) + "00";
        var t = "";

        for (e.split("").forEach(function (e) {
          t += f[e];
        }); t.length >= l;) {
          var r = t.substring(0, l);
          t = parseInt(r, 10) % 97 + t.substring(r.length);
        }

        for (var n = String(98 - parseInt(t, 10) % 97); n.length < 2;) {
          n = "0" + n;
        }

        return n;
      }

      function b(e) {
        var t = null;
        if ("string" != typeof e && u.throwError("invalid address", u.INVALID_ARGUMENT, {
          arg: "address",
          value: e
        }), e.match(/^(0x)?[0-9a-fA-F]{40}$/)) "0x" !== e.substring(0, 2) && (e = "0x" + e), t = c(e), e.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && t !== e && u.throwError("bad address checksum", u.INVALID_ARGUMENT, {
          arg: "address",
          value: e
        });else if (e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
          for (e.substring(2, 4) !== p(e) && u.throwError("bad icap checksum", u.INVALID_ARGUMENT, {
            arg: "address",
            value: e
          }), t = new i["default"].BN(e.substring(4), 36).toString(16); t.length < 40;) {
            t = "0" + t;
          }

          t = c("0x" + t);
        } else u.throwError("invalid address", u.INVALID_ARGUMENT, {
          arg: "address",
          value: e
        });
        return t;
      }

      r.getAddress = b, r.getIcapAddress = function (e) {
        for (var t = new i["default"].BN(b(e).substring(2), 16).toString(36).toUpperCase(); t.length < 30;) {
          t = "0" + t;
        }

        return "XE" + p("XE00" + t) + t;
      }, r.getContractAddress = function (e) {
        if (!e.from) throw new Error("missing from address");
        var t = e.nonce;
        return b("0x" + a.keccak256(s.encode([b(e.from), o.stripZeros(o.hexlify(t))])).substring(26));
      };
    }, {
      "./bytes": 223,
      "./errors": 224,
      "./keccak256": 225,
      "./rlp": 227,
      "bn.js": 219
    }],
    222: [function (e, t, r) {
      var n,
          i = this && this.__extends || (n = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var r in t) {
          t.hasOwnProperty(r) && (e[r] = t[r]);
        }
      }, function (e, t) {
        function r() {
          this.constructor = e;
        }

        n(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r());
      }),
          o = this && this.__importDefault || function (e) {
        return e && e.__esModule ? e : {
          "default": e
        };
      },
          a = this && this.__importStar || function (e) {
        if (e && e.__esModule) return e;
        var t = {};
        if (null != e) for (var r in e) {
          Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
        }
        return t["default"] = e, t;
      };

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var s = o(e("bn.js")),
          u = e("./bytes"),
          c = e("./properties"),
          f = e("./types"),
          h = a(e("./errors")),
          d = new s["default"].BN(-1);

      function l(e) {
        var t = e.toString(16);
        return "-" === t[0] ? t.length % 2 == 0 ? "-0x0" + t.substring(1) : "-0x" + t.substring(1) : t.length % 2 == 1 ? "0x0" + t : "0x" + t;
      }

      function p(e) {
        return m(e)._bn;
      }

      function b(e) {
        return new y(l(e));
      }

      var y = function (r) {
        function n(e) {
          var t = r.call(this) || this;
          if (h.checkNew(t, n), "string" == typeof e) u.isHexString(e) ? ("0x" == e && (e = "0x0"), c.defineReadOnly(t, "_hex", e)) : "-" === e[0] && u.isHexString(e.substring(1)) ? c.defineReadOnly(t, "_hex", e) : e.match(/^-?[0-9]*$/) ? ("" == e && (e = "0"), c.defineReadOnly(t, "_hex", l(new s["default"].BN(e)))) : h.throwError("invalid BigNumber string value", h.INVALID_ARGUMENT, {
            arg: "value",
            value: e
          });else if ("number" == typeof e) {
            parseInt(String(e)) !== e && h.throwError("underflow", h.NUMERIC_FAULT, {
              operation: "setValue",
              fault: "underflow",
              value: e,
              outputValue: parseInt(String(e))
            });

            try {
              c.defineReadOnly(t, "_hex", l(new s["default"].BN(e)));
            } catch (e) {
              h.throwError("overflow", h.NUMERIC_FAULT, {
                operation: "setValue",
                fault: "overflow",
                details: e.message
              });
            }
          } else e instanceof n ? c.defineReadOnly(t, "_hex", e._hex) : e.toHexString ? c.defineReadOnly(t, "_hex", l(p(e.toHexString()))) : u.isArrayish(e) ? c.defineReadOnly(t, "_hex", l(new s["default"].BN(u.hexlify(e).substring(2), 16))) : h.throwError("invalid BigNumber value", h.INVALID_ARGUMENT, {
            arg: "value",
            value: e
          });
          return t;
        }

        return i(n, r), Object.defineProperty(n.prototype, "_bn", {
          get: function get() {
            return "-" === this._hex[0] ? new s["default"].BN(this._hex.substring(3), 16).mul(d) : new s["default"].BN(this._hex.substring(2), 16);
          },
          enumerable: !0,
          configurable: !0
        }), n.prototype.fromTwos = function (e) {
          return b(this._bn.fromTwos(e));
        }, n.prototype.toTwos = function (e) {
          return b(this._bn.toTwos(e));
        }, n.prototype.add = function (e) {
          return b(this._bn.add(p(e)));
        }, n.prototype.sub = function (e) {
          return b(this._bn.sub(p(e)));
        }, n.prototype.div = function (e) {
          return m(e).isZero() && h.throwError("division by zero", h.NUMERIC_FAULT, {
            operation: "divide",
            fault: "division by zero"
          }), b(this._bn.div(p(e)));
        }, n.prototype.mul = function (e) {
          return b(this._bn.mul(p(e)));
        }, n.prototype.mod = function (e) {
          return b(this._bn.mod(p(e)));
        }, n.prototype.pow = function (e) {
          return b(this._bn.pow(p(e)));
        }, n.prototype.maskn = function (e) {
          return b(this._bn.maskn(e));
        }, n.prototype.eq = function (e) {
          return this._bn.eq(p(e));
        }, n.prototype.lt = function (e) {
          return this._bn.lt(p(e));
        }, n.prototype.lte = function (e) {
          return this._bn.lte(p(e));
        }, n.prototype.gt = function (e) {
          return this._bn.gt(p(e));
        }, n.prototype.gte = function (e) {
          return this._bn.gte(p(e));
        }, n.prototype.isZero = function () {
          return this._bn.isZero();
        }, n.prototype.toNumber = function () {
          try {
            return this._bn.toNumber();
          } catch (e) {
            h.throwError("overflow", h.NUMERIC_FAULT, {
              operation: "setValue",
              fault: "overflow",
              details: e.message
            });
          }

          return null;
        }, n.prototype.toString = function () {
          return this._bn.toString(10);
        }, n.prototype.toHexString = function () {
          return this._hex;
        }, n;
      }(f.BigNumber);

      function m(e) {
        return e instanceof y ? e : new y(e);
      }

      r.bigNumberify = m, r.ConstantNegativeOne = m(-1), r.ConstantZero = m(0), r.ConstantOne = m(1), r.ConstantTwo = m(2), r.ConstantWeiPerEther = m("1000000000000000000");
    }, {
      "./bytes": 223,
      "./errors": 224,
      "./properties": 226,
      "./types": 228,
      "bn.js": 219
    }],
    223: [function (e, t, r) {
      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var s = e("./errors");

      function a(e) {
        return !!e._bn;
      }

      function u(t) {
        return t.slice || (t.slice = function () {
          var e = Array.prototype.slice.call(arguments);
          return new Uint8Array(Array.prototype.slice.apply(t, e));
        }), t;
      }

      function c(e) {
        if (!e || parseInt(String(e.length)) != e.length || "string" == typeof e) return !1;

        for (var t = 0; t < e.length; t++) {
          var r = e[t];
          if (r < 0 || 256 <= r || parseInt(String(r)) != r) return !1;
        }

        return !0;
      }

      function f(e) {
        if (null == e && s.throwError("cannot convert null value to array", s.INVALID_ARGUMENT, {
          arg: "value",
          value: e
        }), a(e) && (e = e.toHexString()), "string" == typeof e) {
          var t = e.match(/^(0x)?[0-9a-fA-F]*$/);
          t || s.throwError("invalid hexidecimal string", s.INVALID_ARGUMENT, {
            arg: "value",
            value: e
          }), "0x" !== t[1] && s.throwError("hex string must have 0x prefix", s.INVALID_ARGUMENT, {
            arg: "value",
            value: e
          }), (e = e.substring(2)).length % 2 && (e = "0" + e);

          for (var r = [], n = 0; n < e.length; n += 2) {
            r.push(parseInt(e.substr(n, 2), 16));
          }

          return u(new Uint8Array(r));
        }

        return c(e) ? u(new Uint8Array(e)) : (s.throwError("invalid arrayify value", null, {
          arg: "value",
          value: e,
          type: void 0 === e ? "undefined" : _typeof(e)
        }), null);
      }

      function n(e) {
        for (var t = [], r = 0, n = 0; n < e.length; n++) {
          var i = f(e[n]);
          t.push(i), r += i.length;
        }

        var o = new Uint8Array(r),
            a = 0;

        for (n = 0; n < t.length; n++) {
          o.set(t[n], a), a += t[n].length;
        }

        return u(o);
      }

      function i(e, t) {
        return !("string" != typeof e || !e.match(/^0x[0-9A-Fa-f]*$/)) && (!t || e.length === 2 + 2 * t);
      }

      r.AddressZero = "0x0000000000000000000000000000000000000000", r.HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000", r.isArrayish = c, r.arrayify = f, r.concat = n, r.stripZeros = function (e) {
        var t = f(e);
        if (0 === t.length) return t;

        for (var r = 0; 0 === t[r];) {
          r++;
        }

        return r && (t = t.slice(r)), t;
      }, r.padZeros = function (e, t) {
        if (t < (e = f(e)).length) throw new Error("cannot pad");
        var r = new Uint8Array(t);
        return r.set(e, t - e.length), u(r);
      }, r.isHexString = i;
      var h = "0123456789abcdef";

      function d(e) {
        if (a(e)) return e.toHexString();

        if ("number" == typeof e) {
          e < 0 && s.throwError("cannot hexlify negative value", s.INVALID_ARGUMENT, {
            arg: "value",
            value: e
          });

          for (var t = ""; e;) {
            t = h[15 & e] + t, e = Math.floor(e / 16);
          }

          return t.length ? (t.length % 2 && (t = "0" + t), "0x" + t) : "0x00";
        }

        if ("string" == typeof e) {
          var r = e.match(/^(0x)?[0-9a-fA-F]*$/);
          return r || s.throwError("invalid hexidecimal string", s.INVALID_ARGUMENT, {
            arg: "value",
            value: e
          }), "0x" !== r[1] && s.throwError("hex string must have 0x prefix", s.INVALID_ARGUMENT, {
            arg: "value",
            value: e
          }), e.length % 2 && (e = "0x0" + e.substring(2)), e;
        }

        if (c(e)) {
          for (var n = [], i = 0; i < e.length; i++) {
            var o = e[i];
            n.push(h[(240 & o) >> 4] + h[15 & o]);
          }

          return "0x" + n.join("");
        }

        return s.throwError("invalid hexlify value", null, {
          arg: "value",
          value: e
        }), "never";
      }

      function l(e, t) {
        for (i(e) || s.throwError("invalid hex string", s.INVALID_ARGUMENT, {
          arg: "value",
          value: e
        }); e.length < 2 * t + 2;) {
          e = "0x0" + e.substring(2);
        }

        return e;
      }

      function o(e) {
        var t,
            r = 0,
            n = "0x",
            i = "0x";

        if ((t = e) && null != t.r && null != t.s) {
          null == e.v && null == e.recoveryParam && s.throwError("at least on of recoveryParam or v must be specified", s.INVALID_ARGUMENT, {
            argument: "signature",
            value: e
          }), n = l(e.r, 32), i = l(e.s, 32), "string" == typeof (r = e.v) && (r = parseInt(r, 16));
          var o = e.recoveryParam;
          null == o && null != e.v && (o = 1 - r % 2), r = 27 + o;
        } else {
          var a = f(e);
          if (65 !== a.length) throw new Error("invalid signature");
          n = d(a.slice(0, 32)), i = d(a.slice(32, 64)), 27 !== (r = a[64]) && 28 !== r && (r = 27 + r % 2);
        }

        return {
          r: n,
          s: i,
          recoveryParam: r - 27,
          v: r
        };
      }

      r.hexlify = d, r.hexDataLength = function (e) {
        return i(e) && e.length % 2 == 0 ? (e.length - 2) / 2 : null;
      }, r.hexDataSlice = function (e, t, r) {
        return i(e) || s.throwError("invalid hex data", s.INVALID_ARGUMENT, {
          arg: "value",
          value: e
        }), e.length % 2 != 0 && s.throwError("hex data length must be even", s.INVALID_ARGUMENT, {
          arg: "value",
          value: e
        }), t = 2 + 2 * t, null != r ? "0x" + e.substring(t, t + 2 * r) : "0x" + e.substring(t);
      }, r.hexStripZeros = function (e) {
        for (i(e) || s.throwError("invalid hex string", s.INVALID_ARGUMENT, {
          arg: "value",
          value: e
        }); 3 < e.length && "0x0" === e.substring(0, 3);) {
          e = "0x" + e.substring(3);
        }

        return e;
      }, r.hexZeroPad = l, r.splitSignature = o, r.joinSignature = function (e) {
        return d(n([(e = o(e)).r, e.s, e.recoveryParam ? "0x1c" : "0x1b"]));
      };
    }, {
      "./errors": 224
    }],
    224: [function (e, t, a) {
      Object.defineProperty(a, "__esModule", {
        value: !0
      }), a.UNKNOWN_ERROR = "UNKNOWN_ERROR", a.NOT_IMPLEMENTED = "NOT_IMPLEMENTED", a.MISSING_NEW = "MISSING_NEW", a.CALL_EXCEPTION = "CALL_EXCEPTION", a.INVALID_ARGUMENT = "INVALID_ARGUMENT", a.MISSING_ARGUMENT = "MISSING_ARGUMENT", a.UNEXPECTED_ARGUMENT = "UNEXPECTED_ARGUMENT", a.NUMERIC_FAULT = "NUMERIC_FAULT";
      var r = !(a.UNSUPPORTED_OPERATION = "UNSUPPORTED_OPERATION"),
          s = !1;

      function n(e, t, r) {
        if (s) throw new Error("unknown error");
        t || (t = a.UNKNOWN_ERROR), r || (r = {});
        var n = [];
        Object.keys(r).forEach(function (t) {
          try {
            n.push(t + "=" + JSON.stringify(r[t]));
          } catch (e) {
            n.push(t + "=" + JSON.stringify(r[t].toString()));
          }
        });
        var i = e;
        n.length && (e += " (" + n.join(", ") + ")");
        var o = new Error(e);
        throw o.reason = i, o.code = t, Object.keys(r).forEach(function (e) {
          o[e] = r[e];
        }), o;
      }

      a.throwError = n, a.checkNew = function (e, t) {
        e instanceof t || n("missing new", a.MISSING_NEW, {
          name: t.name
        });
      }, a.checkArgumentCount = function (e, t, r) {
        r || (r = ""), e < t && n("missing argument" + r, a.MISSING_ARGUMENT, {
          count: e,
          expectedCount: t
        }), t < e && n("too many arguments" + r, a.UNEXPECTED_ARGUMENT, {
          count: e,
          expectedCount: t
        });
      }, a.setCensorship = function (e, t) {
        r && n("error censorship permanent", a.UNSUPPORTED_OPERATION, {
          operation: "setCersorship"
        }), s = !!e, r = !!t;
      };
    }, {}],
    225: [function (e, t, r) {
      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var n = e("js-sha3"),
          i = e("./bytes");

      r.keccak256 = function (e) {
        return "0x" + n.keccak_256(i.arrayify(e));
      };
    }, {
      "./bytes": 223,
      "js-sha3": 230
    }],
    226: [function (e, t, r) {
      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.defineReadOnly = function (e, t, r) {
        Object.defineProperty(e, t, {
          enumerable: !0,
          value: r,
          writable: !1
        });
      }, r.defineFrozen = function (e, t, r) {
        var n = JSON.stringify(r);
        Object.defineProperty(e, t, {
          enumerable: !0,
          get: function get() {
            return JSON.parse(n);
          }
        });
      }, r.resolveProperties = function (r) {
        var n = {},
            i = [];
        return Object.keys(r).forEach(function (t) {
          var e = r[t];
          e instanceof Promise ? i.push(e.then(function (e) {
            return n[t] = e, null;
          })) : n[t] = e;
        }), Promise.all(i).then(function () {
          return n;
        });
      }, r.shallowCopy = function (e) {
        var t = {};

        for (var r in e) {
          t[r] = e[r];
        }

        return t;
      }, r.jsonCopy = function (e) {
        return JSON.parse(JSON.stringify(e));
      };
    }, {}],
    227: [function (e, t, r) {
      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("./bytes");

      function a(e) {
        for (var t = []; e;) {
          t.unshift(255 & e), e >>= 8;
        }

        return t;
      }

      function i(e, t, r) {
        for (var n = 0, i = 0; i < r; i++) {
          n = 256 * n + e[t + i];
        }

        return n;
      }

      function s(e, t, r, n) {
        for (var i = []; r < t + 1 + n;) {
          var o = u(e, r);
          if (i.push(o.result), t + 1 + n < (r += o.consumed)) throw new Error("invalid rlp");
        }

        return {
          consumed: 1 + n,
          result: i
        };
      }

      function u(e, t) {
        if (0 === e.length) throw new Error("invalid rlp data");

        if (248 <= e[t]) {
          if (t + 1 + (r = e[t] - 247) > e.length) throw new Error("too short");
          if (t + 1 + r + (n = i(e, t + 1, r)) > e.length) throw new Error("to short");
          return s(e, t, t + 1 + r, r + n);
        }

        if (192 <= e[t]) {
          if (t + 1 + (n = e[t] - 192) > e.length) throw new Error("invalid rlp data");
          return s(e, t, t + 1, n);
        }

        if (184 <= e[t]) {
          var r;
          if (t + 1 + (r = e[t] - 183) > e.length) throw new Error("invalid rlp data");
          if (t + 1 + r + (n = i(e, t + 1, r)) > e.length) throw new Error("invalid rlp data");
          return {
            consumed: 1 + r + n,
            result: o.hexlify(e.slice(t + 1 + r, t + 1 + r + n))
          };
        }

        if (128 <= e[t]) {
          var n;
          if (t + 1 + (n = e[t] - 128) > e.length) throw new Error("invlaid rlp data");
          return {
            consumed: 1 + n,
            result: o.hexlify(e.slice(t + 1, t + 1 + n))
          };
        }

        return {
          consumed: 1,
          result: o.hexlify(e[t])
        };
      }

      r.encode = function (e) {
        return o.hexlify(function t(e) {
          if (Array.isArray(e)) {
            var r = [];
            return e.forEach(function (e) {
              r = r.concat(t(e));
            }), r.length <= 55 ? (r.unshift(192 + r.length), r) : ((n = a(r.length)).unshift(247 + n.length), n.concat(r));
          }

          var n,
              i = Array.prototype.slice.call(o.arrayify(e));
          return 1 === i.length && i[0] <= 127 ? i : i.length <= 55 ? (i.unshift(128 + i.length), i) : ((n = a(i.length)).unshift(183 + n.length), n.concat(i));
        }(e));
      }, r.decode = function (e) {
        var t = o.arrayify(e),
            r = u(t, 0);
        if (r.consumed !== t.length) throw new Error("invalid rlp data");
        return r.result;
      };
    }, {
      "./bytes": 223
    }],
    228: [function (e, t, r) {
      Object.defineProperty(r, "__esModule", {
        value: !0
      });

      var n = function n() {};

      r.BigNumber = n;

      var i = function i() {};

      r.Indexed = i;

      var o = function o() {};

      r.MinimalProvider = o;

      var a = function a() {};

      r.Signer = a;

      var s = function s() {};

      r.HDNode = s;
    }, {}],
    229: [function (e, t, r) {
      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var a,
          n,
          u = e("./bytes");
      (n = a = r.UnicodeNormalizationForm || (r.UnicodeNormalizationForm = {})).current = "", n.NFC = "NFC", n.NFD = "NFD", n.NFKC = "NFKC", n.NFKD = "NFKD", r.toUtf8Bytes = function (e, t) {
        void 0 === t && (t = a.current), t != a.current && (e = e.normalize(t));

        for (var r = [], n = 0, i = 0; i < e.length; i++) {
          var o = e.charCodeAt(i);
          o < 128 ? r[n++] = o : (o < 2048 ? r[n++] = o >> 6 | 192 : (55296 == (64512 & o) && i + 1 < e.length && 56320 == (64512 & e.charCodeAt(i + 1)) ? (o = 65536 + ((1023 & o) << 10) + (1023 & e.charCodeAt(++i)), r[n++] = o >> 18 | 240, r[n++] = o >> 12 & 63 | 128) : r[n++] = o >> 12 | 224, r[n++] = o >> 6 & 63 | 128), r[n++] = 63 & o | 128);
        }

        return u.arrayify(r);
      }, r.toUtf8String = function (e) {
        e = u.arrayify(e);

        for (var t = "", r = 0; r < e.length;) {
          var n = e[r++];

          if (n >> 7 != 0) {
            if (n >> 6 != 2) {
              var i = null;
              if (n >> 5 == 6) i = 1;else if (n >> 4 == 14) i = 2;else if (n >> 3 == 30) i = 3;else if (n >> 2 == 62) i = 4;else {
                if (n >> 1 != 126) continue;
                i = 5;
              }

              if (r + i > e.length) {
                for (; r < e.length && e[r] >> 6 == 2; r++) {
                  ;
                }

                if (r != e.length) continue;
                return t;
              }

              var o,
                  a = n & (1 << 8 - i - 1) - 1;

              for (o = 0; o < i; o++) {
                var s = e[r++];
                if (s >> 6 != 2) break;
                a = a << 6 | 63 & s;
              }

              o == i ? a <= 65535 ? t += String.fromCharCode(a) : (a -= 65536, t += String.fromCharCode(55296 + (a >> 10 & 1023), 56320 + (1023 & a))) : r--;
            }
          } else t += String.fromCharCode(n);
        }

        return t;
      };
    }, {
      "./bytes": 223
    }],
    230: [function (e, _, t) {
      (function (g, w) {
        !function () {
          var e = "object" === ("undefined" == typeof window ? "undefined" : _typeof(window)) ? window : {};
          !e.JS_SHA3_NO_NODE_JS && "object" === (void 0 === g ? "undefined" : _typeof(g)) && g.versions && g.versions.node && (e = w);

          for (var t = !e.JS_SHA3_NO_COMMON_JS && "object" === (void 0 === _ ? "undefined" : _typeof(_)) && _.exports, u = "0123456789abcdef".split(""), f = [0, 8, 16, 24], fe = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648], r = [224, 256, 384, 512], o = ["hex", "buffer", "arrayBuffer", "array"], a = function a(t, r, n) {
            return function (e) {
              return new m(t, r, t).update(e)[n]();
            };
          }, s = function s(r, n, i) {
            return function (e, t) {
              return new m(r, n, t).update(e)[i]();
            };
          }, n = function n(e, t) {
            var r = a(e, t, "hex");
            r.create = function () {
              return new m(e, t, e);
            }, r.update = function (e) {
              return r.create().update(e);
            };

            for (var n = 0; n < o.length; ++n) {
              var i = o[n];
              r[i] = a(e, t, i);
            }

            return r;
          }, i = [{
            name: "keccak",
            padding: [1, 256, 65536, 16777216],
            bits: r,
            createMethod: n
          }, {
            name: "sha3",
            padding: [6, 1536, 393216, 100663296],
            bits: r,
            createMethod: n
          }, {
            name: "shake",
            padding: [31, 7936, 2031616, 520093696],
            bits: [128, 256],
            createMethod: function createMethod(t, r) {
              var n = s(t, r, "hex");
              n.create = function (e) {
                return new m(t, r, e);
              }, n.update = function (e, t) {
                return n.create(t).update(e);
              };

              for (var e = 0; e < o.length; ++e) {
                var i = o[e];
                n[i] = s(t, r, i);
              }

              return n;
            }
          }], c = {}, h = [], d = 0; d < i.length; ++d) {
            for (var l = i[d], p = l.bits, b = 0; b < p.length; ++b) {
              var y = l.name + "_" + p[b];
              h.push(y), c[y] = l.createMethod(p[b], l.padding);
            }
          }

          function m(e, t, r) {
            this.blocks = [], this.s = [], this.padding = t, this.outputBits = r, this.reset = !0, this.block = 0, this.start = 0, this.blockCount = 1600 - (e << 1) >> 5, this.byteCount = this.blockCount << 2, this.outputBlocks = r >> 5, this.extraBytes = (31 & r) >> 3;

            for (var n = 0; n < 50; ++n) {
              this.s[n] = 0;
            }
          }

          m.prototype.update = function (e) {
            var t = "string" != typeof e;
            t && e.constructor === ArrayBuffer && (e = new Uint8Array(e));

            for (var r, n, i = e.length, o = this.blocks, a = this.byteCount, s = this.blockCount, u = 0, c = this.s; u < i;) {
              if (this.reset) for (this.reset = !1, o[0] = this.block, r = 1; r < s + 1; ++r) {
                o[r] = 0;
              }
              if (t) for (r = this.start; u < i && r < a; ++u) {
                o[r >> 2] |= e[u] << f[3 & r++];
              } else for (r = this.start; u < i && r < a; ++u) {
                (n = e.charCodeAt(u)) < 128 ? o[r >> 2] |= n << f[3 & r++] : (n < 2048 ? o[r >> 2] |= (192 | n >> 6) << f[3 & r++] : (n < 55296 || 57344 <= n ? o[r >> 2] |= (224 | n >> 12) << f[3 & r++] : (n = 65536 + ((1023 & n) << 10 | 1023 & e.charCodeAt(++u)), o[r >> 2] |= (240 | n >> 18) << f[3 & r++], o[r >> 2] |= (128 | n >> 12 & 63) << f[3 & r++]), o[r >> 2] |= (128 | n >> 6 & 63) << f[3 & r++]), o[r >> 2] |= (128 | 63 & n) << f[3 & r++]);
              }

              if (a <= (this.lastByteIndex = r)) {
                for (this.start = r - a, this.block = o[s], r = 0; r < s; ++r) {
                  c[r] ^= o[r];
                }

                v(c), this.reset = !0;
              } else this.start = r;
            }

            return this;
          }, m.prototype.finalize = function () {
            var e = this.blocks,
                t = this.lastByteIndex,
                r = this.blockCount,
                n = this.s;
            if (e[t >> 2] |= this.padding[3 & t], this.lastByteIndex === this.byteCount) for (e[0] = e[r], t = 1; t < r + 1; ++t) {
              e[t] = 0;
            }

            for (e[r - 1] |= 2147483648, t = 0; t < r; ++t) {
              n[t] ^= e[t];
            }

            v(n);
          }, m.prototype.toString = m.prototype.hex = function () {
            this.finalize();

            for (var e, t = this.blockCount, r = this.s, n = this.outputBlocks, i = this.extraBytes, o = 0, a = 0, s = ""; a < n;) {
              for (o = 0; o < t && a < n; ++o, ++a) {
                e = r[o], s += u[e >> 4 & 15] + u[15 & e] + u[e >> 12 & 15] + u[e >> 8 & 15] + u[e >> 20 & 15] + u[e >> 16 & 15] + u[e >> 28 & 15] + u[e >> 24 & 15];
              }

              a % t == 0 && (v(r), o = 0);
            }

            return i && (e = r[o], 0 < i && (s += u[e >> 4 & 15] + u[15 & e]), 1 < i && (s += u[e >> 12 & 15] + u[e >> 8 & 15]), 2 < i && (s += u[e >> 20 & 15] + u[e >> 16 & 15])), s;
          }, m.prototype.buffer = m.prototype.arrayBuffer = function () {
            this.finalize();
            var e,
                t = this.blockCount,
                r = this.s,
                n = this.outputBlocks,
                i = this.extraBytes,
                o = 0,
                a = 0,
                s = this.outputBits >> 3;
            e = i ? new ArrayBuffer(n + 1 << 2) : new ArrayBuffer(s);

            for (var u = new Uint32Array(e); a < n;) {
              for (o = 0; o < t && a < n; ++o, ++a) {
                u[a] = r[o];
              }

              a % t == 0 && v(r);
            }

            return i && (u[o] = r[o], e = e.slice(0, s)), e;
          }, m.prototype.digest = m.prototype.array = function () {
            this.finalize();

            for (var e, t, r = this.blockCount, n = this.s, i = this.outputBlocks, o = this.extraBytes, a = 0, s = 0, u = []; s < i;) {
              for (a = 0; a < r && s < i; ++a, ++s) {
                e = s << 2, t = n[a], u[e] = 255 & t, u[e + 1] = t >> 8 & 255, u[e + 2] = t >> 16 & 255, u[e + 3] = t >> 24 & 255;
              }

              s % r == 0 && v(n);
            }

            return o && (e = s << 2, t = n[a], 0 < o && (u[e] = 255 & t), 1 < o && (u[e + 1] = t >> 8 & 255), 2 < o && (u[e + 2] = t >> 16 & 255)), u;
          };

          var v = function v(e) {
            var t, r, n, i, o, a, s, u, c, f, h, d, l, p, b, y, m, v, g, w, _, A, x, M, k, E, S, U, j, I, T, C, B, N, P, R, O, L, q, D, F, H, z, K, V, G, W, X, J, Z, $, Y, Q, ee, te, re, ne, ie, oe, ae, se, ue, ce;

            for (n = 0; n < 48; n += 2) {
              i = e[0] ^ e[10] ^ e[20] ^ e[30] ^ e[40], o = e[1] ^ e[11] ^ e[21] ^ e[31] ^ e[41], a = e[2] ^ e[12] ^ e[22] ^ e[32] ^ e[42], s = e[3] ^ e[13] ^ e[23] ^ e[33] ^ e[43], u = e[4] ^ e[14] ^ e[24] ^ e[34] ^ e[44], c = e[5] ^ e[15] ^ e[25] ^ e[35] ^ e[45], f = e[6] ^ e[16] ^ e[26] ^ e[36] ^ e[46], h = e[7] ^ e[17] ^ e[27] ^ e[37] ^ e[47], t = (d = e[8] ^ e[18] ^ e[28] ^ e[38] ^ e[48]) ^ (a << 1 | s >>> 31), r = (l = e[9] ^ e[19] ^ e[29] ^ e[39] ^ e[49]) ^ (s << 1 | a >>> 31), e[0] ^= t, e[1] ^= r, e[10] ^= t, e[11] ^= r, e[20] ^= t, e[21] ^= r, e[30] ^= t, e[31] ^= r, e[40] ^= t, e[41] ^= r, t = i ^ (u << 1 | c >>> 31), r = o ^ (c << 1 | u >>> 31), e[2] ^= t, e[3] ^= r, e[12] ^= t, e[13] ^= r, e[22] ^= t, e[23] ^= r, e[32] ^= t, e[33] ^= r, e[42] ^= t, e[43] ^= r, t = a ^ (f << 1 | h >>> 31), r = s ^ (h << 1 | f >>> 31), e[4] ^= t, e[5] ^= r, e[14] ^= t, e[15] ^= r, e[24] ^= t, e[25] ^= r, e[34] ^= t, e[35] ^= r, e[44] ^= t, e[45] ^= r, t = u ^ (d << 1 | l >>> 31), r = c ^ (l << 1 | d >>> 31), e[6] ^= t, e[7] ^= r, e[16] ^= t, e[17] ^= r, e[26] ^= t, e[27] ^= r, e[36] ^= t, e[37] ^= r, e[46] ^= t, e[47] ^= r, t = f ^ (i << 1 | o >>> 31), r = h ^ (o << 1 | i >>> 31), e[8] ^= t, e[9] ^= r, e[18] ^= t, e[19] ^= r, e[28] ^= t, e[29] ^= r, e[38] ^= t, e[39] ^= r, e[48] ^= t, e[49] ^= r, p = e[0], b = e[1], G = e[11] << 4 | e[10] >>> 28, W = e[10] << 4 | e[11] >>> 28, U = e[20] << 3 | e[21] >>> 29, j = e[21] << 3 | e[20] >>> 29, ae = e[31] << 9 | e[30] >>> 23, se = e[30] << 9 | e[31] >>> 23, H = e[40] << 18 | e[41] >>> 14, z = e[41] << 18 | e[40] >>> 14, N = e[2] << 1 | e[3] >>> 31, P = e[3] << 1 | e[2] >>> 31, y = e[13] << 12 | e[12] >>> 20, m = e[12] << 12 | e[13] >>> 20, X = e[22] << 10 | e[23] >>> 22, J = e[23] << 10 | e[22] >>> 22, I = e[33] << 13 | e[32] >>> 19, T = e[32] << 13 | e[33] >>> 19, ue = e[42] << 2 | e[43] >>> 30, ce = e[43] << 2 | e[42] >>> 30, ee = e[5] << 30 | e[4] >>> 2, te = e[4] << 30 | e[5] >>> 2, R = e[14] << 6 | e[15] >>> 26, O = e[15] << 6 | e[14] >>> 26, v = e[25] << 11 | e[24] >>> 21, g = e[24] << 11 | e[25] >>> 21, Z = e[34] << 15 | e[35] >>> 17, $ = e[35] << 15 | e[34] >>> 17, C = e[45] << 29 | e[44] >>> 3, B = e[44] << 29 | e[45] >>> 3, M = e[6] << 28 | e[7] >>> 4, k = e[7] << 28 | e[6] >>> 4, re = e[17] << 23 | e[16] >>> 9, ne = e[16] << 23 | e[17] >>> 9, L = e[26] << 25 | e[27] >>> 7, q = e[27] << 25 | e[26] >>> 7, w = e[36] << 21 | e[37] >>> 11, _ = e[37] << 21 | e[36] >>> 11, Y = e[47] << 24 | e[46] >>> 8, Q = e[46] << 24 | e[47] >>> 8, K = e[8] << 27 | e[9] >>> 5, V = e[9] << 27 | e[8] >>> 5, E = e[18] << 20 | e[19] >>> 12, S = e[19] << 20 | e[18] >>> 12, ie = e[29] << 7 | e[28] >>> 25, oe = e[28] << 7 | e[29] >>> 25, D = e[38] << 8 | e[39] >>> 24, F = e[39] << 8 | e[38] >>> 24, A = e[48] << 14 | e[49] >>> 18, x = e[49] << 14 | e[48] >>> 18, e[0] = p ^ ~y & v, e[1] = b ^ ~m & g, e[10] = M ^ ~E & U, e[11] = k ^ ~S & j, e[20] = N ^ ~R & L, e[21] = P ^ ~O & q, e[30] = K ^ ~G & X, e[31] = V ^ ~W & J, e[40] = ee ^ ~re & ie, e[41] = te ^ ~ne & oe, e[2] = y ^ ~v & w, e[3] = m ^ ~g & _, e[12] = E ^ ~U & I, e[13] = S ^ ~j & T, e[22] = R ^ ~L & D, e[23] = O ^ ~q & F, e[32] = G ^ ~X & Z, e[33] = W ^ ~J & $, e[42] = re ^ ~ie & ae, e[43] = ne ^ ~oe & se, e[4] = v ^ ~w & A, e[5] = g ^ ~_ & x, e[14] = U ^ ~I & C, e[15] = j ^ ~T & B, e[24] = L ^ ~D & H, e[25] = q ^ ~F & z, e[34] = X ^ ~Z & Y, e[35] = J ^ ~$ & Q, e[44] = ie ^ ~ae & ue, e[45] = oe ^ ~se & ce, e[6] = w ^ ~A & p, e[7] = _ ^ ~x & b, e[16] = I ^ ~C & M, e[17] = T ^ ~B & k, e[26] = D ^ ~H & N, e[27] = F ^ ~z & P, e[36] = Z ^ ~Y & K, e[37] = $ ^ ~Q & V, e[46] = ae ^ ~ue & ee, e[47] = se ^ ~ce & te, e[8] = A ^ ~p & y, e[9] = x ^ ~b & m, e[18] = C ^ ~M & E, e[19] = B ^ ~k & S, e[28] = H ^ ~N & R, e[29] = z ^ ~P & O, e[38] = Y ^ ~K & G, e[39] = Q ^ ~V & W, e[48] = ue ^ ~ee & re, e[49] = ce ^ ~te & ne, e[0] ^= fe[n], e[1] ^= fe[n + 1];
            }
          };

          if (t) _.exports = c;else for (d = 0; d < h.length; ++d) {
            e[h[d]] = c[h[d]];
          }
        }();
      }).call(this, e("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, {
      _process: 121
    }],
    231: [function (e, t, r) {
      arguments[4][187][0].apply(r, arguments);
    }, {
      dup: 187
    }],
    232: [function (e, t, r) {
      var f = e("underscore"),
          n = e("web3-utils"),
          o = new (e("ethers/utils/abi-coder").AbiCoder)(function (e, t) {
        return !e.match(/^u?int/) || f.isArray(t) || f.isObject(t) && "BN" === t.constructor.name ? t : t.toString();
      });

      function h() {}

      var i = function i() {};

      i.prototype.encodeFunctionSignature = function (e) {
        return f.isObject(e) && (e = n._jsonInterfaceMethodToString(e)), n.sha3(e).slice(0, 10);
      }, i.prototype.encodeEventSignature = function (e) {
        return f.isObject(e) && (e = n._jsonInterfaceMethodToString(e)), n.sha3(e);
      }, i.prototype.encodeParameter = function (e, t) {
        return this.encodeParameters([e], [t]);
      }, i.prototype.encodeParameters = function (e, t) {
        return o.encode(this.mapTypes(e), t);
      }, i.prototype.mapTypes = function (e) {
        var r = this,
            n = [];
        return e.forEach(function (e) {
          if (r.isSimplifiedStructFormat(e)) {
            var t = Object.keys(e)[0];
            n.push(Object.assign(r.mapStructNameAndType(t), {
              components: r.mapStructToCoderFormat(e[t])
            }));
          } else n.push(e);
        }), n;
      }, i.prototype.isSimplifiedStructFormat = function (e) {
        return "object" === (void 0 === e ? "undefined" : _typeof(e)) && void 0 === e.components && void 0 === e.name;
      }, i.prototype.mapStructNameAndType = function (e) {
        var t = "tuple";
        return -1 < e.indexOf("[]") && (t = "tuple[]", e = e.slice(0, -2)), {
          type: t,
          name: e
        };
      }, i.prototype.mapStructToCoderFormat = function (t) {
        var r = this,
            n = [];
        return Object.keys(t).forEach(function (e) {
          "object" !== _typeof(t[e]) ? n.push({
            name: e,
            type: t[e]
          }) : n.push(Object.assign(r.mapStructNameAndType(e), {
            components: r.mapStructToCoderFormat(t[e])
          }));
        }), n;
      }, i.prototype.encodeFunctionCall = function (e, t) {
        return this.encodeFunctionSignature(e) + this.encodeParameters(e.inputs, t).replace("0x", "");
      }, i.prototype.decodeParameter = function (e, t) {
        return this.decodeParameters([e], t)[0];
      }, i.prototype.decodeParameters = function (e, t) {
        if (!t || "0x" === t || "0X" === t) throw new Error("Returned values aren't valid, did it run Out of Gas?");
        var n = o.decode(this.mapTypes(e), "0x" + t.replace(/0x/i, "")),
            i = new h();
        return i.__length__ = 0, e.forEach(function (e, t) {
          var r = n[i.__length__];
          r = "0x" === r ? null : r, i[t] = r, f.isObject(e) && e.name && (i[e.name] = r), i.__length__++;
        }), i;
      }, i.prototype.decodeLog = function (e, t, r) {
        var n = this;
        r = f.isArray(r) ? r : [r], t = t || "";
        var i = [],
            o = [],
            a = 0;
        e.forEach(function (t, e) {
          t.indexed ? (o[e] = ["bool", "int", "uint", "address", "fixed", "ufixed"].find(function (e) {
            return -1 !== t.type.indexOf(e);
          }) ? n.decodeParameter(t.type, r[a]) : r[a], a++) : i[e] = t;
        });
        var s = t,
            u = s ? this.decodeParameters(i, s) : [],
            c = new h();
        return c.__length__ = 0, e.forEach(function (e, t) {
          c[t] = "string" === e.type ? "" : null, void 0 !== u[t] && (c[t] = u[t]), void 0 !== o[t] && (c[t] = o[t]), e.name && (c[e.name] = c[t]), c.__length__++;
        }), c;
      };
      var a = new i();
      t.exports = a;
    }, {
      "ethers/utils/abi-coder": 220,
      underscore: 231,
      "web3-utils": 419
    }],
    233: [function (e, t, r) {
      arguments[4][203][0].apply(r, arguments);
    }, {
      "./register": 235,
      dup: 203
    }],
    234: [function (e, t, r) {
      arguments[4][204][0].apply(r, arguments);
    }, {
      dup: 204
    }],
    235: [function (e, t, r) {
      arguments[4][205][0].apply(r, arguments);
    }, {
      "./loader": 234,
      dup: 205
    }],
    236: [function (e, t, r) {
      arguments[4][1][0].apply(r, arguments);
    }, {
      "./asn1/api": 237,
      "./asn1/base": 239,
      "./asn1/constants": 243,
      "./asn1/decoders": 245,
      "./asn1/encoders": 248,
      "bn.js": 250,
      dup: 1
    }],
    237: [function (e, t, r) {
      arguments[4][2][0].apply(r, arguments);
    }, {
      "../asn1": 236,
      dup: 2,
      inherits: 334,
      vm: 169
    }],
    238: [function (e, t, r) {
      arguments[4][3][0].apply(r, arguments);
    }, {
      "../base": 239,
      buffer: 47,
      dup: 3,
      inherits: 334
    }],
    239: [function (e, t, r) {
      arguments[4][4][0].apply(r, arguments);
    }, {
      "./buffer": 238,
      "./node": 240,
      "./reporter": 241,
      dup: 4
    }],
    240: [function (e, t, r) {
      arguments[4][5][0].apply(r, arguments);
    }, {
      "../base": 239,
      dup: 5,
      "minimalistic-assert": 337
    }],
    241: [function (e, t, r) {
      arguments[4][6][0].apply(r, arguments);
    }, {
      dup: 6,
      inherits: 334
    }],
    242: [function (e, t, r) {
      arguments[4][7][0].apply(r, arguments);
    }, {
      "../constants": 243,
      dup: 7
    }],
    243: [function (e, t, r) {
      arguments[4][8][0].apply(r, arguments);
    }, {
      "./der": 242,
      dup: 8
    }],
    244: [function (e, t, r) {
      arguments[4][9][0].apply(r, arguments);
    }, {
      "../../asn1": 236,
      dup: 9,
      inherits: 334
    }],
    245: [function (e, t, r) {
      arguments[4][10][0].apply(r, arguments);
    }, {
      "./der": 244,
      "./pem": 246,
      dup: 10
    }],
    246: [function (e, t, r) {
      arguments[4][11][0].apply(r, arguments);
    }, {
      "./der": 244,
      buffer: 47,
      dup: 11,
      inherits: 334
    }],
    247: [function (e, t, r) {
      arguments[4][12][0].apply(r, arguments);
    }, {
      "../../asn1": 236,
      buffer: 47,
      dup: 12,
      inherits: 334
    }],
    248: [function (e, t, r) {
      arguments[4][13][0].apply(r, arguments);
    }, {
      "./der": 247,
      "./pem": 249,
      dup: 13
    }],
    249: [function (e, t, r) {
      arguments[4][14][0].apply(r, arguments);
    }, {
      "./der": 247,
      dup: 14,
      inherits: 334
    }],
    250: [function (e, t, r) {
      arguments[4][219][0].apply(r, arguments);
    }, {
      buffer: 17,
      dup: 219
    }],
    251: [function (e, t, r) {
      arguments[4][16][0].apply(r, arguments);
    }, {
      crypto: 17,
      dup: 16
    }],
    252: [function (e, t, r) {
      arguments[4][18][0].apply(r, arguments);
    }, {
      dup: 18,
      "safe-buffer": 358
    }],
    253: [function (e, t, r) {
      arguments[4][19][0].apply(r, arguments);
    }, {
      "./aes": 252,
      "./ghash": 257,
      "./incr32": 258,
      "buffer-xor": 279,
      "cipher-base": 280,
      dup: 19,
      inherits: 334,
      "safe-buffer": 358
    }],
    254: [function (e, t, r) {
      arguments[4][20][0].apply(r, arguments);
    }, {
      "./decrypter": 255,
      "./encrypter": 256,
      "./modes/list.json": 266,
      dup: 20
    }],
    255: [function (e, t, r) {
      arguments[4][21][0].apply(r, arguments);
    }, {
      "./aes": 252,
      "./authCipher": 253,
      "./modes": 265,
      "./streamCipher": 268,
      "cipher-base": 280,
      dup: 21,
      evp_bytestokey: 319,
      inherits: 334,
      "safe-buffer": 358
    }],
    256: [function (e, t, r) {
      arguments[4][22][0].apply(r, arguments);
    }, {
      "./aes": 252,
      "./authCipher": 253,
      "./modes": 265,
      "./streamCipher": 268,
      "cipher-base": 280,
      dup: 22,
      evp_bytestokey: 319,
      inherits: 334,
      "safe-buffer": 358
    }],
    257: [function (e, t, r) {
      arguments[4][23][0].apply(r, arguments);
    }, {
      dup: 23,
      "safe-buffer": 358
    }],
    258: [function (e, t, r) {
      arguments[4][24][0].apply(r, arguments);
    }, {
      dup: 24
    }],
    259: [function (e, t, r) {
      arguments[4][25][0].apply(r, arguments);
    }, {
      "buffer-xor": 279,
      dup: 25
    }],
    260: [function (e, t, r) {
      arguments[4][26][0].apply(r, arguments);
    }, {
      "buffer-xor": 279,
      dup: 26,
      "safe-buffer": 358
    }],
    261: [function (e, t, r) {
      arguments[4][27][0].apply(r, arguments);
    }, {
      dup: 27,
      "safe-buffer": 358
    }],
    262: [function (e, t, r) {
      arguments[4][28][0].apply(r, arguments);
    }, {
      dup: 28,
      "safe-buffer": 358
    }],
    263: [function (e, t, r) {
      arguments[4][29][0].apply(r, arguments);
    }, {
      "../incr32": 258,
      "buffer-xor": 279,
      dup: 29,
      "safe-buffer": 358
    }],
    264: [function (e, t, r) {
      arguments[4][30][0].apply(r, arguments);
    }, {
      dup: 30
    }],
    265: [function (e, t, r) {
      arguments[4][31][0].apply(r, arguments);
    }, {
      "./cbc": 259,
      "./cfb": 260,
      "./cfb1": 261,
      "./cfb8": 262,
      "./ctr": 263,
      "./ecb": 264,
      "./list.json": 266,
      "./ofb": 267,
      dup: 31
    }],
    266: [function (e, t, r) {
      arguments[4][32][0].apply(r, arguments);
    }, {
      dup: 32
    }],
    267: [function (e, t, r) {
      (function (i) {
        var o = e("buffer-xor");

        r.encrypt = function (e, t) {
          for (; e._cache.length < t.length;) {
            e._cache = i.concat([e._cache, (r = e, r._prev = r._cipher.encryptBlock(r._prev), r._prev)]);
          }

          var r,
              n = e._cache.slice(0, t.length);

          return e._cache = e._cache.slice(t.length), o(t, n);
        };
      }).call(this, e("buffer").Buffer);
    }, {
      buffer: 47,
      "buffer-xor": 279
    }],
    268: [function (e, t, r) {
      arguments[4][34][0].apply(r, arguments);
    }, {
      "./aes": 252,
      "cipher-base": 280,
      dup: 34,
      inherits: 334,
      "safe-buffer": 358
    }],
    269: [function (e, t, r) {
      arguments[4][35][0].apply(r, arguments);
    }, {
      "browserify-aes/browser": 254,
      "browserify-aes/modes": 265,
      "browserify-des": 270,
      "browserify-des/modes": 271,
      dup: 35,
      evp_bytestokey: 319
    }],
    270: [function (n, i, e) {
      (function (a) {
        var s = n("cipher-base"),
            e = n("des.js"),
            t = n("inherits"),
            u = {
          "des-ede3-cbc": e.CBC.instantiate(e.EDE),
          "des-ede3": e.EDE,
          "des-ede-cbc": e.CBC.instantiate(e.EDE),
          "des-ede": e.EDE,
          "des-cbc": e.CBC.instantiate(e.DES),
          "des-ecb": e.DES
        };

        function r(e) {
          s.call(this);
          var t,
              r = e.mode.toLowerCase(),
              n = u[r];
          t = e.decrypt ? "decrypt" : "encrypt";
          var i = e.key;
          "des-ede" !== r && "des-ede-cbc" !== r || (i = a.concat([i, i.slice(0, 8)]));
          var o = e.iv;
          this._des = n.create({
            key: i,
            iv: o,
            type: t
          });
        }

        u.des = u["des-cbc"], u.des3 = u["des-ede3-cbc"], t(i.exports = r, s), r.prototype._update = function (e) {
          return new a(this._des.update(e));
        }, r.prototype._final = function () {
          return new a(this._des["final"]());
        };
      }).call(this, n("buffer").Buffer);
    }, {
      buffer: 47,
      "cipher-base": 280,
      "des.js": 287,
      inherits: 334
    }],
    271: [function (e, t, r) {
      arguments[4][37][0].apply(r, arguments);
    }, {
      dup: 37
    }],
    272: [function (t, r, e) {
      (function (b) {
        var y = t("bn.js"),
            n = t("randombytes");

        function e(e, t) {
          var r,
              n,
              i = {
            blinder: (n = m(r = t)).toRed(y.mont(r.modulus)).redPow(new y(r.publicExponent)).fromRed(),
            unblinder: n.invm(r.modulus)
          },
              o = t.modulus.byteLength(),
              a = (y.mont(t.modulus), new y(e).mul(i.blinder).umod(t.modulus)),
              s = a.toRed(y.mont(t.prime1)),
              u = a.toRed(y.mont(t.prime2)),
              c = t.coefficient,
              f = t.prime1,
              h = t.prime2,
              d = s.redPow(t.exponent1),
              l = u.redPow(t.exponent2);
          d = d.fromRed(), l = l.fromRed();
          var p = d.isub(l).imul(c).umod(f);
          return p.imul(h), l.iadd(p), new b(l.imul(i.unblinder).umod(t.modulus).toArray(!1, o));
        }

        function m(e) {
          for (var t = e.modulus.byteLength(), r = new y(n(t)); 0 <= r.cmp(e.modulus) || !r.umod(e.prime1) || !r.umod(e.prime2);) {
            r = new y(n(t));
          }

          return r;
        }

        (r.exports = e).getr = m;
      }).call(this, t("buffer").Buffer);
    }, {
      "bn.js": 250,
      buffer: 47,
      randombytes: 355
    }],
    273: [function (e, t, r) {
      arguments[4][39][0].apply(r, arguments);
    }, {
      "./browser/algorithms.json": 274,
      dup: 39
    }],
    274: [function (e, t, r) {
      arguments[4][40][0].apply(r, arguments);
    }, {
      dup: 40
    }],
    275: [function (e, t, r) {
      arguments[4][41][0].apply(r, arguments);
    }, {
      dup: 41
    }],
    276: [function (h, d, e) {
      (function (i) {
        var r = h("create-hash"),
            n = h("stream"),
            e = h("inherits"),
            o = h("./sign"),
            a = h("./verify"),
            s = h("./algorithms.json");

        function t(e) {
          n.Writable.call(this);
          var t = s[e];
          if (!t) throw new Error("Unknown message digest");
          this._hashType = t.hash, this._hash = r(t.hash), this._tag = t.id, this._signType = t.sign;
        }

        function u(e) {
          n.Writable.call(this);
          var t = s[e];
          if (!t) throw new Error("Unknown message digest");
          this._hash = r(t.hash), this._tag = t.id, this._signType = t.sign;
        }

        function c(e) {
          return new t(e);
        }

        function f(e) {
          return new u(e);
        }

        Object.keys(s).forEach(function (e) {
          s[e].id = new i(s[e].id, "hex"), s[e.toLowerCase()] = s[e];
        }), e(t, n.Writable), t.prototype._write = function (e, t, r) {
          this._hash.update(e), r();
        }, t.prototype.update = function (e, t) {
          return "string" == typeof e && (e = new i(e, t)), this._hash.update(e), this;
        }, t.prototype.sign = function (e, t) {
          this.end();

          var r = this._hash.digest(),
              n = o(r, e, this._hashType, this._signType, this._tag);

          return t ? n.toString(t) : n;
        }, e(u, n.Writable), u.prototype._write = function (e, t, r) {
          this._hash.update(e), r();
        }, u.prototype.update = function (e, t) {
          return "string" == typeof e && (e = new i(e, t)), this._hash.update(e), this;
        }, u.prototype.verify = function (e, t, r) {
          "string" == typeof t && (t = new i(t, r)), this.end();

          var n = this._hash.digest();

          return a(t, n, e, this._signType, this._tag);
        }, d.exports = {
          Sign: c,
          Verify: f,
          createSign: c,
          createVerify: f
        };
      }).call(this, h("buffer").Buffer);
    }, {
      "./algorithms.json": 274,
      "./sign": 277,
      "./verify": 278,
      buffer: 47,
      "create-hash": 282,
      inherits: 334,
      stream: 158
    }],
    277: [function (e, t, r) {
      (function (b) {
        var c = e("create-hmac"),
            f = e("browserify-rsa"),
            h = e("elliptic").ec,
            y = e("bn.js"),
            d = e("parse-asn1"),
            l = e("./curves.json");

        function m(e, t, r, n) {
          if ((e = new b(e.toArray())).length < t.byteLength()) {
            var i = new b(t.byteLength() - e.length);
            i.fill(0), e = b.concat([i, e]);
          }

          var o = r.length,
              a = function (e, t) {
            e = (e = v(e, t)).mod(t);
            var r = new b(e.toArray());

            if (r.length < t.byteLength()) {
              var n = new b(t.byteLength() - r.length);
              n.fill(0), r = b.concat([n, r]);
            }

            return r;
          }(r, t),
              s = new b(o);

          s.fill(1);
          var u = new b(o);
          return u.fill(0), u = c(n, u).update(s).update(new b([0])).update(e).update(a).digest(), s = c(n, u).update(s).digest(), {
            k: u = c(n, u).update(s).update(new b([1])).update(e).update(a).digest(),
            v: s = c(n, u).update(s).digest()
          };
        }

        function v(e, t) {
          var r = new y(e),
              n = (e.length << 3) - t.bitLength();
          return 0 < n && r.ishrn(n), r;
        }

        function g(e, t, r) {
          var n, i;

          do {
            for (n = new b(0); 8 * n.length < e.bitLength();) {
              t.v = c(r, t.k).update(t.v).digest(), n = b.concat([n, t.v]);
            }

            i = v(n, e), t.k = c(r, t.k).update(t.v).update(new b([0])).digest(), t.v = c(r, t.k).update(t.v).digest();
          } while (-1 !== i.cmp(e));

          return i;
        }

        t.exports = function (e, t, r, n, i) {
          var o = d(t);

          if (o.curve) {
            if ("ecdsa" !== n && "ecdsa/rsa" !== n) throw new Error("wrong private key type");
            return function (e, t) {
              var r = l[t.curve.join(".")];
              if (!r) throw new Error("unknown curve " + t.curve.join("."));
              var n = new h(r).keyFromPrivate(t.privateKey).sign(e);
              return new b(n.toDER());
            }(e, o);
          }

          if ("dsa" === o.type) {
            if ("dsa" !== n) throw new Error("wrong private key type");
            return function (e, t, r) {
              for (var n, i, o, a, s = t.params.priv_key, u = t.params.p, c = t.params.q, f = t.params.g, h = new y(0), d = v(e, c).mod(c), l = !1, p = m(s, c, e, r); !1 === l;) {
                n = g(c, p, r), i = n, o = u, a = c, h = f.toRed(y.mont(o)).redPow(i).fromRed().mod(a), 0 === (l = n.invm(c).imul(d.add(s.mul(h))).mod(c)).cmpn(0) && (l = !1, h = new y(0));
              }

              return function (e, t) {
                e = e.toArray(), t = t.toArray(), 128 & e[0] && (e = [0].concat(e)), 128 & t[0] && (t = [0].concat(t));
                var r = [48, e.length + t.length + 4, 2, e.length];
                return r = r.concat(e, [2, t.length], t), new b(r);
              }(h, l);
            }(e, o, r);
          }

          if ("rsa" !== n && "ecdsa/rsa" !== n) throw new Error("wrong private key type");
          e = b.concat([i, e]);

          for (var a = o.modulus.byteLength(), s = [0, 1]; e.length + s.length + 1 < a;) {
            s.push(255);
          }

          s.push(0);

          for (var u = -1; ++u < e.length;) {
            s.push(e[u]);
          }

          return f(s, o);
        }, t.exports.getKey = m, t.exports.makeKey = g;
      }).call(this, e("buffer").Buffer);
    }, {
      "./curves.json": 275,
      "bn.js": 250,
      "browserify-rsa": 272,
      buffer: 47,
      "create-hmac": 284,
      elliptic: 297,
      "parse-asn1": 343
    }],
    278: [function (e, t, r) {
      (function (d) {
        var l = e("bn.js"),
            p = e("elliptic").ec,
            b = e("parse-asn1"),
            y = e("./curves.json");

        function m(e, t) {
          if (e.cmpn(0) <= 0) throw new Error("invalid sig");
          if (e.cmp(t) >= t) throw new Error("invalid sig");
        }

        t.exports = function (e, t, r, n, i) {
          var o = b(r);

          if ("ec" === o.type) {
            if ("ecdsa" !== n && "ecdsa/rsa" !== n) throw new Error("wrong public key type");
            return function (e, t, r) {
              var n = y[r.data.algorithm.curve.join(".")];
              if (!n) throw new Error("unknown curve " + r.data.algorithm.curve.join("."));
              var i = new p(n),
                  o = r.data.subjectPrivateKey.data;
              return i.verify(t, e, o);
            }(e, t, o);
          }

          if ("dsa" === o.type) {
            if ("dsa" !== n) throw new Error("wrong public key type");
            return function (e, t, r) {
              var n = r.data.p,
                  i = r.data.q,
                  o = r.data.g,
                  a = r.data.pub_key,
                  s = b.signature.decode(e, "der"),
                  u = s.s,
                  c = s.r;
              m(u, i), m(c, i);
              var f = l.mont(n),
                  h = u.invm(i);
              return 0 === o.toRed(f).redPow(new l(t).mul(h).mod(i)).fromRed().mul(a.toRed(f).redPow(c.mul(h).mod(i)).fromRed()).mod(n).mod(i).cmp(c);
            }(e, t, o);
          }

          if ("rsa" !== n && "ecdsa/rsa" !== n) throw new Error("wrong public key type");
          t = d.concat([i, t]);

          for (var a = o.modulus.byteLength(), s = [1], u = 0; t.length + s.length + 2 < a;) {
            s.push(255), u++;
          }

          s.push(0);

          for (var c = -1; ++c < t.length;) {
            s.push(t[c]);
          }

          s = new d(s);
          var f = l.mont(o.modulus);
          e = (e = new l(e).toRed(f)).redPow(new l(o.publicExponent)), e = new d(e.fromRed().toArray());
          var h = u < 8 ? 1 : 0;

          for (a = Math.min(e.length, s.length), e.length !== s.length && (h = 1), c = -1; ++c < a;) {
            h |= e[c] ^ s[c];
          }

          return 0 === h;
        };
      }).call(this, e("buffer").Buffer);
    }, {
      "./curves.json": 275,
      "bn.js": 250,
      buffer: 47,
      elliptic: 297,
      "parse-asn1": 343
    }],
    279: [function (e, t, r) {
      (function (o) {
        t.exports = function (e, t) {
          for (var r = Math.min(e.length, t.length), n = new o(r), i = 0; i < r; ++i) {
            n[i] = e[i] ^ t[i];
          }

          return n;
        };
      }).call(this, e("buffer").Buffer);
    }, {
      buffer: 47
    }],
    280: [function (e, t, r) {
      arguments[4][49][0].apply(r, arguments);
    }, {
      dup: 49,
      inherits: 334,
      "safe-buffer": 358,
      stream: 158,
      string_decoder: 163
    }],
    281: [function (e, s, t) {
      (function (o) {
        var t = e("elliptic"),
            n = e("bn.js");

        s.exports = function (e) {
          return new i(e);
        };

        var r = {
          secp256k1: {
            name: "secp256k1",
            byteLength: 32
          },
          secp224r1: {
            name: "p224",
            byteLength: 28
          },
          prime256v1: {
            name: "p256",
            byteLength: 32
          },
          prime192v1: {
            name: "p192",
            byteLength: 24
          },
          ed25519: {
            name: "ed25519",
            byteLength: 32
          },
          secp384r1: {
            name: "p384",
            byteLength: 48
          },
          secp521r1: {
            name: "p521",
            byteLength: 66
          }
        };

        function i(e) {
          this.curveType = r[e], this.curveType || (this.curveType = {
            name: e
          }), this.curve = new t.ec(this.curveType.name), this.keys = void 0;
        }

        function a(e, t, r) {
          Array.isArray(e) || (e = e.toArray());
          var n = new o(e);

          if (r && n.length < r) {
            var i = new o(r - n.length);
            i.fill(0), n = o.concat([i, n]);
          }

          return t ? n.toString(t) : n;
        }

        r.p224 = r.secp224r1, r.p256 = r.secp256r1 = r.prime256v1, r.p192 = r.secp192r1 = r.prime192v1, r.p384 = r.secp384r1, r.p521 = r.secp521r1, i.prototype.generateKeys = function (e, t) {
          return this.keys = this.curve.genKeyPair(), this.getPublicKey(e, t);
        }, i.prototype.computeSecret = function (e, t, r) {
          return t = t || "utf8", o.isBuffer(e) || (e = new o(e, t)), a(this.curve.keyFromPublic(e).getPublic().mul(this.keys.getPrivate()).getX(), r, this.curveType.byteLength);
        }, i.prototype.getPublicKey = function (e, t) {
          var r = this.keys.getPublic("compressed" === t, !0);
          return "hybrid" === t && (r[r.length - 1] % 2 ? r[0] = 7 : r[0] = 6), a(r, e);
        }, i.prototype.getPrivateKey = function (e) {
          return a(this.keys.getPrivate(), e);
        }, i.prototype.setPublicKey = function (e, t) {
          return t = t || "utf8", o.isBuffer(e) || (e = new o(e, t)), this.keys._importPublic(e), this;
        }, i.prototype.setPrivateKey = function (e, t) {
          t = t || "utf8", o.isBuffer(e) || (e = new o(e, t));
          var r = new n(e);
          return r = r.toString(16), this.keys = this.curve.genKeyPair(), this.keys._importPrivate(r), this;
        };
      }).call(this, e("buffer").Buffer);
    }, {
      "bn.js": 250,
      buffer: 47,
      elliptic: 297
    }],
    282: [function (e, t, r) {
      arguments[4][52][0].apply(r, arguments);
    }, {
      "cipher-base": 280,
      dup: 52,
      inherits: 334,
      "md5.js": 335,
      ripemd160: 357,
      "sha.js": 362
    }],
    283: [function (e, t, r) {
      arguments[4][53][0].apply(r, arguments);
    }, {
      dup: 53,
      "md5.js": 335
    }],
    284: [function (e, t, r) {
      arguments[4][54][0].apply(r, arguments);
    }, {
      "./legacy": 285,
      "cipher-base": 280,
      "create-hash/md5": 283,
      dup: 54,
      inherits: 334,
      ripemd160: 357,
      "safe-buffer": 358,
      "sha.js": 362
    }],
    285: [function (e, t, r) {
      arguments[4][55][0].apply(r, arguments);
    }, {
      "cipher-base": 280,
      dup: 55,
      inherits: 334,
      "safe-buffer": 358
    }],
    286: [function (e, t, r) {
      arguments[4][56][0].apply(r, arguments);
    }, {
      "browserify-cipher": 269,
      "browserify-sign": 276,
      "browserify-sign/algos": 273,
      "create-ecdh": 281,
      "create-hash": 282,
      "create-hmac": 284,
      "diffie-hellman": 293,
      dup: 56,
      pbkdf2: 344,
      "public-encrypt": 349,
      randombytes: 355,
      randomfill: 356
    }],
    287: [function (e, t, r) {
      arguments[4][57][0].apply(r, arguments);
    }, {
      "./des/cbc": 288,
      "./des/cipher": 289,
      "./des/des": 290,
      "./des/ede": 291,
      "./des/utils": 292,
      dup: 57
    }],
    288: [function (e, t, r) {
      arguments[4][58][0].apply(r, arguments);
    }, {
      dup: 58,
      inherits: 334,
      "minimalistic-assert": 337
    }],
    289: [function (e, t, r) {
      arguments[4][59][0].apply(r, arguments);
    }, {
      dup: 59,
      "minimalistic-assert": 337
    }],
    290: [function (e, t, r) {
      arguments[4][60][0].apply(r, arguments);
    }, {
      "../des": 287,
      dup: 60,
      inherits: 334,
      "minimalistic-assert": 337
    }],
    291: [function (e, t, r) {
      arguments[4][61][0].apply(r, arguments);
    }, {
      "../des": 287,
      dup: 61,
      inherits: 334,
      "minimalistic-assert": 337
    }],
    292: [function (e, t, r) {
      arguments[4][62][0].apply(r, arguments);
    }, {
      dup: 62
    }],
    293: [function (e, t, r) {
      (function (o) {
        var a = e("./lib/generatePrime"),
            n = e("./lib/primes.json"),
            s = e("./lib/dh");
        var u = {
          binary: !0,
          hex: !0,
          base64: !0
        };
        r.DiffieHellmanGroup = r.createDiffieHellmanGroup = r.getDiffieHellman = function (e) {
          var t = new o(n[e].prime, "hex"),
              r = new o(n[e].gen, "hex");
          return new s(t, r);
        }, r.createDiffieHellman = r.DiffieHellman = function e(t, r, n, i) {
          return o.isBuffer(r) || void 0 === u[r] ? e(t, "binary", r, n) : (r = r || "binary", i = i || "binary", n = n || new o([2]), o.isBuffer(n) || (n = new o(n, i)), "number" == typeof t ? new s(a(t, n), n, !0) : (o.isBuffer(t) || (t = new o(t, r)), new s(t, n, !0)));
        };
      }).call(this, e("buffer").Buffer);
    }, {
      "./lib/dh": 294,
      "./lib/generatePrime": 295,
      "./lib/primes.json": 296,
      buffer: 47
    }],
    294: [function (b, y, e) {
      (function (o) {
        var a = b("bn.js"),
            s = new (b("miller-rabin"))(),
            u = new a(24),
            c = new a(11),
            f = new a(10),
            h = new a(3),
            d = new a(7),
            l = b("./generatePrime"),
            e = b("randombytes");

        function n(e, t) {
          return t = t || "utf8", o.isBuffer(e) || (e = new o(e, t)), this._pub = new a(e), this;
        }

        function i(e, t) {
          return t = t || "utf8", o.isBuffer(e) || (e = new o(e, t)), this._priv = new a(e), this;
        }

        y.exports = t;
        var p = {};

        function t(e, t, r) {
          this.setGenerator(t), this.__prime = new a(e), this._prime = a.mont(this.__prime), this._primeLen = e.length, this._pub = void 0, this._priv = void 0, this._primeCode = void 0, r ? (this.setPublicKey = n, this.setPrivateKey = i) : this._primeCode = 8;
        }

        function r(e, t) {
          var r = new o(e.toArray());
          return t ? r.toString(t) : r;
        }

        Object.defineProperty(t.prototype, "verifyError", {
          enumerable: !0,
          get: function get() {
            return "number" != typeof this._primeCode && (this._primeCode = function (e, t) {
              var r = t.toString("hex"),
                  n = [r, e.toString(16)].join("_");
              if (n in p) return p[n];
              var i,
                  o = 0;
              if (e.isEven() || !l.simpleSieve || !l.fermatTest(e) || !s.test(e)) return o += 1, o += "02" === r || "05" === r ? 8 : 4, p[n] = o;

              switch (s.test(e.shrn(1)) || (o += 2), r) {
                case "02":
                  e.mod(u).cmp(c) && (o += 8);
                  break;

                case "05":
                  (i = e.mod(f)).cmp(h) && i.cmp(d) && (o += 8);
                  break;

                default:
                  o += 4;
              }

              return p[n] = o;
            }(this.__prime, this.__gen)), this._primeCode;
          }
        }), t.prototype.generateKeys = function () {
          return this._priv || (this._priv = new a(e(this._primeLen))), this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed(), this.getPublicKey();
        }, t.prototype.computeSecret = function (e) {
          var t = (e = (e = new a(e)).toRed(this._prime)).redPow(this._priv).fromRed(),
              r = new o(t.toArray()),
              n = this.getPrime();

          if (r.length < n.length) {
            var i = new o(n.length - r.length);
            i.fill(0), r = o.concat([i, r]);
          }

          return r;
        }, t.prototype.getPublicKey = function (e) {
          return r(this._pub, e);
        }, t.prototype.getPrivateKey = function (e) {
          return r(this._priv, e);
        }, t.prototype.getPrime = function (e) {
          return r(this.__prime, e);
        }, t.prototype.getGenerator = function (e) {
          return r(this._gen, e);
        }, t.prototype.setGenerator = function (e, t) {
          return t = t || "utf8", o.isBuffer(e) || (e = new o(e, t)), this.__gen = e, this._gen = new a(e), this;
        };
      }).call(this, b("buffer").Buffer);
    }, {
      "./generatePrime": 295,
      "bn.js": 250,
      buffer: 47,
      "miller-rabin": 336,
      randombytes: 355
    }],
    295: [function (e, t, r) {
      arguments[4][65][0].apply(r, arguments);
    }, {
      "bn.js": 250,
      dup: 65,
      "miller-rabin": 336,
      randombytes: 355
    }],
    296: [function (e, t, r) {
      arguments[4][66][0].apply(r, arguments);
    }, {
      dup: 66
    }],
    297: [function (e, t, r) {
      arguments[4][67][0].apply(r, arguments);
    }, {
      "../package.json": 312,
      "./elliptic/curve": 300,
      "./elliptic/curves": 303,
      "./elliptic/ec": 304,
      "./elliptic/eddsa": 307,
      "./elliptic/utils": 311,
      brorand: 251,
      dup: 67
    }],
    298: [function (e, t, r) {
      arguments[4][68][0].apply(r, arguments);
    }, {
      "../../elliptic": 297,
      "bn.js": 250,
      dup: 68
    }],
    299: [function (e, t, r) {
      arguments[4][69][0].apply(r, arguments);
    }, {
      "../../elliptic": 297,
      "../curve": 300,
      "bn.js": 250,
      dup: 69,
      inherits: 334
    }],
    300: [function (e, t, r) {
      arguments[4][70][0].apply(r, arguments);
    }, {
      "./base": 298,
      "./edwards": 299,
      "./mont": 301,
      "./short": 302,
      dup: 70
    }],
    301: [function (e, t, r) {
      arguments[4][71][0].apply(r, arguments);
    }, {
      "../../elliptic": 297,
      "../curve": 300,
      "bn.js": 250,
      dup: 71,
      inherits: 334
    }],
    302: [function (e, t, r) {
      arguments[4][72][0].apply(r, arguments);
    }, {
      "../../elliptic": 297,
      "../curve": 300,
      "bn.js": 250,
      dup: 72,
      inherits: 334
    }],
    303: [function (e, t, r) {
      arguments[4][73][0].apply(r, arguments);
    }, {
      "../elliptic": 297,
      "./precomputed/secp256k1": 310,
      dup: 73,
      "hash.js": 321
    }],
    304: [function (e, t, r) {
      arguments[4][74][0].apply(r, arguments);
    }, {
      "../../elliptic": 297,
      "./key": 305,
      "./signature": 306,
      "bn.js": 250,
      dup: 74,
      "hmac-drbg": 333
    }],
    305: [function (e, t, r) {
      arguments[4][75][0].apply(r, arguments);
    }, {
      "../../elliptic": 297,
      "bn.js": 250,
      dup: 75
    }],
    306: [function (e, t, r) {
      arguments[4][76][0].apply(r, arguments);
    }, {
      "../../elliptic": 297,
      "bn.js": 250,
      dup: 76
    }],
    307: [function (e, t, r) {
      arguments[4][77][0].apply(r, arguments);
    }, {
      "../../elliptic": 297,
      "./key": 308,
      "./signature": 309,
      dup: 77,
      "hash.js": 321
    }],
    308: [function (e, t, r) {
      arguments[4][78][0].apply(r, arguments);
    }, {
      "../../elliptic": 297,
      dup: 78
    }],
    309: [function (e, t, r) {
      arguments[4][79][0].apply(r, arguments);
    }, {
      "../../elliptic": 297,
      "bn.js": 250,
      dup: 79
    }],
    310: [function (e, t, r) {
      arguments[4][80][0].apply(r, arguments);
    }, {
      dup: 80
    }],
    311: [function (e, t, r) {
      arguments[4][81][0].apply(r, arguments);
    }, {
      "bn.js": 250,
      dup: 81,
      "minimalistic-assert": 337,
      "minimalistic-crypto-utils": 338
    }],
    312: [function (e, t, r) {
      t.exports = {
        _args: [["elliptic@6.4.0", "/Users/frozeman/Sites/_ethereum/web3/packages/web3-eth-accounts"]],
        _from: "elliptic@6.4.0",
        _id: "elliptic@6.4.0",
        _inBundle: !1,
        _integrity: "sha1-ysmvh2LIWDYYcAPI3+GT5eLq5d8=",
        _location: "/elliptic",
        _phantomChildren: {},
        _requested: {
          type: "version",
          registry: !0,
          raw: "elliptic@6.4.0",
          name: "elliptic",
          escapedName: "elliptic",
          rawSpec: "6.4.0",
          saveSpec: null,
          fetchSpec: "6.4.0"
        },
        _requiredBy: ["/browserify-sign", "/create-ecdh", "/eth-lib"],
        _resolved: "https://registry.npmjs.org/elliptic/-/elliptic-6.4.0.tgz",
        _spec: "6.4.0",
        _where: "/Users/frozeman/Sites/_ethereum/web3/packages/web3-eth-accounts",
        author: {
          name: "Fedor Indutny",
          email: "fedor@indutny.com"
        },
        bugs: {
          url: "https://github.com/indutny/elliptic/issues"
        },
        dependencies: {
          "bn.js": "^4.4.0",
          brorand: "^1.0.1",
          "hash.js": "^1.0.0",
          "hmac-drbg": "^1.0.0",
          inherits: "^2.0.1",
          "minimalistic-assert": "^1.0.0",
          "minimalistic-crypto-utils": "^1.0.0"
        },
        description: "EC cryptography",
        devDependencies: {
          brfs: "^1.4.3",
          coveralls: "^2.11.3",
          grunt: "^0.4.5",
          "grunt-browserify": "^5.0.0",
          "grunt-cli": "^1.2.0",
          "grunt-contrib-connect": "^1.0.0",
          "grunt-contrib-copy": "^1.0.0",
          "grunt-contrib-uglify": "^1.0.1",
          "grunt-mocha-istanbul": "^3.0.1",
          "grunt-saucelabs": "^8.6.2",
          istanbul: "^0.4.2",
          jscs: "^2.9.0",
          jshint: "^2.6.0",
          mocha: "^2.1.0"
        },
        files: ["lib"],
        homepage: "https://github.com/indutny/elliptic",
        keywords: ["EC", "Elliptic", "curve", "Cryptography"],
        license: "MIT",
        main: "lib/elliptic.js",
        name: "elliptic",
        repository: {
          type: "git",
          url: "git+ssh://git@github.com/indutny/elliptic.git"
        },
        scripts: {
          jscs: "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
          jshint: "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
          lint: "npm run jscs && npm run jshint",
          test: "npm run lint && npm run unit",
          unit: "istanbul test _mocha --reporter=spec test/index.js",
          version: "grunt dist && git add dist/"
        },
        version: "6.4.0"
      };
    }, {}],
    313: [function (b, y, e) {
      (function (a) {
        var o = function o(e, t) {
          if (Array.isArray(e)) return e;
          if (Symbol.iterator in Object(e)) return function (e, t) {
            var r = [],
                n = !0,
                i = !1,
                o = void 0;

            try {
              for (var a, s = e[Symbol.iterator](); !(n = (a = s.next()).done) && (r.push(a.value), !t || r.length !== t); n = !0) {
                ;
              }
            } catch (e) {
              i = !0, o = e;
            } finally {
              try {
                !n && s["return"] && s["return"]();
              } finally {
                if (i) throw o;
              }
            }

            return r;
          }(e, t);
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        },
            s = b("./bytes"),
            i = b("./nat"),
            e = b("elliptic"),
            u = (b("./rlp"), new e.ec("secp256k1")),
            t = b("./hash"),
            c = t.keccak256,
            f = t.keccak256s,
            h = function h(e) {
          for (var t = f(e.slice(2)), r = "0x", n = 0; n < 40; n++) {
            r += 7 < parseInt(t[n + 2], 16) ? e[n + 2].toUpperCase() : e[n + 2];
          }

          return r;
        },
            d = function d(e) {
          var t = new a(e.slice(2), "hex"),
              r = "0x" + u.keyFromPrivate(t).getPublic(!1, "hex").slice(2),
              n = c(r);
          return {
            address: h("0x" + n.slice(-40)),
            privateKey: e
          };
        },
            l = function l(e) {
          var t = o(e, 3),
              r = t[0],
              n = s.pad(32, t[1]),
              i = s.pad(32, t[2]);
          return s.flatten([n, i, r]);
        },
            p = function p(e) {
          return [s.slice(64, s.length(e), e), s.slice(0, 32, e), s.slice(32, 64, e)];
        },
            r = function r(n) {
          return function (e, t) {
            var r = u.keyFromPrivate(new a(t.slice(2), "hex")).sign(new a(e.slice(2), "hex"), {
              canonical: !0
            });
            return l([i.fromString(s.fromNumber(n + r.recoveryParam)), s.pad(32, s.fromNat("0x" + r.r.toString(16))), s.pad(32, s.fromNat("0x" + r.s.toString(16)))]);
          };
        },
            n = r(27);

        y.exports = {
          create: function create(e) {
            var t = c(s.concat(s.random(32), e || s.random(32))),
                r = s.concat(s.concat(s.random(32), t), s.random(32)),
                n = c(r);
            return d(n);
          },
          toChecksum: h,
          fromPrivate: d,
          sign: n,
          makeSigner: r,
          recover: function recover(e, t) {
            var r = p(t),
                n = {
              v: s.toNumber(r[0]),
              r: r[1].slice(2),
              s: r[2].slice(2)
            },
                i = "0x" + u.recoverPubKey(new a(e.slice(2), "hex"), n, n.v < 2 ? n.v : 1 - n.v % 2).encode("hex", !1).slice(2),
                o = c(i);
            return h("0x" + o.slice(-40));
          },
          encodeSignature: l,
          decodeSignature: p
        };
      }).call(this, b("buffer").Buffer);
    }, {
      "./bytes": 315,
      "./hash": 316,
      "./nat": 317,
      "./rlp": 318,
      buffer: 47,
      elliptic: 297
    }],
    314: [function (e, t, r) {
      arguments[4][172][0].apply(r, arguments);
    }, {
      dup: 172
    }],
    315: [function (e, t, r) {
      arguments[4][173][0].apply(r, arguments);
    }, {
      "./array.js": 314,
      dup: 173
    }],
    316: [function (e, t, r) {
      arguments[4][174][0].apply(r, arguments);
    }, {
      dup: 174
    }],
    317: [function (e, t, r) {
      var n = e("bn.js"),
          i = e("./bytes"),
          o = function o(e) {
        return new n(e.slice(2), 16);
      },
          a = function a(e) {
        var t = "0x" + ("0x" === e.slice(0, 2) ? new n(e.slice(2), 16) : new n(e, 10)).toString("hex");
        return "0x0" === t ? "0x" : t;
      },
          s = function s(e) {
        return "string" == typeof e ? /^0x/.test(e) ? e : "0x" + e : "0x" + new n(e).toString("hex");
      },
          u = function u(e) {
        return o(e).toNumber();
      },
          c = function c(r) {
        return function (e, t) {
          return "0x" + o(e)[r](o(t)).toString("hex");
        };
      },
          f = c("add"),
          h = c("mul"),
          d = c("div"),
          l = c("sub");

      t.exports = {
        toString: function toString(e) {
          return o(e).toString(10);
        },
        fromString: a,
        toNumber: u,
        fromNumber: s,
        toEther: function toEther(e) {
          return u(d(e, a("10000000000"))) / 1e8;
        },
        fromEther: function fromEther(e) {
          return h(s(Math.floor(1e8 * e)), a("10000000000"));
        },
        toUint256: function toUint256(e) {
          return i.pad(32, e);
        },
        add: f,
        mul: h,
        div: d,
        sub: l
      };
    }, {
      "./bytes": 315,
      "bn.js": 250
    }],
    318: [function (e, t, r) {
      t.exports = {
        encode: function encode(e) {
          var r = function r(e) {
            return (t = e.toString(16)).length % 2 == 0 ? t : "0" + t;
            var t;
          },
              i = function i(e, t) {
            return e < 56 ? r(t + e) : r(t + r(e).length / 2 + 55) + r(e);
          };

          return "0x" + function e(t) {
            if ("string" == typeof t) {
              var r = t.slice(2);
              return (2 != r.length || "80" <= r ? i(r.length / 2, 128) : "") + r;
            }

            var n = t.map(e).join("");
            return i(n.length / 2, 192) + n;
          }(e);
        },
        decode: function decode(t) {
          var r = 2,
              n = function n() {
            if (r >= t.length) throw "";
            var e = t.slice(r, r + 2);
            return e < "80" ? (r += 2, "0x" + e) : e < "c0" ? o() : a();
          },
              i = function i() {
            var e = parseInt(t.slice(r, r += 2), 16) % 64;
            return e < 56 ? e : parseInt(t.slice(r, r += 2 * (e - 55)), 16);
          },
              o = function o() {
            var e = i();
            return "0x" + t.slice(r, r += 2 * e);
          },
              a = function a() {
            for (var e = 2 * i() + r, t = []; r < e;) {
              t.push(n());
            }

            return t;
          };

          try {
            return n();
          } catch (e) {
            return [];
          }
        }
      };
    }, {}],
    319: [function (e, t, r) {
      arguments[4][84][0].apply(r, arguments);
    }, {
      dup: 84,
      "md5.js": 335,
      "safe-buffer": 358
    }],
    320: [function (e, t, r) {
      arguments[4][85][0].apply(r, arguments);
    }, {
      dup: 85,
      inherits: 334,
      "safe-buffer": 358,
      stream: 158
    }],
    321: [function (e, t, r) {
      arguments[4][86][0].apply(r, arguments);
    }, {
      "./hash/common": 322,
      "./hash/hmac": 323,
      "./hash/ripemd": 324,
      "./hash/sha": 325,
      "./hash/utils": 332,
      dup: 86
    }],
    322: [function (e, t, r) {
      arguments[4][87][0].apply(r, arguments);
    }, {
      "./utils": 332,
      dup: 87,
      "minimalistic-assert": 337
    }],
    323: [function (e, t, r) {
      arguments[4][88][0].apply(r, arguments);
    }, {
      "./utils": 332,
      dup: 88,
      "minimalistic-assert": 337
    }],
    324: [function (e, t, r) {
      arguments[4][89][0].apply(r, arguments);
    }, {
      "./common": 322,
      "./utils": 332,
      dup: 89
    }],
    325: [function (e, t, r) {
      arguments[4][90][0].apply(r, arguments);
    }, {
      "./sha/1": 326,
      "./sha/224": 327,
      "./sha/256": 328,
      "./sha/384": 329,
      "./sha/512": 330,
      dup: 90
    }],
    326: [function (e, t, r) {
      arguments[4][91][0].apply(r, arguments);
    }, {
      "../common": 322,
      "../utils": 332,
      "./common": 331,
      dup: 91
    }],
    327: [function (e, t, r) {
      arguments[4][92][0].apply(r, arguments);
    }, {
      "../utils": 332,
      "./256": 328,
      dup: 92
    }],
    328: [function (e, t, r) {
      arguments[4][93][0].apply(r, arguments);
    }, {
      "../common": 322,
      "../utils": 332,
      "./common": 331,
      dup: 93,
      "minimalistic-assert": 337
    }],
    329: [function (e, t, r) {
      arguments[4][94][0].apply(r, arguments);
    }, {
      "../utils": 332,
      "./512": 330,
      dup: 94
    }],
    330: [function (e, t, r) {
      arguments[4][95][0].apply(r, arguments);
    }, {
      "../common": 322,
      "../utils": 332,
      dup: 95,
      "minimalistic-assert": 337
    }],
    331: [function (e, t, r) {
      arguments[4][96][0].apply(r, arguments);
    }, {
      "../utils": 332,
      dup: 96
    }],
    332: [function (e, t, r) {
      arguments[4][97][0].apply(r, arguments);
    }, {
      dup: 97,
      inherits: 334,
      "minimalistic-assert": 337
    }],
    333: [function (e, t, r) {
      arguments[4][98][0].apply(r, arguments);
    }, {
      dup: 98,
      "hash.js": 321,
      "minimalistic-assert": 337,
      "minimalistic-crypto-utils": 338
    }],
    334: [function (e, t, r) {
      arguments[4][102][0].apply(r, arguments);
    }, {
      dup: 102
    }],
    335: [function (i, o, e) {
      (function (t) {
        var e = i("inherits"),
            r = i("hash-base"),
            a = new Array(16);

        function n() {
          r.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878;
        }

        function s(e, t) {
          return e << t | e >>> 32 - t;
        }

        function u(e, t, r, n, i, o, a) {
          return s(e + (t & r | ~t & n) + i + o | 0, a) + t | 0;
        }

        function c(e, t, r, n, i, o, a) {
          return s(e + (t & n | r & ~n) + i + o | 0, a) + t | 0;
        }

        function f(e, t, r, n, i, o, a) {
          return s(e + (t ^ r ^ n) + i + o | 0, a) + t | 0;
        }

        function h(e, t, r, n, i, o, a) {
          return s(e + (r ^ (t | ~n)) + i + o | 0, a) + t | 0;
        }

        e(n, r), n.prototype._update = function () {
          for (var e = a, t = 0; t < 16; ++t) {
            e[t] = this._block.readInt32LE(4 * t);
          }

          var r = this._a,
              n = this._b,
              i = this._c,
              o = this._d;
          n = h(n = h(n = h(n = h(n = f(n = f(n = f(n = f(n = c(n = c(n = c(n = c(n = u(n = u(n = u(n = u(n, i = u(i, o = u(o, r = u(r, n, i, o, e[0], 3614090360, 7), n, i, e[1], 3905402710, 12), r, n, e[2], 606105819, 17), o, r, e[3], 3250441966, 22), i = u(i, o = u(o, r = u(r, n, i, o, e[4], 4118548399, 7), n, i, e[5], 1200080426, 12), r, n, e[6], 2821735955, 17), o, r, e[7], 4249261313, 22), i = u(i, o = u(o, r = u(r, n, i, o, e[8], 1770035416, 7), n, i, e[9], 2336552879, 12), r, n, e[10], 4294925233, 17), o, r, e[11], 2304563134, 22), i = u(i, o = u(o, r = u(r, n, i, o, e[12], 1804603682, 7), n, i, e[13], 4254626195, 12), r, n, e[14], 2792965006, 17), o, r, e[15], 1236535329, 22), i = c(i, o = c(o, r = c(r, n, i, o, e[1], 4129170786, 5), n, i, e[6], 3225465664, 9), r, n, e[11], 643717713, 14), o, r, e[0], 3921069994, 20), i = c(i, o = c(o, r = c(r, n, i, o, e[5], 3593408605, 5), n, i, e[10], 38016083, 9), r, n, e[15], 3634488961, 14), o, r, e[4], 3889429448, 20), i = c(i, o = c(o, r = c(r, n, i, o, e[9], 568446438, 5), n, i, e[14], 3275163606, 9), r, n, e[3], 4107603335, 14), o, r, e[8], 1163531501, 20), i = c(i, o = c(o, r = c(r, n, i, o, e[13], 2850285829, 5), n, i, e[2], 4243563512, 9), r, n, e[7], 1735328473, 14), o, r, e[12], 2368359562, 20), i = f(i, o = f(o, r = f(r, n, i, o, e[5], 4294588738, 4), n, i, e[8], 2272392833, 11), r, n, e[11], 1839030562, 16), o, r, e[14], 4259657740, 23), i = f(i, o = f(o, r = f(r, n, i, o, e[1], 2763975236, 4), n, i, e[4], 1272893353, 11), r, n, e[7], 4139469664, 16), o, r, e[10], 3200236656, 23), i = f(i, o = f(o, r = f(r, n, i, o, e[13], 681279174, 4), n, i, e[0], 3936430074, 11), r, n, e[3], 3572445317, 16), o, r, e[6], 76029189, 23), i = f(i, o = f(o, r = f(r, n, i, o, e[9], 3654602809, 4), n, i, e[12], 3873151461, 11), r, n, e[15], 530742520, 16), o, r, e[2], 3299628645, 23), i = h(i, o = h(o, r = h(r, n, i, o, e[0], 4096336452, 6), n, i, e[7], 1126891415, 10), r, n, e[14], 2878612391, 15), o, r, e[5], 4237533241, 21), i = h(i, o = h(o, r = h(r, n, i, o, e[12], 1700485571, 6), n, i, e[3], 2399980690, 10), r, n, e[10], 4293915773, 15), o, r, e[1], 2240044497, 21), i = h(i, o = h(o, r = h(r, n, i, o, e[8], 1873313359, 6), n, i, e[15], 4264355552, 10), r, n, e[6], 2734768916, 15), o, r, e[13], 1309151649, 21), i = h(i, o = h(o, r = h(r, n, i, o, e[4], 4149444226, 6), n, i, e[11], 3174756917, 10), r, n, e[2], 718787259, 15), o, r, e[9], 3951481745, 21), this._a = this._a + r | 0, this._b = this._b + n | 0, this._c = this._c + i | 0, this._d = this._d + o | 0;
        }, n.prototype._digest = function () {
          this._block[this._blockOffset++] = 128, 56 < this._blockOffset && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
          var e = new t(16);
          return e.writeInt32LE(this._a, 0), e.writeInt32LE(this._b, 4), e.writeInt32LE(this._c, 8), e.writeInt32LE(this._d, 12), e;
        }, o.exports = n;
      }).call(this, i("buffer").Buffer);
    }, {
      buffer: 47,
      "hash-base": 320,
      inherits: 334
    }],
    336: [function (e, t, r) {
      arguments[4][106][0].apply(r, arguments);
    }, {
      "bn.js": 250,
      brorand: 251,
      dup: 106
    }],
    337: [function (e, t, r) {
      arguments[4][107][0].apply(r, arguments);
    }, {
      dup: 107
    }],
    338: [function (e, t, r) {
      arguments[4][108][0].apply(r, arguments);
    }, {
      dup: 108
    }],
    339: [function (e, t, r) {
      arguments[4][110][0].apply(r, arguments);
    }, {
      dup: 110
    }],
    340: [function (e, t, r) {
      arguments[4][111][0].apply(r, arguments);
    }, {
      "./certificate": 341,
      "asn1.js": 236,
      dup: 111
    }],
    341: [function (e, t, r) {
      arguments[4][112][0].apply(r, arguments);
    }, {
      "asn1.js": 236,
      dup: 112
    }],
    342: [function (e, t, r) {
      (function (d) {
        var l = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m,
            p = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----/m,
            b = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m,
            y = e("evp_bytestokey"),
            m = e("browserify-aes");

        t.exports = function (e, t) {
          var r,
              n = e.toString(),
              i = n.match(l);

          if (i) {
            var o = "aes" + i[1],
                a = new d(i[2], "hex"),
                s = new d(i[3].replace(/[\r\n]/g, ""), "base64"),
                u = y(t, a.slice(0, 8), parseInt(i[1], 10)).key,
                c = [],
                f = m.createDecipheriv(o, u, a);
            c.push(f.update(s)), c.push(f["final"]()), r = d.concat(c);
          } else {
            var h = n.match(b);
            r = new d(h[2].replace(/[\r\n]/g, ""), "base64");
          }

          return {
            tag: n.match(p)[1],
            data: r
          };
        };
      }).call(this, e("buffer").Buffer);
    }, {
      "browserify-aes": 254,
      buffer: 47,
      evp_bytestokey: 319
    }],
    343: [function (t, r, e) {
      (function (v) {
        var g = t("./asn1"),
            w = t("./aesid.json"),
            _ = t("./fixProc"),
            A = t("browserify-aes"),
            x = t("pbkdf2");

        function e(e) {
          var t;
          "object" !== (void 0 === e ? "undefined" : _typeof(e)) || v.isBuffer(e) || (t = e.passphrase, e = e.key), "string" == typeof e && (e = new v(e));

          var r,
              n,
              i,
              o,
              a,
              s,
              u,
              c,
              f,
              h,
              d,
              l,
              p,
              b = _(e, t),
              y = b.tag,
              m = b.data;

          switch (y) {
            case "CERTIFICATE":
              n = g.certificate.decode(m, "der").tbsCertificate.subjectPublicKeyInfo;

            case "PUBLIC KEY":
              switch (n || (n = g.PublicKey.decode(m, "der")), r = n.algorithm.algorithm.join(".")) {
                case "1.2.840.113549.1.1.1":
                  return g.RSAPublicKey.decode(n.subjectPublicKey.data, "der");

                case "1.2.840.10045.2.1":
                  return n.subjectPrivateKey = n.subjectPublicKey, {
                    type: "ec",
                    data: n
                  };

                case "1.2.840.10040.4.1":
                  return n.algorithm.params.pub_key = g.DSAparam.decode(n.subjectPublicKey.data, "der"), {
                    type: "dsa",
                    data: n.algorithm.params
                  };

                default:
                  throw new Error("unknown key id " + r);
              }

              throw new Error("unknown key type " + y);

            case "ENCRYPTED PRIVATE KEY":
              m = g.EncryptedPrivateKey.decode(m, "der"), o = t, a = (i = m).algorithm.decrypt.kde.kdeparams.salt, s = parseInt(i.algorithm.decrypt.kde.kdeparams.iters.toString(), 10), u = w[i.algorithm.decrypt.cipher.algo.join(".")], c = i.algorithm.decrypt.cipher.iv, f = i.subjectPrivateKey, h = parseInt(u.split("-")[1], 10) / 8, d = x.pbkdf2Sync(o, a, s, h), l = A.createDecipheriv(u, d, c), (p = []).push(l.update(f)), p.push(l["final"]()), m = v.concat(p);

            case "PRIVATE KEY":
              switch (r = (n = g.PrivateKey.decode(m, "der")).algorithm.algorithm.join(".")) {
                case "1.2.840.113549.1.1.1":
                  return g.RSAPrivateKey.decode(n.subjectPrivateKey, "der");

                case "1.2.840.10045.2.1":
                  return {
                    curve: n.algorithm.curve,
                    privateKey: g.ECPrivateKey.decode(n.subjectPrivateKey, "der").privateKey
                  };

                case "1.2.840.10040.4.1":
                  return n.algorithm.params.priv_key = g.DSAparam.decode(n.subjectPrivateKey, "der"), {
                    type: "dsa",
                    params: n.algorithm.params
                  };

                default:
                  throw new Error("unknown key id " + r);
              }

              throw new Error("unknown key type " + y);

            case "RSA PUBLIC KEY":
              return g.RSAPublicKey.decode(m, "der");

            case "RSA PRIVATE KEY":
              return g.RSAPrivateKey.decode(m, "der");

            case "DSA PRIVATE KEY":
              return {
                type: "dsa",
                params: g.DSAPrivateKey.decode(m, "der")
              };

            case "EC PRIVATE KEY":
              return {
                curve: (m = g.ECPrivateKey.decode(m, "der")).parameters.value,
                privateKey: m.privateKey
              };

            default:
              throw new Error("unknown key type " + y);
          }
        }

        (r.exports = e).signature = g.signature;
      }).call(this, t("buffer").Buffer);
    }, {
      "./aesid.json": 339,
      "./asn1": 340,
      "./fixProc": 342,
      "browserify-aes": 254,
      buffer: 47,
      pbkdf2: 344
    }],
    344: [function (e, t, r) {
      arguments[4][115][0].apply(r, arguments);
    }, {
      "./lib/async": 345,
      "./lib/sync": 348,
      dup: 115
    }],
    345: [function (e, t, r) {
      (function (c, f) {
        var h,
            d = e("./precondition"),
            l = e("./default-encoding"),
            p = e("./sync"),
            b = e("safe-buffer").Buffer,
            y = f.crypto && f.crypto.subtle,
            m = {
          sha: "SHA-1",
          "sha-1": "SHA-1",
          sha1: "SHA-1",
          sha256: "SHA-256",
          "sha-256": "SHA-256",
          sha384: "SHA-384",
          "sha-384": "SHA-384",
          "sha-512": "SHA-512",
          sha512: "SHA-512"
        },
            v = [];

        function g(e, t, r, n, i) {
          return y.importKey("raw", e, {
            name: "PBKDF2"
          }, !1, ["deriveBits"]).then(function (e) {
            return y.deriveBits({
              name: "PBKDF2",
              salt: t,
              iterations: r,
              hash: {
                name: i
              }
            }, e, n << 3);
          }).then(function (e) {
            return b.from(e);
          });
        }

        t.exports = function (t, r, n, i, o, a) {
          "function" == typeof o && (a = o, o = void 0);
          var e,
              s,
              u = m[(o = o || "sha1").toLowerCase()];
          if (!u || "function" != typeof f.Promise) return c.nextTick(function () {
            var e;

            try {
              e = p(t, r, n, i, o);
            } catch (e) {
              return a(e);
            }

            a(null, e);
          });
          if (d(t, r, n, i), "function" != typeof a) throw new Error("No callback provided to pbkdf2");
          b.isBuffer(t) || (t = b.from(t, l)), b.isBuffer(r) || (r = b.from(r, l)), e = function (e) {
            if (f.process && !f.process.browser) return Promise.resolve(!1);
            if (!y || !y.importKey || !y.deriveBits) return Promise.resolve(!1);
            if (void 0 !== v[e]) return v[e];
            var t = g(h = h || b.alloc(8), h, 10, 128, e).then(function () {
              return !0;
            })["catch"](function () {
              return !1;
            });
            return v[e] = t;
          }(u).then(function (e) {
            return e ? g(t, r, n, i, u) : p(t, r, n, i, o);
          }), s = a, e.then(function (e) {
            c.nextTick(function () {
              s(null, e);
            });
          }, function (e) {
            c.nextTick(function () {
              s(e);
            });
          });
        };
      }).call(this, e("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, {
      "./default-encoding": 346,
      "./precondition": 347,
      "./sync": 348,
      _process: 121,
      "safe-buffer": 358
    }],
    346: [function (e, r, t) {
      (function (e) {
        var t;
        e.browser ? t = "utf-8" : t = 6 <= parseInt(e.version.split(".")[0].slice(1), 10) ? "utf-8" : "binary";
        r.exports = t;
      }).call(this, e("_process"));
    }, {
      _process: 121
    }],
    347: [function (e, t, r) {
      (function (r) {
        var i = Math.pow(2, 30) - 1;

        function o(e, t) {
          if ("string" != typeof e && !r.isBuffer(e)) throw new TypeError(t + " must be a buffer or string");
        }

        t.exports = function (e, t, r, n) {
          if (o(e, "Password"), o(t, "Salt"), "number" != typeof r) throw new TypeError("Iterations not a number");
          if (r < 0) throw new TypeError("Bad iterations");
          if ("number" != typeof n) throw new TypeError("Key length not a number");
          if (n < 0 || i < n || n != n) throw new TypeError("Bad key length");
        };
      }).call(this, {
        isBuffer: e("../../../../../node_modules/is-buffer/index.js")
      });
    }, {
      "../../../../../node_modules/is-buffer/index.js": 103
    }],
    348: [function (e, t, r) {
      arguments[4][119][0].apply(r, arguments);
    }, {
      "./default-encoding": 346,
      "./precondition": 347,
      "create-hash/md5": 283,
      dup: 119,
      ripemd160: 357,
      "safe-buffer": 358,
      "sha.js": 362
    }],
    349: [function (e, t, r) {
      arguments[4][122][0].apply(r, arguments);
    }, {
      "./privateDecrypt": 351,
      "./publicEncrypt": 352,
      dup: 122
    }],
    350: [function (e, t, r) {
      (function (o) {
        var a = e("create-hash");

        function s(e) {
          var t = new o(4);
          return t.writeUInt32BE(e, 0), t;
        }

        t.exports = function (e, t) {
          for (var r, n = new o(""), i = 0; n.length < t;) {
            r = s(i++), n = o.concat([n, a("sha1").update(e).update(r).digest()]);
          }

          return n.slice(0, t);
        };
      }).call(this, e("buffer").Buffer);
    }, {
      buffer: 47,
      "create-hash": 282
    }],
    351: [function (e, t, r) {
      (function (f) {
        var u = e("parse-asn1"),
            h = e("./mgf"),
            d = e("./xor"),
            c = e("bn.js"),
            l = e("browserify-rsa"),
            p = e("create-hash"),
            b = e("./withPublic");

        t.exports = function (e, t, r) {
          var n;
          n = e.padding ? e.padding : r ? 1 : 4;
          var i,
              o = u(e),
              a = o.modulus.byteLength();
          if (t.length > a || 0 <= new c(t).cmp(o.modulus)) throw new Error("decryption error");
          i = r ? b(new c(t), o) : l(t, o);
          var s = new f(a - i.length);
          if (s.fill(0), i = f.concat([s, i], a), 4 === n) return function (e, t) {
            e.modulus;
            var r = e.modulus.byteLength(),
                n = (t.length, p("sha1").update(new f("")).digest()),
                i = n.length;
            if (0 !== t[0]) throw new Error("decryption error");
            var o = t.slice(1, i + 1),
                a = t.slice(i + 1),
                s = d(o, h(a, i)),
                u = d(a, h(s, r - i - 1));
            if (function (e, t) {
              e = new f(e), t = new f(t);
              var r = 0,
                  n = e.length;
              e.length !== t.length && (r++, n = Math.min(e.length, t.length));
              var i = -1;

              for (; ++i < n;) {
                r += e[i] ^ t[i];
              }

              return r;
            }(n, u.slice(0, i))) throw new Error("decryption error");
            var c = i;

            for (; 0 === u[c];) {
              c++;
            }

            if (1 !== u[c++]) throw new Error("decryption error");
            return u.slice(c);
          }(o, i);
          if (1 === n) return function (e, t, r) {
            var n = t.slice(0, 2),
                i = 2,
                o = 0;

            for (; 0 !== t[i++];) {
              if (i >= t.length) {
                o++;
                break;
              }
            }

            var a = t.slice(2, i - 1);
            t.slice(i - 1, i);
            ("0002" !== n.toString("hex") && !r || "0001" !== n.toString("hex") && r) && o++;
            a.length < 8 && o++;
            if (o) throw new Error("decryption error");
            return t.slice(i);
          }(0, i, r);
          if (3 === n) return i;
          throw new Error("unknown padding");
        };
      }).call(this, e("buffer").Buffer);
    }, {
      "./mgf": 350,
      "./withPublic": 353,
      "./xor": 354,
      "bn.js": 250,
      "browserify-rsa": 272,
      buffer: 47,
      "create-hash": 282,
      "parse-asn1": 343
    }],
    352: [function (e, t, r) {
      (function (d) {
        var a = e("parse-asn1"),
            l = e("randombytes"),
            p = e("create-hash"),
            b = e("./mgf"),
            y = e("./xor"),
            m = e("bn.js"),
            s = e("./withPublic"),
            u = e("browserify-rsa");

        t.exports = function (e, t, r) {
          var n;
          n = e.padding ? e.padding : r ? 1 : 4;
          var i,
              o = a(e);
          if (4 === n) i = function (e, t) {
            var r = e.modulus.byteLength(),
                n = t.length,
                i = p("sha1").update(new d("")).digest(),
                o = i.length,
                a = 2 * o;
            if (r - a - 2 < n) throw new Error("message too long");
            var s = new d(r - n - a - 2);
            s.fill(0);
            var u = r - o - 1,
                c = l(o),
                f = y(d.concat([i, s, new d([1]), t], u), b(c, u)),
                h = y(c, b(f, o));
            return new m(d.concat([new d([0]), h, f], r));
          }(o, t);else if (1 === n) i = function (e, t, r) {
            var n,
                i = t.length,
                o = e.modulus.byteLength();
            if (o - 11 < i) throw new Error("message too long");
            r ? (n = new d(o - i - 3)).fill(255) : n = function (e, t) {
              var r,
                  n = new d(e),
                  i = 0,
                  o = l(2 * e),
                  a = 0;

              for (; i < e;) {
                a === o.length && (o = l(2 * e), a = 0), (r = o[a++]) && (n[i++] = r);
              }

              return n;
            }(o - i - 3);
            return new m(d.concat([new d([0, r ? 1 : 2]), n, new d([0]), t], o));
          }(o, t, r);else {
            if (3 !== n) throw new Error("unknown padding");
            if (0 <= (i = new m(t)).cmp(o.modulus)) throw new Error("data too long for modulus");
          }
          return r ? u(i, o) : s(i, o);
        };
      }).call(this, e("buffer").Buffer);
    }, {
      "./mgf": 350,
      "./withPublic": 353,
      "./xor": 354,
      "bn.js": 250,
      "browserify-rsa": 272,
      buffer: 47,
      "create-hash": 282,
      "parse-asn1": 343,
      randombytes: 355
    }],
    353: [function (e, t, r) {
      (function (r) {
        var n = e("bn.js");

        t.exports = function (e, t) {
          return new r(e.toRed(n.mont(t.modulus)).redPow(new n(t.publicExponent)).fromRed().toArray());
        };
      }).call(this, e("buffer").Buffer);
    }, {
      "bn.js": 250,
      buffer: 47
    }],
    354: [function (e, t, r) {
      arguments[4][127][0].apply(r, arguments);
    }, {
      dup: 127
    }],
    355: [function (e, t, r) {
      (function (i, o) {
        var a = e("safe-buffer").Buffer,
            s = o.crypto || o.msCrypto;
        s && s.getRandomValues ? t.exports = function (e, t) {
          if (65536 < e) throw new Error("requested too many random bytes");
          var r = new o.Uint8Array(e);
          0 < e && s.getRandomValues(r);
          var n = a.from(r.buffer);
          if ("function" == typeof t) return i.nextTick(function () {
            t(null, n);
          });
          return n;
        } : t.exports = function () {
          throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
        };
      }).call(this, e("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, {
      _process: 121,
      "safe-buffer": 358
    }],
    356: [function (r, e, l) {
      (function (a, i) {
        function e() {
          throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
        }

        var t = r("safe-buffer"),
            s = r("randombytes"),
            o = t.Buffer,
            n = t.kMaxLength,
            u = i.crypto || i.msCrypto,
            c = Math.pow(2, 32) - 1;

        function f(e, t) {
          if ("number" != typeof e || e != e) throw new TypeError("offset must be a number");
          if (c < e || e < 0) throw new TypeError("offset must be a uint32");
          if (n < e || t < e) throw new RangeError("offset out of range");
        }

        function h(e, t, r) {
          if ("number" != typeof e || e != e) throw new TypeError("size must be a number");
          if (c < e || e < 0) throw new TypeError("size must be a uint32");
          if (r < e + t || n < e) throw new RangeError("buffer too small");
        }

        function d(r, n, e, i) {
          if (a.browser) {
            var t = r.buffer,
                o = new Uint8Array(t, n, e);
            return u.getRandomValues(o), i ? void a.nextTick(function () {
              i(null, r);
            }) : r;
          }

          if (!i) return s(e).copy(r, n), r;
          s(e, function (e, t) {
            if (e) return i(e);
            t.copy(r, n), i(null, r);
          });
        }

        u && u.getRandomValues || !a.browser ? (l.randomFill = function (e, t, r, n) {
          if (!(o.isBuffer(e) || e instanceof i.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
          if ("function" == typeof t) n = t, t = 0, r = e.length;else if ("function" == typeof r) n = r, r = e.length - t;else if ("function" != typeof n) throw new TypeError('"cb" argument must be a function');
          return f(t, e.length), h(r, t, e.length), d(e, t, r, n);
        }, l.randomFillSync = function (e, t, r) {
          void 0 === t && (t = 0);
          if (!(o.isBuffer(e) || e instanceof i.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
          f(t, e.length), void 0 === r && (r = e.length - t);
          return h(r, t, e.length), d(e, t, r);
        }) : (l.randomFill = e, l.randomFillSync = e);
      }).call(this, r("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, {
      _process: 121,
      randombytes: 355,
      "safe-buffer": 358
    }],
    357: [function (e, t, r) {
      arguments[4][148][0].apply(r, arguments);
    }, {
      buffer: 47,
      dup: 148,
      "hash-base": 320,
      inherits: 334
    }],
    358: [function (e, t, r) {
      arguments[4][149][0].apply(r, arguments);
    }, {
      buffer: 47,
      dup: 149
    }],
    359: [function (e, t, r) {
      t.exports = e("scryptsy");
    }, {
      scryptsy: 360
    }],
    360: [function (e, t, r) {
      (function (A) {
        var x = e("pbkdf2").pbkdf2Sync;

        function M(e, t, r, n, i) {
          if (A.isBuffer(e) && A.isBuffer(r)) e.copy(r, n, t, t + i);else for (; i--;) {
            r[n++] = e[t++];
          }
        }

        t.exports = function (e, t, r, n, i, o, a) {
          if (0 === r || 0 != (r & r - 1)) throw Error("N must be > 0 and a power of 2");
          if (2147483647 / 128 / n < r) throw Error("Parameter N is too large");
          if (2147483647 / 128 / i < n) throw Error("Parameter r is too large");
          var c,
              s = new A(256 * n),
              u = new A(128 * n * r),
              f = new Int32Array(16),
              h = new Int32Array(16),
              d = new A(64),
              l = x(e, t, 1, 128 * i * n, "sha256");

          if (a) {
            var p = i * r * 2,
                b = 0;

            c = function c() {
              ++b % 1e3 == 0 && a({
                current: b,
                total: p,
                percent: b / p * 100
              });
            };
          }

          for (var y = 0; y < i; y++) {
            m(l, 128 * y * n, n, r, u, s);
          }

          return x(e, l, 1, o, "sha256");

          function m(e, t, r, n, i, o) {
            var a,
                s = 128 * r;

            for (e.copy(o, 0, t, t + s), a = 0; a < n; a++) {
              o.copy(i, a * s, 0, 0 + s), v(o, 0, s, r), c && c();
            }

            for (a = 0; a < n; a++) {
              var u = 0 + 64 * (2 * r - 1);
              _(i, (o.readUInt32LE(u) & n - 1) * s, o, 0, s), v(o, 0, s, r), c && c();
            }

            o.copy(e, t, 0, 0 + s);
          }

          function v(e, t, r, n) {
            var i;

            for (M(e, t + 64 * (2 * n - 1), d, 0, 64), i = 0; i < 2 * n; i++) {
              _(e, 64 * i, d, 0, 64), w(d), M(d, 0, e, r + 64 * i, 64);
            }

            for (i = 0; i < n; i++) {
              M(e, r + 2 * i * 64, e, t + 64 * i, 64);
            }

            for (i = 0; i < n; i++) {
              M(e, r + 64 * (2 * i + 1), e, t + 64 * (i + n), 64);
            }
          }

          function g(e, t) {
            return e << t | e >>> 32 - t;
          }

          function w(e) {
            var t;

            for (t = 0; t < 16; t++) {
              f[t] = (255 & e[4 * t + 0]) << 0, f[t] |= (255 & e[4 * t + 1]) << 8, f[t] |= (255 & e[4 * t + 2]) << 16, f[t] |= (255 & e[4 * t + 3]) << 24;
            }

            for (M(f, 0, h, 0, 16), t = 8; 0 < t; t -= 2) {
              h[4] ^= g(h[0] + h[12], 7), h[8] ^= g(h[4] + h[0], 9), h[12] ^= g(h[8] + h[4], 13), h[0] ^= g(h[12] + h[8], 18), h[9] ^= g(h[5] + h[1], 7), h[13] ^= g(h[9] + h[5], 9), h[1] ^= g(h[13] + h[9], 13), h[5] ^= g(h[1] + h[13], 18), h[14] ^= g(h[10] + h[6], 7), h[2] ^= g(h[14] + h[10], 9), h[6] ^= g(h[2] + h[14], 13), h[10] ^= g(h[6] + h[2], 18), h[3] ^= g(h[15] + h[11], 7), h[7] ^= g(h[3] + h[15], 9), h[11] ^= g(h[7] + h[3], 13), h[15] ^= g(h[11] + h[7], 18), h[1] ^= g(h[0] + h[3], 7), h[2] ^= g(h[1] + h[0], 9), h[3] ^= g(h[2] + h[1], 13), h[0] ^= g(h[3] + h[2], 18), h[6] ^= g(h[5] + h[4], 7), h[7] ^= g(h[6] + h[5], 9), h[4] ^= g(h[7] + h[6], 13), h[5] ^= g(h[4] + h[7], 18), h[11] ^= g(h[10] + h[9], 7), h[8] ^= g(h[11] + h[10], 9), h[9] ^= g(h[8] + h[11], 13), h[10] ^= g(h[9] + h[8], 18), h[12] ^= g(h[15] + h[14], 7), h[13] ^= g(h[12] + h[15], 9), h[14] ^= g(h[13] + h[12], 13), h[15] ^= g(h[14] + h[13], 18);
            }

            for (t = 0; t < 16; ++t) {
              f[t] = h[t] + f[t];
            }

            for (t = 0; t < 16; t++) {
              var r = 4 * t;
              e[r + 0] = f[t] >> 0 & 255, e[r + 1] = f[t] >> 8 & 255, e[r + 2] = f[t] >> 16 & 255, e[r + 3] = f[t] >> 24 & 255;
            }
          }

          function _(e, t, r, n, i) {
            for (var o = 0; o < i; o++) {
              r[n + o] ^= e[t + o];
            }
          }
        };
      }).call(this, e("buffer").Buffer);
    }, {
      buffer: 47,
      pbkdf2: 344
    }],
    361: [function (e, t, r) {
      arguments[4][150][0].apply(r, arguments);
    }, {
      dup: 150,
      "safe-buffer": 358
    }],
    362: [function (e, t, r) {
      arguments[4][151][0].apply(r, arguments);
    }, {
      "./sha": 363,
      "./sha1": 364,
      "./sha224": 365,
      "./sha256": 366,
      "./sha384": 367,
      "./sha512": 368,
      dup: 151
    }],
    363: [function (e, t, r) {
      arguments[4][152][0].apply(r, arguments);
    }, {
      "./hash": 361,
      dup: 152,
      inherits: 334,
      "safe-buffer": 358
    }],
    364: [function (e, t, r) {
      arguments[4][153][0].apply(r, arguments);
    }, {
      "./hash": 361,
      dup: 153,
      inherits: 334,
      "safe-buffer": 358
    }],
    365: [function (e, t, r) {
      arguments[4][154][0].apply(r, arguments);
    }, {
      "./hash": 361,
      "./sha256": 366,
      dup: 154,
      inherits: 334,
      "safe-buffer": 358
    }],
    366: [function (e, t, r) {
      arguments[4][155][0].apply(r, arguments);
    }, {
      "./hash": 361,
      dup: 155,
      inherits: 334,
      "safe-buffer": 358
    }],
    367: [function (e, t, r) {
      arguments[4][156][0].apply(r, arguments);
    }, {
      "./hash": 361,
      "./sha512": 368,
      dup: 156,
      inherits: 334,
      "safe-buffer": 358
    }],
    368: [function (e, t, r) {
      arguments[4][157][0].apply(r, arguments);
    }, {
      "./hash": 361,
      dup: 157,
      inherits: 334,
      "safe-buffer": 358
    }],
    369: [function (e, t, r) {
      arguments[4][187][0].apply(r, arguments);
    }, {
      dup: 187
    }],
    370: [function (e, i, t) {
      (function (e) {
        var t;

        if (e.crypto && crypto.getRandomValues) {
          var r = new Uint8Array(16);

          t = function t() {
            return crypto.getRandomValues(r), r;
          };
        }

        if (!t) {
          var n = new Array(16);

          t = function t() {
            for (var e, t = 0; t < 16; t++) {
              0 == (3 & t) && (e = 4294967296 * Math.random()), n[t] = e >>> ((3 & t) << 3) & 255;
            }

            return n;
          };
        }

        i.exports = t;
      }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, {}],
    371: [function (e, t, r) {
      for (var a = e("./rng"), i = [], o = {}, n = 0; n < 256; n++) {
        i[n] = (n + 256).toString(16).substr(1), o[i[n]] = n;
      }

      function l(e, t) {
        var r = t || 0,
            n = i;
        return n[e[r++]] + n[e[r++]] + n[e[r++]] + n[e[r++]] + "-" + n[e[r++]] + n[e[r++]] + "-" + n[e[r++]] + n[e[r++]] + "-" + n[e[r++]] + n[e[r++]] + "-" + n[e[r++]] + n[e[r++]] + n[e[r++]] + n[e[r++]] + n[e[r++]] + n[e[r++]];
      }

      var s = a(),
          p = [1 | s[0], s[1], s[2], s[3], s[4], s[5]],
          b = 16383 & (s[6] << 8 | s[7]),
          y = 0,
          m = 0;

      function u(e, t, r) {
        var n = t && r || 0;
        "string" == typeof e && (t = "binary" == e ? new Array(16) : null, e = null);
        var i = (e = e || {}).random || (e.rng || a)();
        if (i[6] = 15 & i[6] | 64, i[8] = 63 & i[8] | 128, t) for (var o = 0; o < 16; o++) {
          t[n + o] = i[o];
        }
        return t || l(i);
      }

      var c = u;
      c.v1 = function (e, t, r) {
        var n = t && r || 0,
            i = t || [],
            o = void 0 !== (e = e || {}).clockseq ? e.clockseq : b,
            a = void 0 !== e.msecs ? e.msecs : new Date().getTime(),
            s = void 0 !== e.nsecs ? e.nsecs : m + 1,
            u = a - y + (s - m) / 1e4;
        if (u < 0 && void 0 === e.clockseq && (o = o + 1 & 16383), (u < 0 || y < a) && void 0 === e.nsecs && (s = 0), 1e4 <= s) throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
        y = a, b = o;
        var c = (1e4 * (268435455 & (a += 122192928e5)) + (m = s)) % 4294967296;
        i[n++] = c >>> 24 & 255, i[n++] = c >>> 16 & 255, i[n++] = c >>> 8 & 255, i[n++] = 255 & c;
        var f = a / 4294967296 * 1e4 & 268435455;
        i[n++] = f >>> 8 & 255, i[n++] = 255 & f, i[n++] = f >>> 24 & 15 | 16, i[n++] = f >>> 16 & 255, i[n++] = o >>> 8 | 128, i[n++] = 255 & o;

        for (var h = e.node || p, d = 0; d < 6; d++) {
          i[n + d] = h[d];
        }

        return t || l(i);
      }, c.v4 = u, c.parse = function (e, t, r) {
        var n = t && r || 0,
            i = 0;

        for (t = t || [], e.toLowerCase().replace(/[0-9a-f]{2}/g, function (e) {
          i < 16 && (t[n + i++] = o[e]);
        }); i < 16;) {
          t[n + i++] = 0;
        }

        return t;
      }, c.unparse = l, t.exports = c;
    }, {
      "./rng": 370
    }],
    372: [function (a, s, e) {
      (function (e, d) {
        var l = a("underscore"),
            r = a("web3-core"),
            n = a("web3-core-method"),
            p = a("any-promise"),
            b = a("eth-lib/lib/account"),
            y = a("eth-lib/lib/hash"),
            m = a("eth-lib/lib/rlp"),
            v = a("eth-lib/lib/nat"),
            g = a("eth-lib/lib/bytes"),
            w = a(void 0 === e ? "crypto-browserify" : "crypto"),
            _ = a("scrypt.js"),
            A = a("uuid"),
            x = a("web3-utils"),
            M = a("web3-core-helpers"),
            i = function i(e) {
          return l.isUndefined(e) || l.isNull(e);
        },
            k = function k(e) {
          for (; e && e.startsWith("0x0");) {
            e = "0x" + e.slice(3);
          }

          return e;
        },
            E = function E(e) {
          return e.length % 2 == 1 && (e = e.replace("0x", "0x0")), e;
        },
            t = function t() {
          var t = this;
          r.packageInit(this, arguments), delete this.BatchRequest, delete this.extend;
          var e = [new n({
            name: "getId",
            call: "net_version",
            params: 0,
            outputFormatter: x.hexToNumber
          }), new n({
            name: "getGasPrice",
            call: "eth_gasPrice",
            params: 0
          }), new n({
            name: "getTransactionCount",
            call: "eth_getTransactionCount",
            params: 2,
            inputFormatter: [function (e) {
              if (x.isAddress(e)) return e;
              throw new Error("Address " + e + ' is not a valid address to get the "transactionCount".');
            }, function () {
              return "latest";
            }]
          })];
          this._ethereumCall = {}, l.each(e, function (e) {
            e.attachToObject(t._ethereumCall), e.setRequestManager(t._requestManager);
          }), this.wallet = new o(this);
        };

        function o(e) {
          this._accounts = e, this.length = 0, this.defaultKeyName = "web3js_wallet";
        }

        t.prototype._addAccountFunctions = function (r) {
          var n = this;
          return r.signTransaction = function (e, t) {
            return n.signTransaction(e, r.privateKey, t);
          }, r.sign = function (e) {
            return n.sign(e, r.privateKey);
          }, r.encrypt = function (e, t) {
            return n.encrypt(r.privateKey, e, t);
          }, r;
        }, t.prototype.create = function (e) {
          return this._addAccountFunctions(b.create(e || x.randomHex(32)));
        }, t.prototype.privateKeyToAccount = function (e) {
          return this._addAccountFunctions(b.fromPrivate(e));
        }, t.prototype.signTransaction = function (t, u, c) {
          var f,
              h = !1;
          if (c = c || function () {}, !t) return h = new Error("No transaction object given!"), c(h), p.reject(h);

          function r(e) {
            if (e.gas || e.gasLimit || (h = new Error('"gas" is missing')), (e.nonce < 0 || e.gas < 0 || e.gasPrice < 0 || e.chainId < 0) && (h = new Error("Gas, gasPrice, nonce or chainId is lower than 0")), h) return c(h), p.reject(h);

            try {
              var t = e = M.formatters.inputCallFormatter(e);
              t.to = e.to || "0x", t.data = e.data || "0x", t.value = e.value || "0x", t.chainId = x.numberToHex(e.chainId);
              var r = m.encode([g.fromNat(t.nonce), g.fromNat(t.gasPrice), g.fromNat(t.gas), t.to.toLowerCase(), g.fromNat(t.value), t.data, g.fromNat(t.chainId || "0x1"), "0x", "0x"]),
                  n = y.keccak256(r),
                  i = b.makeSigner(2 * v.toNumber(t.chainId || "0x1") + 35)(y.keccak256(r), u),
                  o = m.decode(r).slice(0, 6).concat(b.decodeSignature(i));
              o[6] = E(k(o[6])), o[7] = E(k(o[7])), o[8] = E(k(o[8]));
              var a = m.encode(o),
                  s = m.decode(a);
              f = {
                messageHash: n,
                v: k(s[6]),
                r: k(s[7]),
                s: k(s[8]),
                rawTransaction: a
              };
            } catch (e) {
              return c(e), p.reject(e);
            }

            return c(null, f), f;
          }

          return void 0 !== t.nonce && void 0 !== t.chainId && void 0 !== t.gasPrice ? p.resolve(r(t)) : p.all([i(t.chainId) ? this._ethereumCall.getId() : t.chainId, i(t.gasPrice) ? this._ethereumCall.getGasPrice() : t.gasPrice, i(t.nonce) ? this._ethereumCall.getTransactionCount(this.privateKeyToAccount(u).address) : t.nonce]).then(function (e) {
            if (i(e[0]) || i(e[1]) || i(e[2])) throw new Error('One of the values "chainId", "gasPrice", or "nonce" couldn\'t be fetched: ' + JSON.stringify(e));
            return r(l.extend(t, {
              chainId: e[0],
              gasPrice: e[1],
              nonce: e[2]
            }));
          });
        }, t.prototype.recoverTransaction = function (e) {
          var t = m.decode(e),
              r = b.encodeSignature(t.slice(6, 9)),
              n = g.toNumber(t[6]),
              i = n < 35 ? [] : [g.fromNumber(n - 35 >> 1), "0x", "0x"],
              o = t.slice(0, 6).concat(i),
              a = m.encode(o);
          return b.recover(y.keccak256(a), r);
        }, t.prototype.hashMessage = function (e) {
          var t = x.isHexStrict(e) ? x.hexToBytes(e) : e,
              r = d.from(t),
              n = "Ethereum Signed Message:\n" + t.length,
              i = d.from(n),
              o = d.concat([i, r]);
          return y.keccak256s(o);
        }, t.prototype.sign = function (e, t) {
          var r = this.hashMessage(e),
              n = b.sign(r, t),
              i = b.decodeSignature(n);
          return {
            message: e,
            messageHash: r,
            v: i[0],
            r: i[1],
            s: i[2],
            signature: n
          };
        }, t.prototype.recover = function (e, t, r) {
          var n = [].slice.apply(arguments);
          return l.isObject(e) ? this.recover(e.messageHash, b.encodeSignature([e.v, e.r, e.s]), !0) : (r || (e = this.hashMessage(e)), 4 <= n.length ? (r = n.slice(-1)[0], r = !!l.isBoolean(r) && !!r, this.recover(e, b.encodeSignature(n.slice(1, 4)), r)) : b.recover(e, t));
        }, t.prototype.decrypt = function (e, t, r) {
          if (!l.isString(t)) throw new Error("No password given.");
          var n,
              i,
              o = l.isObject(e) ? e : JSON.parse(r ? e.toLowerCase() : e);
          if (3 !== o.version) throw new Error("Not a valid V3 wallet");
          if ("scrypt" === o.crypto.kdf) i = o.crypto.kdfparams, n = _(new d(t), new d(i.salt, "hex"), i.n, i.r, i.p, i.dklen);else {
            if ("pbkdf2" !== o.crypto.kdf) throw new Error("Unsupported key derivation scheme");
            if ("hmac-sha256" !== (i = o.crypto.kdfparams).prf) throw new Error("Unsupported parameters to PBKDF2");
            n = w.pbkdf2Sync(new d(t), new d(i.salt, "hex"), i.c, i.dklen, "sha256");
          }
          var a = new d(o.crypto.ciphertext, "hex");
          if (x.sha3(d.concat([n.slice(16, 32), a])).replace("0x", "") !== o.crypto.mac) throw new Error("Key derivation failed - possibly wrong password");
          var s = w.createDecipheriv(o.crypto.cipher, n.slice(0, 16), new d(o.crypto.cipherparams.iv, "hex")),
              u = "0x" + d.concat([s.update(a), s["final"]()]).toString("hex");
          return this.privateKeyToAccount(u);
        }, t.prototype.encrypt = function (e, t, r) {
          var n,
              i = this.privateKeyToAccount(e),
              o = (r = r || {}).salt || w.randomBytes(32),
              a = r.iv || w.randomBytes(16),
              s = r.kdf || "scrypt",
              u = {
            dklen: r.dklen || 32,
            salt: o.toString("hex")
          };
          if ("pbkdf2" === s) u.c = r.c || 262144, u.prf = "hmac-sha256", n = w.pbkdf2Sync(new d(t), o, u.c, u.dklen, "sha256");else {
            if ("scrypt" !== s) throw new Error("Unsupported kdf");
            u.n = r.n || 8192, u.r = r.r || 8, u.p = r.p || 1, n = _(new d(t), o, u.n, u.r, u.p, u.dklen);
          }
          var c = w.createCipheriv(r.cipher || "aes-128-ctr", n.slice(0, 16), a);
          if (!c) throw new Error("Unsupported cipher");
          var f = d.concat([c.update(new d(i.privateKey.replace("0x", ""), "hex")), c["final"]()]),
              h = x.sha3(d.concat([n.slice(16, 32), new d(f, "hex")])).replace("0x", "");
          return {
            version: 3,
            id: A.v4({
              random: r.uuid || w.randomBytes(16)
            }),
            address: i.address.toLowerCase().replace("0x", ""),
            crypto: {
              ciphertext: f.toString("hex"),
              cipherparams: {
                iv: a.toString("hex")
              },
              cipher: r.cipher || "aes-128-ctr",
              kdf: s,
              kdfparams: u,
              mac: h.toString("hex")
            }
          };
        }, o.prototype._findSafeIndex = function (e) {
          return e = e || 0, l.has(this, e) ? this._findSafeIndex(e + 1) : e;
        }, o.prototype._currentIndexes = function () {
          return Object.keys(this).map(function (e) {
            return parseInt(e);
          }).filter(function (e) {
            return e < 9e20;
          });
        }, o.prototype.create = function (e, t) {
          for (var r = 0; r < e; ++r) {
            this.add(this._accounts.create(t).privateKey);
          }

          return this;
        }, o.prototype.add = function (e) {
          return l.isString(e) && (e = this._accounts.privateKeyToAccount(e)), this[e.address] ? this[e.address] : ((e = this._accounts.privateKeyToAccount(e.privateKey)).index = this._findSafeIndex(), this[e.index] = e, this[e.address] = e, this[e.address.toLowerCase()] = e, this.length++, e);
        }, o.prototype.remove = function (e) {
          var t = this[e];
          return !(!t || !t.address) && (this[t.address].privateKey = null, delete this[t.address], this[t.address.toLowerCase()].privateKey = null, delete this[t.address.toLowerCase()], this[t.index].privateKey = null, delete this[t.index], this.length--, !0);
        }, o.prototype.clear = function () {
          var t = this;
          return this._currentIndexes().forEach(function (e) {
            t.remove(e);
          }), this;
        }, o.prototype.encrypt = function (t, r) {
          var n = this;
          return this._currentIndexes().map(function (e) {
            return n[e].encrypt(t, r);
          });
        }, o.prototype.decrypt = function (e, r) {
          var n = this;
          return e.forEach(function (e) {
            var t = n._accounts.decrypt(e, r);

            if (!t) throw new Error("Couldn't decrypt accounts. Password wrong?");
            n.add(t);
          }), this;
        }, o.prototype.save = function (e, t) {
          return localStorage.setItem(t || this.defaultKeyName, JSON.stringify(this.encrypt(e))), !0;
        }, o.prototype.load = function (e, t) {
          var r = localStorage.getItem(t || this.defaultKeyName);
          if (r) try {
            r = JSON.parse(r);
          } catch (e) {}
          return this.decrypt(r || [], e);
        }, "undefined" == typeof localStorage && (delete o.prototype.save, delete o.prototype.load), s.exports = t;
      }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, a("buffer").Buffer);
    }, {
      "any-promise": 233,
      buffer: 47,
      crypto: 56,
      "crypto-browserify": 286,
      "eth-lib/lib/account": 313,
      "eth-lib/lib/bytes": 315,
      "eth-lib/lib/hash": 316,
      "eth-lib/lib/nat": 317,
      "eth-lib/lib/rlp": 318,
      "scrypt.js": 359,
      underscore: 369,
      uuid: 371,
      "web3-core": 218,
      "web3-core-helpers": 200,
      "web3-core-method": 202,
      "web3-utils": 419
    }],
    373: [function (e, t, r) {
      arguments[4][187][0].apply(r, arguments);
    }, {
      dup: 187
    }],
    374: [function (e, t, r) {
      var c = e("underscore"),
          f = e("web3-core"),
          a = e("web3-core-method"),
          h = e("web3-utils"),
          n = e("web3-core-subscriptions").subscription,
          d = e("web3-core-helpers").formatters,
          i = e("web3-core-helpers").errors,
          s = e("web3-core-promievent"),
          l = e("web3-eth-abi"),
          o = function e(t, r, n) {
        var o = this,
            i = Array.prototype.slice.call(arguments);
        if (!(this instanceof e)) throw new Error('Please use the "new" keyword to instantiate a web3.eth.contract() object!');
        if (f.packageInit(this, [this.constructor.currentProvider]), this.clearSubscriptions = this._requestManager.clearSubscriptions, !t || !Array.isArray(t)) throw new Error("You must provide the json interface of the contract when instantiating a contract object.");
        this.options = {};
        var a = i[i.length - 1];
        c.isObject(a) && !c.isArray(a) && (n = a, this.options = c.extend(this.options, this._getOrSetDefaultOptions(n)), c.isObject(r) && (r = null)), Object.defineProperty(this.options, "address", {
          set: function set(e) {
            e && (o._address = h.toChecksumAddress(d.inputAddressFormatter(e)));
          },
          get: function get() {
            return o._address;
          },
          enumerable: !0
        }), Object.defineProperty(this.options, "jsonInterface", {
          set: function set(e) {
            return o.methods = {}, o.events = {}, o._jsonInterface = e.map(function (e) {
              var t, r;

              if (e.constant = "view" === e.stateMutability || "pure" === e.stateMutability || e.constant, e.payable = "payable" === e.stateMutability || e.payable, e.name && (r = h._jsonInterfaceMethodToString(e)), "function" === e.type) {
                if (e.signature = l.encodeFunctionSignature(r), t = o._createTxObject.bind({
                  method: e,
                  parent: o
                }), o.methods[e.name]) {
                  var n = o._createTxObject.bind({
                    method: e,
                    parent: o,
                    nextMethod: o.methods[e.name]
                  });

                  o.methods[e.name] = n;
                } else o.methods[e.name] = t;

                o.methods[e.signature] = t, o.methods[r] = t;
              } else if ("event" === e.type) {
                e.signature = l.encodeEventSignature(r);

                var i = o._on.bind(o, e.signature);

                o.events[e.name] && "bound " !== o.events[e.name].name || (o.events[e.name] = i), o.events[e.signature] = i, o.events[r] = i;
              }

              return e;
            }), o.events.allEvents = o._on.bind(o, "allevents"), o._jsonInterface;
          },
          get: function get() {
            return o._jsonInterface;
          },
          enumerable: !0
        });
        var s = this.constructor.defaultAccount,
            u = this.constructor.defaultBlock || "latest";
        Object.defineProperty(this, "defaultAccount", {
          get: function get() {
            return s;
          },
          set: function set(e) {
            return e && (s = h.toChecksumAddress(d.inputAddressFormatter(e))), e;
          },
          enumerable: !0
        }), Object.defineProperty(this, "defaultBlock", {
          get: function get() {
            return u;
          },
          set: function set(e) {
            return u = e;
          },
          enumerable: !0
        }), this.methods = {}, this.events = {}, this._address = null, this._jsonInterface = [], this.options.address = r, this.options.jsonInterface = t;
      };

      o.setProvider = function (e, t) {
        f.packageInit(this, [e]), this._ethAccounts = t;
      }, o.prototype._getCallback = function (e) {
        if (e && c.isFunction(e[e.length - 1])) return e.pop();
      }, o.prototype._checkListener = function (e, t) {
        if (t === e) throw new Error('The event "' + e + "\" is a reserved event name, you can't use it.");
      }, o.prototype._getOrSetDefaultOptions = function (e) {
        var t = e.gasPrice ? String(e.gasPrice) : null,
            r = e.from ? h.toChecksumAddress(d.inputAddressFormatter(e.from)) : null;
        return e.data = e.data || this.options.data, e.from = r || this.options.from, e.gasPrice = t || this.options.gasPrice, e.gas = e.gas || e.gasLimit || this.options.gas, delete e.gasLimit, e;
      }, o.prototype._encodeEventABI = function (e, t) {
        var r = (t = t || {}).filter || {},
            n = {};
        if (["fromBlock", "toBlock"].filter(function (e) {
          return void 0 !== t[e];
        }).forEach(function (e) {
          n[e] = d.inputBlockNumberFormatter(t[e]);
        }), c.isArray(t.topics)) n.topics = t.topics;else {
          if (n.topics = [], e && !e.anonymous && "ALLEVENTS" !== e.name && n.topics.push(e.signature), "ALLEVENTS" !== e.name) {
            var i = e.inputs.filter(function (e) {
              return !0 === e.indexed;
            }).map(function (t) {
              var e = r[t.name];
              return e ? c.isArray(e) ? e.map(function (e) {
                return l.encodeParameter(t.type, e);
              }) : l.encodeParameter(t.type, e) : null;
            });
            n.topics = n.topics.concat(i);
          }

          n.topics.length || delete n.topics;
        }
        return this.options.address && (n.address = this.options.address.toLowerCase()), n;
      }, o.prototype._decodeEventABI = function (t) {
        var e = this;
        t.data = t.data || "", t.topics = t.topics || [];
        var r = d.outputLogFormatter(t);
        "ALLEVENTS" === e.name && (e = e.jsonInterface.find(function (e) {
          return e.signature === t.topics[0];
        }) || {
          anonymous: !0
        }), e.inputs = e.inputs || [];
        var n = e.anonymous ? t.topics : t.topics.slice(1);
        return r.returnValues = l.decodeLog(e.inputs, t.data, n), delete r.returnValues.__length__, r.event = e.name, r.signature = e.anonymous || !t.topics[0] ? null : t.topics[0], r.raw = {
          data: r.data,
          topics: r.topics
        }, delete r.data, delete r.topics, r;
      }, o.prototype._encodeMethodABI = function () {
        var t = this._method.signature,
            r = this.arguments || [],
            n = !1,
            e = this._parent.options.jsonInterface.filter(function (e) {
          return "constructor" === t && e.type === t || (e.signature === t || e.signature === t.replace("0x", "") || e.name === t) && "function" === e.type;
        }).map(function (e) {
          var t = c.isArray(e.inputs) ? e.inputs.length : 0;
          if (t !== r.length) throw new Error("The number of arguments is not matching the methods required number. You need to pass " + t + " arguments.");
          return "function" === e.type && (n = e.signature), c.isArray(e.inputs) ? e.inputs : [];
        }).map(function (e) {
          return l.encodeParameters(e, r).replace("0x", "");
        })[0] || "";

        if ("constructor" === t) {
          if (!this._deployData) throw new Error("The contract has no contract data option set. This is necessary to append the constructor parameters.");
          return this._deployData + e;
        }

        var i = n ? n + e : e;
        if (i) return i;
        throw new Error("Couldn't find a matching contract method named \"" + this._method.name + '".');
      }, o.prototype._decodeMethodReturn = function (e, t) {
        if (!t) return null;
        t = 2 <= t.length ? t.slice(2) : t;
        var r = l.decodeParameters(e, t);
        return 1 === r.__length__ ? r[0] : (delete r.__length__, r);
      }, o.prototype.deploy = function (e, t) {
        if ((e = e || {}).arguments = e.arguments || [], !(e = this._getOrSetDefaultOptions(e)).data) return h._fireError(new Error('No "data" specified in neither the given options, nor the default options.'), null, null, t);
        var r = c.find(this.options.jsonInterface, function (e) {
          return "constructor" === e.type;
        }) || {};
        return r.signature = "constructor", this._createTxObject.apply({
          method: r,
          parent: this,
          deployData: e.data,
          _ethAccounts: this.constructor._ethAccounts
        }, e.arguments);
      }, o.prototype._generateEventOptions = function () {
        var e = Array.prototype.slice.call(arguments),
            t = this._getCallback(e),
            r = c.isObject(e[e.length - 1]) ? e.pop() : {},
            n = c.isString(e[0]) ? e[0] : "allevents";

        if (!(n = "allevents" === n.toLowerCase() ? {
          name: "ALLEVENTS",
          jsonInterface: this.options.jsonInterface
        } : this.options.jsonInterface.find(function (e) {
          return "event" === e.type && (e.name === n || e.signature === "0x" + n.replace("0x", ""));
        }))) throw new Error('Event "' + n.name + "\" doesn't exist in this contract.");
        if (!h.isAddress(this.options.address)) throw new Error("This contract object doesn't have address set yet, please set an address first.");
        return {
          params: this._encodeEventABI(n, r),
          event: n,
          callback: t
        };
      }, o.prototype.clone = function () {
        return new this.constructor(this.options.jsonInterface, this.options.address, this.options);
      }, o.prototype.once = function (e, t, n) {
        var r = Array.prototype.slice.call(arguments);
        if (!(n = this._getCallback(r))) throw new Error("Once requires a callback as the second parameter.");
        t && delete t.fromBlock, this._on(e, t, function (e, t, r) {
          r.unsubscribe(), c.isFunction(n) && n(e, t, r);
        });
      }, o.prototype._on = function () {
        var e = this._generateEventOptions.apply(this, arguments);

        this._checkListener("newListener", e.event.name, e.callback), this._checkListener("removeListener", e.event.name, e.callback);
        var t = new n({
          subscription: {
            params: 1,
            inputFormatter: [d.inputLogFormatter],
            outputFormatter: this._decodeEventABI.bind(e.event),
            subscriptionHandler: function subscriptionHandler(e) {
              e.removed ? this.emit("changed", e) : this.emit("data", e), c.isFunction(this.callback) && this.callback(null, e, this);
            }
          },
          type: "eth",
          requestManager: this._requestManager
        });
        return t.subscribe("logs", e.params, e.callback || function () {}), t;
      }, o.prototype.getPastEvents = function () {
        var e = this._generateEventOptions.apply(this, arguments),
            t = new a({
          name: "getPastLogs",
          call: "eth_getLogs",
          params: 1,
          inputFormatter: [d.inputLogFormatter],
          outputFormatter: this._decodeEventABI.bind(e.event)
        });

        t.setRequestManager(this._requestManager);
        var r = t.buildCall();
        return t = null, r(e.params, e.callback);
      }, o.prototype._createTxObject = function () {
        var e = Array.prototype.slice.call(arguments),
            t = {};

        if ("function" === this.method.type && (t.call = this.parent._executeMethod.bind(t, "call"), t.call.request = this.parent._executeMethod.bind(t, "call", !0)), t.send = this.parent._executeMethod.bind(t, "send"), t.send.request = this.parent._executeMethod.bind(t, "send", !0), t.encodeABI = this.parent._encodeMethodABI.bind(t), t.estimateGas = this.parent._executeMethod.bind(t, "estimate"), e && this.method.inputs && e.length !== this.method.inputs.length) {
          if (this.nextMethod) return this.nextMethod.apply(null, e);
          throw i.InvalidNumberOfParams(e.length, this.method.inputs.length, this.method.name);
        }

        return t.arguments = e || [], t._method = this.method, t._parent = this.parent, t._ethAccounts = this.parent.constructor._ethAccounts || this._ethAccounts, this.deployData && (t._deployData = this.deployData), t;
      }, o.prototype._processExecuteArguments = function (e, t) {
        var r = {};
        if (r.type = e.shift(), r.callback = this._parent._getCallback(e), "call" === r.type && !0 !== e[e.length - 1] && (c.isString(e[e.length - 1]) || isFinite(e[e.length - 1])) && (r.defaultBlock = e.pop()), r.options = c.isObject(e[e.length - 1]) ? e.pop() : {}, r.generateRequest = !0 === e[e.length - 1] && e.pop(), r.options = this._parent._getOrSetDefaultOptions(r.options), r.options.data = this.encodeABI(), !this._deployData && !h.isAddress(this._parent.options.address)) throw new Error("This contract object doesn't have address set yet, please set an address first.");
        return this._deployData || (r.options.to = this._parent.options.address), r.options.data ? r : h._fireError(new Error("Couldn't find a matching contract method, or the number of parameters is wrong."), t.eventEmitter, t.reject, r.callback);
      }, o.prototype._executeMethod = function () {
        var n = this,
            e = this._parent._processExecuteArguments.call(this, Array.prototype.slice.call(arguments), t),
            t = s("send" !== e.type),
            r = n.constructor._ethAccounts || n._ethAccounts;

        if (e.generateRequest) {
          var i = {
            params: [d.inputCallFormatter.call(this._parent, e.options)],
            callback: e.callback
          };
          return "call" === e.type ? (i.params.push(d.inputDefaultBlockNumberFormatter.call(this._parent, e.defaultBlock)), i.method = "eth_call", i.format = this._parent._decodeMethodReturn.bind(null, this._method.outputs)) : i.method = "eth_sendTransaction", i;
        }

        switch (e.type) {
          case "estimate":
            return new a({
              name: "estimateGas",
              call: "eth_estimateGas",
              params: 1,
              inputFormatter: [d.inputCallFormatter],
              outputFormatter: h.hexToNumber,
              requestManager: n._parent._requestManager,
              accounts: r,
              defaultAccount: n._parent.defaultAccount,
              defaultBlock: n._parent.defaultBlock
            }).createFunction()(e.options, e.callback);

          case "call":
            return new a({
              name: "call",
              call: "eth_call",
              params: 2,
              inputFormatter: [d.inputCallFormatter, d.inputDefaultBlockNumberFormatter],
              outputFormatter: function outputFormatter(e) {
                return n._parent._decodeMethodReturn(n._method.outputs, e);
              },
              requestManager: n._parent._requestManager,
              accounts: r,
              defaultAccount: n._parent.defaultAccount,
              defaultBlock: n._parent.defaultBlock
            }).createFunction()(e.options, e.defaultBlock, e.callback);

          case "send":
            if (!h.isAddress(e.options.from)) return h._fireError(new Error('No "from" address specified in neither the given options, nor the default options.'), t.eventEmitter, t.reject, e.callback);
            if (c.isBoolean(this._method.payable) && !this._method.payable && e.options.value && 0 < e.options.value) return h._fireError(new Error("Can not send value to non-payable contract method or constructor"), t.eventEmitter, t.reject, e.callback);
            var o = {
              receiptFormatter: function receiptFormatter(t) {
                if (c.isArray(t.logs)) {
                  var e = c.map(t.logs, function (e) {
                    return n._parent._decodeEventABI.call({
                      name: "ALLEVENTS",
                      jsonInterface: n._parent.options.jsonInterface
                    }, e);
                  });
                  t.events = {};
                  var r = 0;
                  e.forEach(function (e) {
                    e.event ? t.events[e.event] ? Array.isArray(t.events[e.event]) ? t.events[e.event].push(e) : t.events[e.event] = [t.events[e.event], e] : t.events[e.event] = e : (t.events[r] = e, r++);
                  }), delete t.logs;
                }

                return t;
              },
              contractDeployFormatter: function contractDeployFormatter(e) {
                var t = n._parent.clone();

                return t.options.address = e.contractAddress, t;
              }
            };
            return new a({
              name: "sendTransaction",
              call: "eth_sendTransaction",
              params: 1,
              inputFormatter: [d.inputTransactionFormatter],
              requestManager: n._parent._requestManager,
              accounts: n.constructor._ethAccounts || n._ethAccounts,
              defaultAccount: n._parent.defaultAccount,
              defaultBlock: n._parent.defaultBlock,
              extraFormatters: o
            }).createFunction()(e.options, e.callback);
        }
      }, t.exports = o;
    }, {
      underscore: 373,
      "web3-core": 218,
      "web3-core-helpers": 200,
      "web3-core-method": 202,
      "web3-core-promievent": 207,
      "web3-core-subscriptions": 215,
      "web3-eth-abi": 232,
      "web3-utils": 419
    }],
    375: [function (e, t, r) {
      (function (o) {
        var a = e("js-sha3").keccak_256,
            t = e("idna-uts46-hx");

        function s(e) {
          return e ? t.toUnicode(e, {
            useStd3ASCII: !0,
            transitional: !1
          }) : e;
        }

        r.hash = function (e) {
          for (var t = "", r = 0; r < 32; r++) {
            t += "00";
          }

          if (name = s(e), name) {
            var n = name.split(".");

            for (r = n.length - 1; 0 <= r; r--) {
              var i = a(n[r]);
              t = a(new o(t + i, "hex"));
            }
          }

          return "0x" + t;
        }, r.normalize = s;
      }).call(this, e("buffer").Buffer);
    }, {
      buffer: 47,
      "idna-uts46-hx": 377,
      "js-sha3": 378
    }],
    376: [function (e, t, r) {
      var n, i;
      n = this, i = function i() {
        var t = [new Uint32Array([2157250, 2157314, 2157378, 2157442, 2157506, 2157570, 2157634, 0, 2157698, 2157762, 2157826, 2157890, 2157954, 0, 2158018, 0]), new Uint32Array([2179041, 6291456, 2179073, 6291456, 2179105, 6291456, 2179137, 6291456, 2179169, 6291456, 2179201, 6291456, 2179233, 6291456, 2179265, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 14680064, 14680064, 14680064, 14680064, 14680064]), new Uint32Array([0, 2113729, 2197345, 2197377, 2113825, 2197409, 2197441, 2113921, 2197473, 2114017, 2197505, 2197537, 2197569, 2197601, 2197633, 2197665]), new Uint32Array([6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 23068672, 23068672, 23068672, 0, 0, 0, 0, 23068672]), new Uint32Array([14680064, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 14680064, 14680064]), new Uint32Array([2196001, 2196033, 2196065, 2196097, 2196129, 2196161, 2196193, 2196225, 2196257, 2196289, 2196321, 2196353, 2196385, 2196417, 2196449, 2196481]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 0, 0, 0, 0, 0]), new Uint32Array([2097281, 2105921, 2097729, 2106081, 0, 2097601, 2162337, 2106017, 2133281, 2097505, 2105889, 2097185, 2097697, 2135777, 2097633, 2097441]), new Uint32Array([2177025, 6291456, 2177057, 6291456, 2177089, 6291456, 2177121, 6291456, 2177153, 6291456, 2177185, 6291456, 2177217, 6291456, 2177249, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 0, 6291456, 6291456, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456]), new Uint32Array([0, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456]), new Uint32Array([2134435, 2134531, 2134627, 2134723, 2134723, 2134819, 2134819, 2134915, 2134915, 2135011, 2105987, 2135107, 2135203, 2135299, 2131587, 2135395]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 6291456, 2168673, 2169249, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2147906, 2147970, 2148034, 2148098, 2148162, 2148226, 2148290, 2148354, 2147906, 2147970, 2148034, 2148098, 2148162, 2148226, 2148290, 2148354]), new Uint32Array([2125219, 2125315, 2152834, 2152898, 2125411, 2152962, 2153026, 2125506, 2125507, 2125603, 2153090, 2153154, 2153218, 2153282, 2153346, 2105348]), new Uint32Array([2203393, 6291456, 2203425, 6291456, 2203457, 6291456, 2203489, 6291456, 6291456, 6291456, 6291456, 2203521, 6291456, 2181281, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 23068672, 6291456, 2145538, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 6291456]), new Uint32Array([2139426, 2160834, 2160898, 2160962, 2134242, 2161026, 2161090, 2161154, 2161218, 2161282, 2161346, 2161410, 2138658, 2161474, 2161538, 2134722]), new Uint32Array([2119939, 2124930, 2125026, 2106658, 2125218, 2128962, 2129058, 2129154, 2129250, 2129346, 2129442, 2108866, 2108770, 2150466, 2150530, 2150594]), new Uint32Array([2201601, 6291456, 2201633, 6291456, 2201665, 6291456, 2201697, 6291456, 2201729, 6291456, 2201761, 6291456, 2201793, 6291456, 2201825, 6291456]), new Uint32Array([2193537, 2193569, 2193601, 2193633, 2193665, 2193697, 2193729, 2193761, 2193793, 2193825, 2193857, 2193889, 2193921, 2193953, 2193985, 2194017]), new Uint32Array([6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([0, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2190561, 6291456, 2190593, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2190625, 6291456, 2190657, 6291456, 23068672]), new Uint32Array([2215905, 2215937, 2215969, 2216001, 2216033, 2216065, 2216097, 2216129, 2216161, 2216193, 2216225, 2216257, 2105441, 2216289, 2216321, 2216353]), new Uint32Array([23068672, 18884130, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672]), new Uint32Array([23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2191233, 2191265, 2191297, 2191329, 2191361, 2191393, 2191425, 2117377, 2191457, 2191489, 2191521, 2191553, 2191585, 2191617, 2191649, 2117953]), new Uint32Array([2132227, 2132323, 2132419, 2132419, 2132515, 2132515, 2132611, 2132707, 2132707, 2132803, 2132899, 2132899, 2132995, 2132995, 2133091, 2133187]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 0, 0]), new Uint32Array([2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 10609889, 10610785, 10609921, 10610817, 2222241]), new Uint32Array([6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 0, 0]), new Uint32Array([2219969, 2157121, 2157441, 2157505, 2157889, 2157953, 2220001, 2158465, 2158529, 10575617, 2156994, 2157058, 2129923, 2130019, 2157122, 2157186]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0]), new Uint32Array([2185249, 6291456, 2185281, 6291456, 2185313, 6291456, 2185345, 6291456, 2185377, 6291456, 2185409, 6291456, 2185441, 6291456, 2185473, 6291456]), new Uint32Array([0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 6291456, 0]), new Uint32Array([2183361, 6291456, 2183393, 6291456, 2183425, 6291456, 2183457, 6291456, 2183489, 6291456, 2183521, 6291456, 2183553, 6291456, 2183585, 6291456]), new Uint32Array([2192161, 2192193, 2192225, 2192257, 2192289, 2192321, 2192353, 2192385, 2192417, 2192449, 2192481, 2192513, 2192545, 2192577, 2192609, 2192641]), new Uint32Array([2212001, 2212033, 2212065, 2212097, 2212129, 2212161, 2212193, 2212225, 2212257, 2212289, 2212321, 2212353, 2212385, 2212417, 2212449, 2207265]), new Uint32Array([2249825, 2249857, 2249889, 2249921, 2249954, 2250018, 2250082, 2250145, 2250177, 2250209, 2250241, 2250274, 2250337, 2250370, 2250433, 2250465]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2147905, 2147969, 2148033, 2148097, 2148161, 2148225, 2148289, 2148353]), new Uint32Array([10485857, 6291456, 2197217, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 23068672, 23068672]), new Uint32Array([0, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]), new Uint32Array([2180353, 2180385, 2144033, 2180417, 2180449, 2180481, 2180513, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 10610209, 10610465, 10610241, 10610753, 10609857]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 0, 0]), new Uint32Array([2223842, 2223906, 2223970, 2224034, 2224098, 2224162, 2224226, 2224290, 2224354, 2224418, 2224482, 2224546, 2224610, 2224674, 2224738, 2224802]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 18923650, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 18923714, 23068672, 23068672]), new Uint32Array([2126179, 2125538, 2126275, 2126371, 2126467, 2125634, 2126563, 2105603, 2105604, 2125346, 2126659, 2126755, 2126851, 2098179, 2098181, 2098182]), new Uint32Array([2227426, 2227490, 2227554, 2227618, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2192353, 2240642, 2240642, 2240705, 2240737, 2240737, 2240769, 2240802, 2240866, 2240929, 2240961, 2240993, 2241025, 2241057, 2241089, 2241121]), new Uint32Array([6291456, 2170881, 2170913, 2170945, 6291456, 2170977, 6291456, 2171009, 2171041, 6291456, 6291456, 6291456, 2171073, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2132226, 2132514, 2163586, 2132610, 2160386, 2133090, 2133186, 2160450, 2160514, 2160578, 2133570, 2106178, 2160642, 2133858, 2160706, 2160770]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 10532162, 10532226, 10532290, 10532354, 10532418, 10532482, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 23068672]), new Uint32Array([2098209, 2108353, 2108193, 2108481, 2170241, 2111713, 2105473, 2105569, 2105601, 2112289, 2112481, 2098305, 2108321, 0, 0, 0]), new Uint32Array([2209121, 2209153, 2209185, 2209217, 2209249, 2209281, 2209313, 2209345, 2209377, 2209409, 2209441, 2209473, 2207265, 2209505, 2209537, 2209569]), new Uint32Array([2189025, 6291456, 2189057, 6291456, 2189089, 6291456, 2189121, 6291456, 2189153, 6291456, 2189185, 6291456, 2189217, 6291456, 2189249, 6291456]), new Uint32Array([2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2173761, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2233057]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2165764, 2140004]), new Uint32Array([2215105, 6291456, 2215137, 6291456, 6291456, 2215169, 2215201, 6291456, 6291456, 6291456, 2215233, 2215265, 2215297, 2215329, 2215361, 2215393]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 6291456, 6291456, 6291456, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([10505091, 10505187, 10505283, 10505379, 10505475, 10505571, 10505667, 10505763, 10505859, 10505955, 10506051, 10506147, 10506243, 10506339, 10506435, 10506531]), new Uint32Array([2229730, 2229794, 2229858, 2229922, 2229986, 2230050, 2230114, 2230178, 2230242, 2230306, 2230370, 2230434, 2230498, 2230562, 2230626, 2230690]), new Uint32Array([2105505, 2098241, 2108353, 2108417, 2105825, 0, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 10502115, 10502178, 10502211, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([0, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456]), new Uint32Array([2190305, 6291456, 2190337, 6291456, 2190369, 6291456, 2190401, 6291456, 2190433, 6291456, 2190465, 6291456, 2190497, 6291456, 2190529, 6291456]), new Uint32Array([2173793, 2173985, 2174017, 6291456, 2173761, 2173697, 6291456, 2174689, 6291456, 2174017, 2174721, 6291456, 6291456, 2174753, 2174785, 2174817]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2099521, 2099105, 2120705, 2098369, 2120801, 2103361, 2097985, 2098433, 2121377, 2121473, 2099169, 2099873, 2098401, 2099393, 2152609, 2100033]), new Uint32Array([2132898, 2163842, 2163906, 2133282, 2132034, 2131938, 2137410, 2132802, 2132706, 2164866, 2133282, 2160578, 2165186, 2165186, 6291456, 6291456]), new Uint32Array([10500003, 10500099, 10500195, 10500291, 10500387, 10500483, 10500579, 10500675, 10500771, 10500867, 10500963, 10501059, 10501155, 10501251, 10501347, 10501443]), new Uint32Array([2163458, 2130978, 2131074, 2131266, 2131362, 2163522, 2160130, 2132066, 2131010, 2131106, 2106018, 2131618, 2131298, 2132034, 2131938, 2137410]), new Uint32Array([2212961, 2116993, 2212993, 2213025, 2213057, 2213089, 2213121, 2213153, 2213185, 2213217, 2213249, 2209633, 2213281, 2213313, 2213345, 2213377]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]), new Uint32Array([2113729, 2113825, 2113921, 2114017, 2114113, 2114209, 2114305, 2114401, 2114497, 2114593, 2114689, 2114785, 2114881, 2114977, 2115073, 2115169]), new Uint32Array([2238177, 2238209, 2238241, 2238273, 2238305, 2238337, 2238337, 2217537, 2238369, 2238401, 2238433, 2238465, 2215649, 2238497, 2238529, 2238561]), new Uint32Array([2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905]), new Uint32Array([6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 0]), new Uint32Array([6291456, 0, 6291456, 2145026, 0, 6291456, 2145090, 0, 6291456, 6291456, 0, 0, 23068672, 0, 23068672, 23068672]), new Uint32Array([2099233, 2122017, 2200673, 2098113, 2121537, 2103201, 2200705, 2104033, 2121857, 2121953, 2122401, 2099649, 2099969, 2123009, 2100129, 2100289]), new Uint32Array([6291456, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0]), new Uint32Array([2187681, 2187713, 2187745, 2187777, 2187809, 2187841, 2187873, 2187905, 2187937, 2187969, 2188001, 2188033, 2188065, 2188097, 2188129, 2188161]), new Uint32Array([0, 10554498, 10554562, 10554626, 10554690, 10554754, 10554818, 10554882, 10554946, 10555010, 10555074, 6291456, 6291456, 0, 0, 0]), new Uint32Array([2235170, 2235234, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2181153, 6291456, 2188897, 6291456, 6291456, 2188929, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2111905, 2100865, 2188961, 2188993]), new Uint32Array([2100833, 2100897, 0, 0, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 10575617, 2187041, 10502177, 10489601, 10489697, 2112289]), new Uint32Array([6291456, 2172833, 6291456, 2172865, 2172897, 2172929, 2172961, 6291456, 2172993, 6291456, 2173025, 6291456, 2173057, 6291456, 2173089, 6291456]), new Uint32Array([6291456, 0, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 6291456, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 2190721]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456]), new Uint32Array([2184993, 6291456, 2185025, 6291456, 2185057, 6291456, 2185089, 6291456, 2185121, 6291456, 2185153, 6291456, 2185185, 6291456, 2185217, 6291456]), new Uint32Array([2115265, 2115361, 2115457, 2115553, 2115649, 2115745, 2115841, 2115937, 2116033, 2116129, 2116225, 2116321, 2150658, 2150722, 2200225, 6291456]), new Uint32Array([2168321, 6291456, 2168353, 6291456, 2168385, 6291456, 2168417, 6291456, 2168449, 6291456, 2168481, 6291456, 2168513, 6291456, 2168545, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 0, 6291456, 0, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 2186625, 0, 0, 6291456, 6291456, 2186657, 2186689, 2186721, 2173505, 0, 10496067, 10496163, 10496259]), new Uint32Array([2178785, 6291456, 2178817, 6291456, 2178849, 6291456, 2178881, 6291456, 2178913, 6291456, 2178945, 6291456, 2178977, 6291456, 2179009, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0]), new Uint32Array([2097152, 0, 0, 0, 2097152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]), new Uint32Array([6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([0, 0, 2197857, 2197889, 2197921, 2197953, 2197985, 2198017, 0, 0, 2198049, 2198081, 2198113, 2198145, 2198177, 2198209]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2098209, 2167297, 2111137, 6291456]), new Uint32Array([2171393, 6291456, 2171425, 6291456, 2171457, 6291456, 2171489, 6291456, 2171521, 6291456, 2171553, 6291456, 2171585, 6291456, 2171617, 6291456]), new Uint32Array([2206753, 2206785, 2195457, 2206817, 2206849, 2206881, 2206913, 2197153, 2197153, 2206945, 2117857, 2206977, 2207009, 2207041, 2207073, 2207105]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 23068672, 0, 0, 0, 0, 2144834, 2144898, 0, 2144962]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672]), new Uint32Array([2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 0, 2105505, 2098241]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 2202049, 6291456, 2202081, 6291456, 2202113, 6291456, 2202145, 6291456, 2202177, 6291456, 2202209, 6291456, 2202241, 6291456]), new Uint32Array([10501155, 10501251, 10501347, 10501443, 10501539, 10501635, 10501731, 10501827, 10501923, 10502019, 2141731, 2105505, 2098177, 2155586, 2166530, 0]), new Uint32Array([2102081, 2102209, 2100833, 2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 2100833, 2100737, 2098337, 2101441]), new Uint32Array([2146882, 2146946, 2147010, 2147074, 2147138, 2147202, 2147266, 2147330, 2146882, 2146946, 2147010, 2147074, 2147138, 2147202, 2147266, 2147330]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0]), new Uint32Array([10502307, 10502403, 10502499, 10502595, 10502691, 10502787, 10502883, 10502979, 10503075, 10503171, 10503267, 10503363, 10503459, 10503555, 10503651, 10503747]), new Uint32Array([2179937, 2179969, 2180001, 2180033, 2156545, 2180065, 2156577, 2180097, 2180129, 2180161, 2180193, 2180225, 2180257, 2180289, 2156737, 2180321]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 0, 0, 0, 6291456, 0, 0, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0]), new Uint32Array([2227682, 2227746, 2227810, 2227874, 2227938, 2228002, 2228066, 2228130, 2228194, 2228258, 2228322, 2228386, 2228450, 2228514, 2228578, 2228642]), new Uint32Array([2105601, 2169121, 2108193, 2170049, 2181025, 2181057, 2112481, 2108321, 2108289, 2181089, 2170497, 2100865, 2181121, 2173601, 2173633, 2173665]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2180641, 6291456, 6291456, 6291456]), new Uint32Array([0, 6291456, 6291456, 6291456, 0, 6291456, 0, 6291456, 0, 0, 6291456, 6291456, 0, 6291456, 6291456, 6291456]), new Uint32Array([2178273, 6291456, 2178305, 6291456, 2178337, 6291456, 2178369, 6291456, 2178401, 6291456, 2178433, 6291456, 2178465, 6291456, 2178497, 6291456]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456]), new Uint32Array([2237377, 2237409, 2236225, 2237441, 2237473, 2217441, 2215521, 2215553, 2217473, 2237505, 2237537, 2209697, 2237569, 2215585, 2237601, 2237633]), new Uint32Array([2221985, 2165601, 2165601, 2165665, 2165665, 2222017, 2222017, 2165729, 2165729, 2158913, 2158913, 2158913, 2158913, 2097281, 2097281, 2105921]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2149634, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2176897, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 2176929, 6291456, 2176961, 6291456, 2176993, 6291456]), new Uint32Array([2172641, 6291456, 2172673, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2172705, 2172737, 6291456, 2172769, 2172801, 6291456]), new Uint32Array([2099173, 2104196, 2121667, 2099395, 2121763, 2152258, 2152322, 2098946, 2152386, 2121859, 2121955, 2099333, 2122051, 2104324, 2099493, 2122147]), new Uint32Array([6291456, 6291456, 6291456, 2145794, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 2145858, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 0, 0, 6291456, 0]), new Uint32Array([0, 2105921, 2097729, 0, 2097377, 0, 0, 2106017, 0, 2097505, 2105889, 2097185, 2097697, 2135777, 2097633, 2097441]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2239074, 2239138, 2239201, 2239233, 2239265, 2239297, 2239329, 2239361, 0, 2239393, 2239425, 2239425, 2239458, 2239521, 2239553, 2209569]), new Uint32Array([14680064, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 6291456, 23068672]), new Uint32Array([2108321, 2108289, 2113153, 2098209, 2180897, 2180929, 2180961, 2111137, 2098241, 2108353, 2170241, 2170273, 2180993, 2105825, 6291456, 2105473]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2146114, 6291456, 6291456, 6291456, 0, 0, 0]), new Uint32Array([2105921, 2105921, 2105921, 2222049, 2222049, 2130977, 2130977, 2130977, 2130977, 2160065, 2160065, 2160065, 2160065, 2097729, 2097729, 2097729]), new Uint32Array([2218145, 2214785, 2207937, 2218177, 2218209, 2192993, 2210113, 2212769, 2218241, 2218273, 2216129, 2218305, 2216161, 2218337, 2218369, 2218401]), new Uint32Array([0, 0, 0, 2156546, 2156610, 2156674, 2156738, 2156802, 0, 0, 0, 0, 0, 2156866, 23068672, 2156930]), new Uint32Array([23068672, 23068672, 23068672, 0, 0, 0, 0, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 0, 0]), new Uint32Array([2213409, 2213441, 2213473, 2213505, 2213537, 2213569, 2213601, 2213633, 2213665, 2195681, 2213697, 2213729, 2213761, 2213793, 2213825, 2213857]), new Uint32Array([2100033, 2099233, 2122017, 2200673, 2098113, 2121537, 2103201, 2200705, 2104033, 2121857, 2121953, 2122401, 2099649, 2099969, 2123009, 2100129]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2201857, 6291456, 2201889, 6291456, 2201921, 6291456, 2201953, 6291456, 2201985, 6291456, 2202017, 6291456, 2176193, 2176257, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2188193, 2188225, 2188257, 2188289, 2188321, 2188353, 2188385, 2188417, 2188449, 2188481, 2188513, 2188545, 2188577, 2188609, 2188641, 0]), new Uint32Array([10554529, 2221089, 0, 10502113, 10562017, 10537921, 10538049, 2221121, 2221153, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2213889, 2213921, 2213953, 2213985, 2214017, 2214049, 2214081, 2194177, 2214113, 2214145, 2214177, 2214209, 2214241, 2214273, 2214305, 2214337]), new Uint32Array([2166978, 2167042, 2099169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2180545, 6291456, 6291456, 6291456]), new Uint32Array([10518915, 10519011, 10519107, 10519203, 2162242, 2162306, 2159554, 2162370, 2159362, 2159618, 2105922, 2162434, 2159746, 2162498, 2159810, 2159874]), new Uint32Array([2161730, 2161794, 2135586, 2161858, 2161922, 2137186, 2131810, 2160290, 2135170, 2161986, 2137954, 2162050, 2162114, 2162178, 10518723, 10518819]), new Uint32Array([10506627, 10506723, 10506819, 10506915, 10507011, 10507107, 10507203, 10507299, 10507395, 10507491, 10507587, 10507683, 10507779, 10507875, 10507971, 10508067]), new Uint32Array([6291456, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 0, 0, 0, 0, 0, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0]), new Uint32Array([2175873, 2175905, 2175937, 2175969, 2176001, 2176033, 2176065, 2176097, 2176129, 2176161, 2176193, 2176225, 2176257, 2176289, 2176321, 2176353]), new Uint32Array([2140006, 2140198, 2140390, 2140582, 2140774, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672]), new Uint32Array([2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241]), new Uint32Array([0, 23068672, 0, 0, 0, 0, 0, 0, 0, 2145154, 2145218, 2145282, 6291456, 0, 2145346, 0]), new Uint32Array([0, 0, 0, 0, 10531458, 10495395, 2148545, 2143201, 2173473, 2148865, 2173505, 0, 2173537, 0, 2173569, 2149121]), new Uint32Array([10537282, 10495683, 2148738, 2148802, 2148866, 0, 6291456, 2148930, 2186593, 2173473, 2148737, 2148865, 2148802, 10495779, 10495875, 10495971]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2215425, 2215457, 2215489, 2215521, 2215553, 2215585, 2215617, 2215649, 2215681, 2215713, 2215745, 2215777, 2192033, 2215809, 2215841, 2215873]), new Uint32Array([2242049, 2242081, 2242113, 2242145, 2242177, 2242209, 2242241, 2242273, 2215937, 2242305, 2242338, 2242401, 2242433, 2242465, 2242497, 2216001]), new Uint32Array([10554529, 2221089, 0, 0, 10562017, 10502113, 10538049, 10537921, 2221185, 10489601, 10489697, 10609889, 10609921, 2141729, 2141793, 10610273]), new Uint32Array([2141923, 2142019, 2142115, 2142211, 2142307, 2142403, 2142499, 2142595, 2142691, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([0, 2221185, 2221217, 10609857, 10609857, 10489601, 10489697, 10609889, 10609921, 2141729, 2141793, 2221345, 2221377, 2221409, 2221441, 2187105]), new Uint32Array([6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 18923970, 23068672, 23068672, 23068672, 0, 6291456, 6291456]), new Uint32Array([2183105, 6291456, 2183137, 6291456, 2183169, 6291456, 2183201, 6291456, 2183233, 6291456, 2183265, 6291456, 2183297, 6291456, 2183329, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2134434, 2134818, 2097666, 2097186, 2097474, 2097698, 2105986, 2131586, 2132450, 2131874, 2131778, 2135970, 2135778, 2161602, 2136162, 2161666]), new Uint32Array([2236865, 2236897, 2236930, 2236993, 2237025, 2235681, 2237058, 2237121, 2237153, 2237185, 2237217, 2217281, 2237250, 2191233, 2237313, 2237345]), new Uint32Array([2190049, 6291456, 2190081, 6291456, 2190113, 6291456, 2190145, 6291456, 2190177, 6291456, 2190209, 6291456, 2190241, 6291456, 2190273, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2101922, 2102050, 2102178, 2102306, 10498755, 10498851, 10498947, 10499043, 10499139, 10499235, 10499331, 10499427, 10499523, 10489604, 10489732, 10489860]), new Uint32Array([2166914, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0]), new Uint32Array([2181601, 2170561, 2181633, 2181665, 2170753, 2181697, 2172897, 2170881, 2181729, 2170913, 2172929, 2113441, 2181761, 2181793, 2171009, 2173761]), new Uint32Array([0, 2105921, 2097729, 2106081, 0, 2097601, 2162337, 2106017, 2133281, 2097505, 0, 2097185, 2097697, 2135777, 2097633, 2097441]), new Uint32Array([6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0]), new Uint32Array([2248001, 2248033, 2248066, 2248130, 2248193, 2248226, 2248289, 2248322, 2248385, 2248417, 2216673, 2248450, 2248514, 2248577, 2248610, 2248673]), new Uint32Array([6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 0]), new Uint32Array([2169729, 6291456, 2169761, 6291456, 2169793, 6291456, 2169825, 6291456, 2169857, 2169889, 6291456, 2169921, 6291456, 2143329, 6291456, 2098305]), new Uint32Array([2162178, 2163202, 2163266, 2135170, 2136226, 2161986, 2137954, 2159426, 2159490, 2163330, 2159554, 2163394, 2159682, 2139522, 2136450, 2159746]), new Uint32Array([2173953, 2173985, 0, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2174209, 2174241, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 4271169, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2174273]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 6291456, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 2190785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2189793, 6291456, 2189825, 6291456, 2189857, 6291456, 2189889, 6291456, 2189921, 6291456, 2189953, 6291456, 2189985, 6291456, 2190017, 6291456]), new Uint32Array([2105601, 2112289, 2108193, 2112481, 2112577, 0, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 0, 2098209, 2111137]), new Uint32Array([2172129, 6291456, 2172161, 6291456, 2172193, 6291456, 2172225, 6291456, 2172257, 6291456, 2172289, 6291456, 2172321, 6291456, 2172353, 6291456]), new Uint32Array([2214753, 6291456, 2214785, 6291456, 6291456, 2214817, 2214849, 2214881, 2214913, 2214945, 2214977, 2215009, 2215041, 2215073, 2194401, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([0, 0, 0, 0, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([10610305, 10610337, 10575617, 2221761, 10610401, 10610433, 10502177, 0, 10610465, 10610497, 10610529, 10610561, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 23068672, 0, 0, 0, 0, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2187105, 2187137, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2199393, 2199425, 2199457, 2199489, 2199521, 2199553, 2199585, 2199617, 2199649, 2199681, 2199713, 2199745, 2199777, 2199809, 2199841, 0]), new Uint32Array([2217249, 2217281, 2217313, 2217345, 2217377, 2217409, 2217441, 2217473, 2215617, 2217505, 2217537, 2217569, 2214753, 2217601, 2217633, 2217665]), new Uint32Array([2170273, 2170305, 6291456, 2170337, 2170369, 6291456, 2170401, 2170433, 2170465, 6291456, 6291456, 6291456, 2170497, 2170529, 6291456, 2170561]), new Uint32Array([2188673, 6291456, 2188705, 2188737, 2188769, 6291456, 6291456, 2188801, 6291456, 2188833, 6291456, 2188865, 6291456, 2180929, 2181505, 2180897]), new Uint32Array([10489988, 10490116, 10490244, 10490372, 10490500, 10490628, 10490756, 10490884, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2147393, 2147457, 2147521, 2147585, 2147649, 2147713, 2147777, 2147841]), new Uint32Array([23068672, 23068672, 0, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0]), new Uint32Array([2241153, 2241185, 2241217, 2215809, 2241250, 2241313, 2241345, 2241377, 2217921, 2241377, 2241409, 2215873, 2241441, 2241473, 2241505, 2241537]), new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2220417, 2220417, 2220449, 2220449, 2220481, 2220481, 2220513, 2220513, 2220545, 2220545, 2220577, 2220577, 2220609, 2220609, 2220641, 2220641]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2144002, 0, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456]), new Uint32Array([2167105, 2167137, 2167169, 2167201, 2167233, 2167265, 2167297, 2167329, 2167361, 2167393, 2167425, 2167457, 2167489, 2167521, 2167553, 2167585]), new Uint32Array([10575521, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193]), new Uint32Array([2234146, 2234210, 2234274, 2234338, 2234402, 2234466, 2234530, 2234594, 2234658, 2234722, 2234786, 2234850, 2234914, 2234978, 2235042, 2235106]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 2180577, 0, 0, 0, 0, 0, 2180609, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 6291456, 6291456]), new Uint32Array([2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2242529, 2242561, 2242593, 2242625, 2242657, 2242689, 2242721, 2242753, 2207937, 2218177, 2242785, 2242817, 2242849, 2242882, 2242945, 2242977]), new Uint32Array([2118049, 2105345, 2118241, 2105441, 2118433, 2118529, 2118625, 2118721, 2118817, 2200257, 2200289, 2191809, 2200321, 2200353, 2200385, 2200417]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0]), new Uint32Array([2185505, 6291456, 2185537, 6291456, 2185569, 6291456, 2185601, 6291456, 2185633, 6291456, 2185665, 6291456, 2185697, 6291456, 2185729, 6291456]), new Uint32Array([2231970, 2232034, 2232098, 2232162, 2232226, 2232290, 2232354, 2232418, 2232482, 2232546, 2232610, 2232674, 2232738, 2232802, 2232866, 2232930]), new Uint32Array([2218625, 2246402, 2246466, 2246530, 2246594, 2246657, 2246689, 2246689, 2218657, 2219681, 2246721, 2246753, 2246785, 2246818, 2246881, 2208481]), new Uint32Array([2197025, 2197057, 2197089, 2197121, 2197153, 2197185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2219137, 2216961, 2219169, 2219201, 2219233, 2219265, 2219297, 2217025, 2215041, 2219329, 2217057, 2219361, 2217089, 2219393, 2197153, 2219426]), new Uint32Array([23068672, 23068672, 23068672, 0, 0, 0, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 0, 0]), new Uint32Array([2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713]), new Uint32Array([2243522, 2243585, 2243617, 2243649, 2243681, 2210113, 2243713, 2243746, 2243810, 2243874, 2243937, 2243970, 2244033, 2244065, 2244097, 2244129]), new Uint32Array([2178017, 6291456, 2178049, 6291456, 2178081, 6291456, 2178113, 6291456, 2178145, 6291456, 2178177, 6291456, 2178209, 6291456, 2178241, 6291456]), new Uint32Array([10553858, 2165314, 10518722, 6291456, 10518818, 0, 10518914, 2130690, 10519010, 2130786, 10519106, 2130882, 10519202, 2165378, 10554050, 2165506]), new Uint32Array([0, 0, 2135491, 2135587, 2135683, 2135779, 2135875, 2135971, 2135971, 2136067, 2136163, 2136259, 2136355, 2136355, 2136451, 2136547]), new Uint32Array([23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2220033, 2220033, 2220065, 2220065, 2220065, 2220065, 2220097, 2220097, 2220097, 2220097, 2220129, 2220129, 2220129, 2220129, 2220161, 2220161]), new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2100897, 2100898, 2100899, 2150018, 2100865, 2100866, 2100867, 2100868, 2150082, 2108481, 2109858, 2109859, 2105569, 2105505, 2098241, 2105601]), new Uint32Array([2097217, 2097505, 2097505, 2097505, 2097505, 2165570, 2165570, 2165634, 2165634, 2165698, 2165698, 2097858, 2097858, 0, 0, 2097152]), new Uint32Array([23068672, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672]), new Uint32Array([23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0]), new Uint32Array([10503843, 10503939, 10504035, 10504131, 10504227, 10504323, 10504419, 10504515, 10504611, 10504707, 10504803, 10504899, 10504995, 10491140, 10491268, 0]), new Uint32Array([2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2173761, 2174017, 2174049]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2134145, 2097153, 2134241, 2105953, 2132705, 2130977, 2160065, 2131297, 2162049, 2133089, 2160577, 2133857, 2235297, 2220769, 2235329, 2235361]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2222401, 2222433, 2222465, 10531394, 2222497, 2222529, 2222561, 0, 2222593, 2222625, 2222657, 2222689, 2222721, 2222753, 2222785, 0]), new Uint32Array([2184481, 6291456, 2184513, 6291456, 2184545, 6291456, 2184577, 6291456, 2184609, 6291456, 2184641, 6291456, 2184673, 6291456, 2184705, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2105570, 2156034, 2126947, 2156098, 2153666, 2127043, 2127139, 2156162, 0, 2127235, 2156226, 2156290, 2156354, 2156418, 2127331, 2127427]), new Uint32Array([2215905, 2207041, 2153185, 2241569, 2241601, 2241633, 2241665, 2241697, 2241730, 2241793, 2241825, 2241857, 2241889, 2241921, 2241954, 2242017]), new Uint32Array([2203777, 6291456, 2203809, 6291456, 2203841, 6291456, 2203873, 6291456, 2203905, 6291456, 2173121, 2180993, 2181249, 2203937, 2181313, 0]), new Uint32Array([2168577, 6291456, 2168609, 6291456, 2168641, 6291456, 2168673, 6291456, 2168705, 6291456, 2168737, 6291456, 2168769, 6291456, 2168801, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 23068672, 23068672, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 0, 0]), new Uint32Array([2210113, 2195521, 2210145, 2210177, 2210209, 2210241, 2210273, 2210305, 2210337, 2210369, 2210401, 2210433, 2210465, 2210497, 2210529, 2210561]), new Uint32Array([6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0]), new Uint32Array([2228706, 2228770, 2228834, 2228898, 2228962, 2229026, 2229090, 2229154, 2229218, 2229282, 2229346, 2229410, 2229474, 2229538, 2229602, 2229666]), new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 18874368, 18874368, 18874368, 0, 0]), new Uint32Array([2133089, 2133281, 2133281, 2133281, 2133281, 2160577, 2160577, 2160577, 2160577, 2097441, 2097441, 2097441, 2097441, 2133857, 2133857, 2133857]), new Uint32Array([6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2174017, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2233089]), new Uint32Array([2178529, 6291456, 2178561, 6291456, 2178593, 6291456, 2178625, 6291456, 2178657, 6291456, 2178689, 6291456, 2178721, 6291456, 2178753, 6291456]), new Uint32Array([2221025, 2221025, 2221057, 2221057, 2159329, 2159329, 2159329, 2159329, 2097217, 2097217, 2158914, 2158914, 2158978, 2158978, 2159042, 2159042]), new Uint32Array([2208161, 2208193, 2208225, 2208257, 2194433, 2208289, 2208321, 2208353, 2208385, 2208417, 2208449, 2208481, 2208513, 2208545, 2208577, 2208609]), new Uint32Array([2169217, 6291456, 2169249, 6291456, 2169281, 6291456, 2169313, 6291456, 2169345, 6291456, 2169377, 6291456, 2169409, 6291456, 2169441, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2133187, 2133283, 2133283, 2133379, 2133475, 2133571, 2133667, 2133667, 2133763, 2133859, 2133955, 2134051, 2134147, 2134147, 2134243, 2134339]), new Uint32Array([2197697, 2114113, 2114209, 2197729, 2197761, 2114305, 2197793, 2114401, 2114497, 2197825, 2114593, 2114689, 2114785, 2114881, 2114977, 0]), new Uint32Array([2193089, 2193121, 2193153, 2193185, 2117665, 2117569, 2193217, 2193249, 2193281, 2193313, 2193345, 2193377, 2193409, 2193441, 2193473, 2193505]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2184225, 6291456, 2184257, 6291456, 2184289, 6291456, 2184321, 6291456, 2184353, 6291456, 2184385, 6291456, 2184417, 6291456, 2184449, 6291456]), new Uint32Array([2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2100833, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2098657, 2098049, 2200737, 2123489, 2123681, 2200769, 2098625, 2100321, 2098145, 2100449, 2098017, 2098753, 2200801, 2200833, 2200865, 0]), new Uint32Array([23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0]), new Uint32Array([2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 0, 2098241, 2108353, 2108417, 2105825, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2181153, 2105505, 2181185, 2167617, 2180993]), new Uint32Array([2160002, 2160066, 2160130, 2160194, 2160258, 2132066, 2131010, 2131106, 2106018, 2131618, 2160322, 2131298, 2132034, 2131938, 2137410, 2132226]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456]), new Uint32Array([2183617, 6291456, 2183649, 6291456, 2183681, 6291456, 2183713, 6291456, 2183745, 6291456, 2183777, 6291456, 2183809, 6291456, 2183841, 6291456]), new Uint32Array([0, 6291456, 6291456, 0, 6291456, 0, 0, 6291456, 6291456, 0, 6291456, 0, 0, 6291456, 0, 0]), new Uint32Array([2250977, 2251009, 2251041, 2251073, 2195009, 2251106, 2251169, 2251201, 2251233, 2251265, 2251297, 2251330, 2251394, 2251457, 2251489, 2251521]), new Uint32Array([2205729, 2205761, 2205793, 2205825, 2205857, 2205889, 2205921, 2205953, 2205985, 2206017, 2206049, 2206081, 2206113, 2206145, 2206177, 2206209]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2143170, 2168993, 6291456, 2169025, 6291456, 2169057, 6291456, 2169089, 6291456, 2143234, 2169121, 6291456, 2169153, 6291456, 2169185, 6291456]), new Uint32Array([23068672, 23068672, 2190689, 6291456, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2248706, 2248769, 2248801, 2248833, 2248865, 2248897, 2248929, 2248962, 2249026, 2249090, 2249154, 2240705, 2249217, 2249249, 2249281, 2249313]), new Uint32Array([10485857, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 10495394, 6291456, 2098209, 6291456, 6291456, 2097152, 6291456, 10531394]), new Uint32Array([0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0]), new Uint32Array([14680064, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2173985, 2173953, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889]), new Uint32Array([6291456, 2186977, 6291456, 6291456, 6291456, 6291456, 6291456, 10537858, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2209601, 2209633, 2209665, 2209697, 2209729, 2209761, 2209793, 2209825, 2209857, 2209889, 2209921, 2209953, 2209985, 2210017, 2210049, 2210081]), new Uint32Array([10501539, 10501635, 10501731, 10501827, 10501923, 10502019, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905]), new Uint32Array([2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2174017, 2174017, 2174049]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2194561, 2194593, 2194625, 2119777, 2119873, 2194657, 2194689, 2194721, 2194753, 2194785, 2194817, 2194849, 2194881, 2194913, 2194945, 2194977]), new Uint32Array([2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569]), new Uint32Array([2222818, 2222882, 2222946, 2223010, 2223074, 2223138, 2223202, 2223266, 2223330, 2223394, 2223458, 2223522, 2223586, 2223650, 2223714, 2223778]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672]), new Uint32Array([0, 2179553, 2179585, 2179617, 2179649, 2144001, 2179681, 2179713, 2179745, 2179777, 2179809, 2156705, 2179841, 2156833, 2179873, 2179905]), new Uint32Array([6291456, 23068672, 6291456, 2145602, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 6291456, 0, 0]), new Uint32Array([2196513, 2196545, 2196577, 2196609, 2196641, 2196673, 2196705, 2196737, 2196769, 2196801, 2196833, 2196865, 2196897, 2196929, 2196961, 2196993]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2177281, 6291456, 2177313, 6291456, 2177345, 6291456, 2177377, 6291456, 2177409, 6291456, 2177441, 6291456, 2177473, 6291456, 2177505, 6291456]), new Uint32Array([2187137, 2221473, 2221505, 2221537, 2221569, 6291456, 6291456, 10610209, 10610241, 10537986, 10537986, 10537986, 10537986, 10609857, 10609857, 10609857]), new Uint32Array([2243009, 2243041, 2216033, 2243074, 2243137, 2243169, 2243201, 2219617, 2243233, 2243265, 2243297, 2243329, 2243362, 2243425, 2243457, 2243489]), new Uint32Array([10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 2097152, 4194304, 4194304, 0, 0]), new Uint32Array([2143042, 6291456, 2143106, 2143106, 2168833, 6291456, 2168865, 6291456, 6291456, 2168897, 6291456, 2168929, 6291456, 2168961, 6291456, 2143170]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2204193, 2204225, 2204257, 2204289, 2204321, 2204353, 2204385, 2204417, 2204449, 2204481, 2204513, 2204545, 2204577, 2204609, 2204641, 2204673]), new Uint32Array([2202753, 6291456, 2202785, 6291456, 2202817, 6291456, 2202849, 6291456, 2202881, 6291456, 2202913, 6291456, 2202945, 6291456, 2202977, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177, 2098305, 2108321]), new Uint32Array([2147394, 2147458, 2147522, 2147586, 2147650, 2147714, 2147778, 2147842, 2147394, 2147458, 2147522, 2147586, 2147650, 2147714, 2147778, 2147842]), new Uint32Array([2253313, 2253346, 2253409, 2253441, 2253473, 2253505, 2253537, 2253569, 2253601, 2253634, 2219393, 2253697, 2253729, 2253761, 2253793, 2253825]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]), new Uint32Array([2162562, 2162626, 2131362, 2162690, 2159938, 2160002, 2162754, 2162818, 2160130, 2162882, 2160194, 2160258, 2160834, 2160898, 2161026, 2161090]), new Uint32Array([2175361, 2175393, 2175425, 2175457, 2175489, 2175521, 2175553, 2175585, 2175617, 2175649, 2175681, 2175713, 2175745, 2175777, 2175809, 2175841]), new Uint32Array([2253858, 2253921, 2253954, 2254018, 2254082, 2196737, 2254145, 2196865, 2254177, 2254209, 2254241, 2254273, 2197025, 2254306, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2202113, 2204129, 2188705, 2204161]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0]), new Uint32Array([2173985, 2174017, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2233089, 2173697, 2173761, 2173793, 2174113, 2173985, 2173953]), new Uint32Array([2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 2100833, 2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209]), new Uint32Array([2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 0, 2108417, 0, 2111713, 2100897, 2111905]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2175425, 2175489, 2175809, 2175905, 2175937, 2175937, 2176193, 2176417, 2180865, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 2143298, 2143298, 2143298, 2143362, 2143362, 2143362, 2143426, 2143426, 2143426, 2171105, 6291456, 2171137]), new Uint32Array([2120162, 2120258, 2151618, 2151682, 2151746, 2151810, 2151874, 2151938, 2152002, 2120035, 2120131, 2120227, 2152066, 2120323, 2152130, 2120419]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2195361, 2142433, 2236065, 2236097, 2236129, 2236161, 2118241, 2117473, 2236193, 2236225, 2236257, 2236289, 0, 0, 0, 0]), new Uint32Array([2189281, 6291456, 2189313, 6291456, 2189345, 6291456, 2189377, 6291456, 2189409, 6291456, 2189441, 6291456, 2189473, 6291456, 2189505, 6291456]), new Uint32Array([6291456, 6291456, 2145922, 6291456, 6291456, 6291456, 6291456, 2145986, 6291456, 6291456, 6291456, 6291456, 2146050, 6291456, 6291456, 6291456]), new Uint32Array([2100833, 2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 10502113, 10562017, 10610401, 10502177, 10610433, 10538049]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 2186401, 0, 2186433, 0, 2186465, 0, 2186497]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 23068672, 23068672, 23068672]), new Uint32Array([0, 0, 2198241, 2198273, 2198305, 2198337, 2198369, 2198401, 0, 0, 2198433, 2198465, 2198497, 0, 0, 0]), new Uint32Array([6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 6291456, 23068672, 23068672]), new Uint32Array([0, 2105921, 2097729, 0, 2097377, 0, 0, 2106017, 2133281, 2097505, 2105889, 0, 2097697, 2135777, 2097633, 2097441]), new Uint32Array([2197889, 2197921, 2197953, 2197985, 2198017, 2198049, 2198081, 2198113, 2198145, 2198177, 2198209, 2198241, 2198273, 2198305, 2198337, 2198369]), new Uint32Array([2132514, 2132610, 2160386, 2133090, 2133186, 2160450, 2160514, 2133282, 2160578, 2133570, 2106178, 2160642, 2133858, 2160706, 2160770, 2134146]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 23068672, 23068672, 6291456, 23068672, 23068672, 6291456, 23068672, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2184737, 6291456, 2184769, 6291456, 2184801, 6291456, 2184833, 6291456, 2184865, 6291456, 2184897, 6291456, 2184929, 6291456, 2184961, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 6291456]), new Uint32Array([6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 2186753, 6291456, 6291456, 6291456, 6291456, 2186785, 2186817, 2186849, 2173569, 2186881, 10496355, 10495395, 10575521]), new Uint32Array([0, 0, 2097729, 0, 0, 0, 0, 2106017, 0, 2097505, 0, 2097185, 0, 2135777, 2097633, 2097441]), new Uint32Array([2189537, 6291456, 2189569, 6291456, 2189601, 6291456, 2189633, 6291456, 2189665, 6291456, 2189697, 6291456, 2189729, 6291456, 2189761, 6291456]), new Uint32Array([2202497, 6291456, 2202529, 6291456, 2202561, 6291456, 2202593, 6291456, 2202625, 6291456, 2202657, 6291456, 2202689, 6291456, 2202721, 6291456]), new Uint32Array([2245217, 2218369, 2245249, 2245282, 2245345, 2245377, 2245410, 2245474, 2245537, 2245569, 2245601, 2245633, 2245665, 2245665, 2245697, 2245729]), new Uint32Array([6291456, 0, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 0, 0, 0, 0, 0, 0, 23068672, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 23068672, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672]), new Uint32Array([0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2097281, 2105921, 2097729, 2106081, 2097377, 2097601, 2162337, 2106017, 2133281, 2097505, 0, 2097185, 2097697, 2135777, 2097633, 2097441]), new Uint32Array([2176641, 6291456, 2176673, 6291456, 2176705, 6291456, 2176737, 6291456, 2176769, 6291456, 2176801, 6291456, 2176833, 6291456, 2176865, 6291456]), new Uint32Array([2174145, 2174177, 2149057, 2233089, 2173697, 2173761, 2173793, 2174113, 2173985, 2173953, 2174369, 2174369, 0, 0, 2100833, 2100737]), new Uint32Array([2116513, 2190817, 2190849, 2190881, 2190913, 2190945, 2116609, 2190977, 2191009, 2191041, 2191073, 2117185, 2191105, 2191137, 2191169, 2191201]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456]), new Uint32Array([0, 0, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456]), new Uint32Array([2167617, 2167649, 2167681, 2167713, 2167745, 2167777, 2167809, 6291456, 2167841, 2167873, 2167905, 2167937, 2167969, 2168001, 2168033, 4240130]), new Uint32Array([2165122, 2163970, 2164034, 2164098, 2164162, 2164226, 2164290, 2164354, 2164418, 2164482, 2164546, 2133122, 2134562, 2132162, 2132834, 2136866]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 2186209, 2186241, 2186273, 2186305, 2186337, 2186369, 0, 0]), new Uint32Array([2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 14680064, 14680064, 14680064, 14680064, 14680064]), new Uint32Array([0, 0, 23068672, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456]), new Uint32Array([0, 10537921, 10610689, 10610273, 10610497, 10610529, 10610305, 10610721, 10489601, 10489697, 10610337, 10575617, 10554529, 2221761, 2197217, 10496577]), new Uint32Array([2105473, 2105569, 2105601, 2112289, 0, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441]), new Uint32Array([2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481]), new Uint32Array([2125346, 2153410, 2153474, 2127394, 2153538, 2153602, 2153666, 2153730, 2105507, 2105476, 2153794, 2153858, 2153922, 2153986, 2154050, 2105794]), new Uint32Array([2200449, 2119681, 2200481, 2153313, 2199873, 2199905, 2199937, 2200513, 2200545, 2200577, 2200609, 2119105, 2119201, 2119297, 2119393, 2119489]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2175777, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2222273, 2197217, 2221473, 2221505, 2221089, 2222305, 2200865, 2099681, 2104481, 2222337, 2099905, 2120737, 2222369, 2103713, 2100225, 2098785]), new Uint32Array([2201377, 6291456, 2201409, 6291456, 2201441, 6291456, 2201473, 6291456, 2201505, 6291456, 2201537, 6291456, 2201569, 6291456, 6291456, 23068672]), new Uint32Array([2174081, 2174113, 2174145, 2174177, 2149057, 2233057, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761, 2143969, 2173793]), new Uint32Array([2200897, 6291456, 2200929, 6291456, 2200961, 6291456, 2200993, 6291456, 2201025, 6291456, 2180865, 6291456, 2201057, 6291456, 2201089, 6291456]), new Uint32Array([0, 0, 0, 0, 0, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0]), new Uint32Array([2161154, 2161410, 2138658, 2161474, 2161538, 2097666, 2097186, 2097474, 2162946, 2132450, 2163010, 2163074, 2136162, 2163138, 2161666, 2161730]), new Uint32Array([2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921, 2173953]), new Uint32Array([0, 0, 0, 0, 0, 0, 23068672, 23068672, 0, 0, 0, 0, 2145410, 2145474, 0, 6291456]), new Uint32Array([2244161, 2216065, 2212769, 2244193, 2244225, 2244257, 2244290, 2244353, 2244385, 2244417, 2244449, 2218273, 2244481, 2244514, 2244577, 2244609]), new Uint32Array([2125730, 2125699, 2125795, 2125891, 2125987, 2154114, 2154178, 2154242, 2154306, 2154370, 2154434, 2154498, 2126082, 2126178, 2126274, 2126083]), new Uint32Array([2237665, 2237697, 2237697, 2237697, 2237730, 2237793, 2237825, 2237857, 2237890, 2237953, 2237985, 2238017, 2238049, 2238081, 2238113, 2238145]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2150146, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 0, 0]), new Uint32Array([2214369, 2238593, 2238625, 2238657, 2238689, 2238721, 2238753, 2238785, 2238817, 2238850, 2238913, 2238945, 2238977, 2235457, 2239009, 2239041]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0]), new Uint32Array([2252066, 2252130, 2252193, 2252225, 2252257, 2252290, 2252353, 2252385, 2252417, 2252449, 2252481, 2252513, 2252545, 2252578, 2252641, 2252673]), new Uint32Array([2197697, 2114113, 2114209, 2197729, 2197761, 2114305, 2197793, 2114401, 2114497, 2197825, 2114593, 2114689, 2114785, 2114881, 2114977, 2197857]), new Uint32Array([2224866, 2224930, 2224994, 2225058, 2225122, 2225186, 2225250, 2225314, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2219490, 2219554, 2219617, 2219649, 2219681, 2219714, 2219778, 2219842, 2219905, 2219937, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456]), new Uint32Array([2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289]), new Uint32Array([2174081, 2174113, 2174145, 2174177, 2149057, 2233089, 2173697, 2173761, 2173793, 2174113, 2173985, 2173953, 2148481, 2173601, 2173633, 2173665]), new Uint32Array([2220161, 2220161, 2220193, 2220193, 2220193, 2220193, 2220225, 2220225, 2220225, 2220225, 2220257, 2220257, 2220257, 2220257, 2220289, 2220289]), new Uint32Array([2192673, 2192705, 2192737, 2192769, 2192801, 2192833, 2192865, 2118049, 2192897, 2117473, 2117761, 2192929, 2192961, 2192993, 2193025, 2193057]), new Uint32Array([2179297, 6291456, 2179329, 6291456, 2179361, 6291456, 2179393, 6291456, 2179425, 6291456, 2179457, 6291456, 2179489, 6291456, 2179521, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2235745, 2235777, 2193633, 2235809, 2235841, 2235873, 2235905, 2235937, 2235969, 2116513, 2116705, 2236001, 2200513, 2199905, 2200545, 2236033]), new Uint32Array([2113153, 2108481, 2113345, 2113441, 2232993, 2233025, 0, 0, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761]), new Uint32Array([2170593, 6291456, 2170625, 6291456, 2170657, 6291456, 2170689, 2170721, 6291456, 2170753, 6291456, 6291456, 2170785, 6291456, 2170817, 2170849]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2166786, 2166850, 0, 0, 0, 0]), new Uint32Array([23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]), new Uint32Array([2100833, 2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 10575617, 2187041, 10502177, 10489601, 10489697, 0]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2134562, 2132162, 2132834, 2136866, 2136482, 2164610, 2164674, 2164738, 2164802, 2132802, 2132706, 2164866, 2132898, 2164930, 2164994, 2165058]), new Uint32Array([6291456, 6291456, 2098337, 2101441, 10531458, 2153473, 6291456, 6291456, 10531522, 2100737, 2108193, 6291456, 2106499, 2106595, 2106691, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2233122, 2233186, 2233250, 2233314, 2233378, 2233442, 2233506, 2233570, 2233634, 2233698, 2233762, 2233826, 2233890, 2233954, 2234018, 2234082]), new Uint32Array([23068672, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2205217, 2205249, 2205281, 2205313, 2205345, 2205377, 2205409, 2205441, 2205473, 2205505, 2205537, 2205569, 2205601, 2205633, 2205665, 2205697]), new Uint32Array([6291456, 0, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 6291456, 23068672, 23068672]), new Uint32Array([2173601, 2173761, 2174081, 2173569, 2174241, 2174113, 2173953, 6291456, 2174305, 6291456, 2174337, 6291456, 2174369, 6291456, 2174401, 6291456]), new Uint32Array([6291456, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]), new Uint32Array([2152450, 2152514, 2099653, 2104452, 2099813, 2122243, 2099973, 2152578, 2122339, 2122435, 2122531, 2122627, 2122723, 2104580, 2122819, 2152642]), new Uint32Array([2236385, 2236417, 2236449, 2236482, 2236545, 2215425, 2236577, 2236609, 2236641, 2236673, 2215457, 2236705, 2236737, 2236770, 2215489, 2236833]), new Uint32Array([2163394, 2159746, 2163458, 2131362, 2163522, 2160130, 2163778, 2132226, 2163842, 2132898, 2163906, 2161410, 2138658, 2097666, 2136162, 2163650]), new Uint32Array([2218721, 2246913, 2246946, 2216385, 2247010, 2247074, 2215009, 2247137, 2247169, 2216481, 2247201, 2247233, 2247266, 2247330, 2247330, 0]), new Uint32Array([2129730, 2129762, 2129858, 2129731, 2129827, 2156482, 2156482, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 0, 0, 0, 0, 6291456, 0, 0]), new Uint32Array([2203969, 2204001, 2181377, 2204033, 2204065, 6291456, 2204097, 6291456, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2169473, 6291456, 2169505, 6291456, 2169537, 6291456, 2169569, 6291456, 2169601, 6291456, 2169633, 6291456, 2169665, 6291456, 2169697, 6291456]), new Uint32Array([2141542, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2220801, 2220801, 2220801, 2220801, 2220833, 2220833, 2220865, 2220865, 2220865, 2220865, 2220897, 2220897, 2220897, 2220897, 2139873, 2139873]), new Uint32Array([0, 0, 0, 0, 0, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 6291456, 0]), new Uint32Array([2214849, 2218433, 2218465, 2218497, 2218529, 2218561, 2214881, 2218593, 2218625, 2218657, 2218689, 2218721, 2218753, 2216545, 2218785, 2218817]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456]), new Uint32Array([2136482, 2164610, 2164674, 2164738, 2164802, 2132802, 2132706, 2164866, 2132898, 2164930, 2164994, 2165058, 2165122, 2132802, 2132706, 2164866]), new Uint32Array([2207649, 2207681, 2207713, 2207745, 2207777, 2207809, 2207841, 2207873, 2207905, 2207937, 2207969, 2208001, 2208033, 2208065, 2208097, 2208129]), new Uint32Array([2123683, 2105092, 2152706, 2123779, 2105220, 2152770, 2100453, 2098755, 2123906, 2124002, 2124098, 2124194, 2124290, 2124386, 2124482, 2124578]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 0, 0, 0, 0, 0, 0, 0, 10485857]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([10508163, 10508259, 10508355, 10508451, 2200129, 2200161, 2192737, 2200193, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2203553, 6291456, 2203585, 6291456, 6291456, 6291456, 2203617, 6291456, 2203649, 6291456, 2203681, 6291456, 2203713, 6291456, 2203745, 6291456]), new Uint32Array([18884449, 18884065, 23068672, 18884417, 18884034, 18921185, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 18874368]), new Uint32Array([2247393, 2247426, 2247489, 2247521, 2247553, 2247586, 2247649, 2247681, 2247713, 2247745, 2247777, 2247810, 2247873, 2247905, 2247937, 2247969]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 23068672]), new Uint32Array([2134145, 2097153, 2134241, 0, 2132705, 2130977, 2160065, 2131297, 0, 2133089, 2160577, 2133857, 2235297, 0, 2235329, 0]), new Uint32Array([2182593, 6291456, 2182625, 6291456, 2182657, 6291456, 2182689, 6291456, 2182721, 6291456, 2182753, 6291456, 2182785, 6291456, 2182817, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2102402, 2102403, 6291456, 2110050]), new Uint32Array([2149890, 2108323, 2149954, 6291456, 2113441, 6291456, 2149057, 6291456, 2113441, 6291456, 2105473, 2167265, 2111137, 2105505, 6291456, 2108353]), new Uint32Array([2219105, 2219137, 2195233, 2251554, 2251617, 2251649, 2251681, 2251713, 2251746, 2251810, 2251873, 2251905, 2251937, 2251970, 2252033, 2219169]), new Uint32Array([2203009, 6291456, 2203041, 6291456, 2203073, 6291456, 2203105, 6291456, 2203137, 6291456, 2203169, 6291456, 2203201, 6291456, 2203233, 6291456]), new Uint32Array([2128195, 2128291, 2128387, 2128483, 2128579, 2128675, 2128771, 2128867, 2128963, 2129059, 2129155, 2129251, 2129347, 2129443, 2129539, 2129635]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2140964, 2141156, 2140966, 2141158, 2141350]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2225378, 2225442, 2225506, 2225570, 2225634, 2225698, 2225762, 2225826, 2225890, 2225954, 2226018, 2226082, 2226146, 2226210, 2226274, 2226338]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417]), new Uint32Array([2108353, 2108417, 0, 2105601, 2108193, 2157121, 2157313, 2157377, 2157441, 2100897, 6291456, 2108419, 2173953, 2173633, 2173633, 2173953]), new Uint32Array([2111713, 2173121, 2111905, 2098177, 2173153, 2173185, 2173217, 2113153, 2113345, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 2190753]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2197249, 6291456, 2117377, 2197281, 2197313, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 0, 0, 0, 0, 0, 0, 23068672, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456]), new Uint32Array([2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 2100833, 2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0]), new Uint32Array([0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 23068672, 23068672]), new Uint32Array([2173281, 6291456, 2173313, 6291456, 2173345, 6291456, 2173377, 6291456, 0, 0, 10532546, 6291456, 6291456, 6291456, 10562017, 2173441]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 0, 0]), new Uint32Array([23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2159426, 2159490, 2159554, 2159362, 2159618, 2159682, 2139522, 2136450, 2159746, 2159810, 2159874, 2130978, 2131074, 2131266, 2131362, 2159938]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2203233, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2203265, 6291456, 2203297, 6291456, 2203329, 2203361, 6291456]), new Uint32Array([6291456, 6291456, 2148418, 2148482, 2148546, 0, 6291456, 2148610, 2186529, 2186561, 2148417, 2148545, 2148482, 10495778, 2143969, 10495778]), new Uint32Array([2134146, 2139426, 2160962, 2134242, 2161218, 2161282, 2161346, 2161410, 2138658, 2134722, 2134434, 2134818, 2097666, 2097346, 2097698, 2105986]), new Uint32Array([2198881, 2198913, 2198945, 2198977, 2199009, 2199041, 2199073, 2199105, 2199137, 2199169, 2199201, 2199233, 2199265, 2199297, 2199329, 2199361]), new Uint32Array([0, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456]), new Uint32Array([10610561, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193]), new Uint32Array([2183873, 6291456, 2183905, 6291456, 2183937, 6291456, 2183969, 6291456, 2184001, 6291456, 2184033, 6291456, 2184065, 6291456, 2184097, 6291456]), new Uint32Array([2244642, 2244706, 2244769, 2244801, 2218305, 2244833, 2244865, 2244897, 2244929, 2244961, 2244993, 2245026, 2245089, 2245122, 2245185, 0]), new Uint32Array([6291456, 6291456, 2116513, 2116609, 2116705, 2116801, 2199873, 2199905, 2199937, 2199969, 2190913, 2200001, 2200033, 2200065, 2200097, 2191009]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 2180673, 2180705, 2180737, 2180769, 2180801, 2180833, 0, 0]), new Uint32Array([2098081, 2099521, 2099105, 2120705, 2098369, 2120801, 2103361, 2097985, 2098433, 2121377, 2121473, 2099169, 2099873, 2098401, 2099393, 2152609]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2150402]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 2145666, 2145730, 6291456, 6291456]), new Uint32Array([2173921, 2173953, 2173985, 2173761, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2233057, 2148481, 2173601, 2173633, 2173665]), new Uint32Array([2187073, 6291456, 6291456, 6291456, 6291456, 2098241, 2098241, 2108353, 2100897, 2111905, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2102404, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2100612, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 10485857]), new Uint32Array([2149057, 2233057, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889]), new Uint32Array([2217697, 2217729, 2217761, 2217793, 2217825, 2217857, 2217889, 2217921, 2217953, 2215873, 2217985, 2215905, 2218017, 2218049, 2218081, 2218113]), new Uint32Array([2211233, 2218849, 2216673, 2218881, 2218913, 2218945, 2218977, 2219009, 2216833, 2219041, 2215137, 2219073, 2216865, 2209505, 2219105, 2216897]), new Uint32Array([2240097, 2240129, 2240161, 2240193, 2240225, 2240257, 2240289, 2240321, 2240353, 2240386, 2240449, 2240481, 2240513, 2240545, 2207905, 2240578]), new Uint32Array([6291456, 6291456, 2202273, 6291456, 2202305, 6291456, 2202337, 6291456, 2202369, 6291456, 2202401, 6291456, 2202433, 6291456, 2202465, 6291456]), new Uint32Array([0, 23068672, 23068672, 18923394, 23068672, 18923458, 18923522, 18884099, 18923586, 18884195, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2201121, 6291456, 2201153, 6291456, 2201185, 6291456, 2201217, 6291456, 2201249, 6291456, 2201281, 6291456, 2201313, 6291456, 2201345, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456]), new Uint32Array([2211041, 2211073, 2211105, 2211137, 2211169, 2211201, 2211233, 2211265, 2211297, 2211329, 2211361, 2211393, 2211425, 2211457, 2211489, 2211521]), new Uint32Array([2181825, 6291456, 2181857, 6291456, 2181889, 6291456, 2181921, 6291456, 2181953, 6291456, 2181985, 6291456, 2182017, 6291456, 2182049, 6291456]), new Uint32Array([2162337, 2097633, 2097633, 2097633, 2097633, 2132705, 2132705, 2132705, 2132705, 2097153, 2097153, 2097153, 2097153, 2133089, 2133089, 2133089]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 2148545, 6291456, 2173473, 6291456, 2148865, 6291456, 2173505, 6291456, 2173537, 6291456, 2173569, 6291456, 2149121, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 0, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0]), new Uint32Array([2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2174017, 2174017, 2174049, 2174081, 2174113]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2207137, 2207169, 2207201, 2207233, 2207265, 2207297, 2207329, 2207361, 2207393, 2207425, 2207457, 2207489, 2207521, 2207553, 2207585, 2207617]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456, 0, 23068672, 23068672, 0, 0, 0, 0, 0, 0]), new Uint32Array([2198401, 2198433, 2198465, 2198497, 0, 2198529, 2198561, 2198593, 2198625, 2198657, 2198689, 2198721, 2198753, 2198785, 2198817, 2198849]), new Uint32Array([2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 0, 0]), new Uint32Array([2216385, 2118721, 2216417, 2216449, 2216481, 2216513, 2216545, 2211233, 2216577, 2216609, 2216641, 2216673, 2216705, 2216737, 2216737, 2216769]), new Uint32Array([2216801, 2216833, 2216865, 2216897, 2216929, 2216961, 2216993, 2215169, 2217025, 2217057, 2217089, 2217121, 2217154, 2217217, 0, 0]), new Uint32Array([2210593, 2191809, 2210625, 2210657, 2210689, 2210721, 2210753, 2210785, 2210817, 2210849, 2191297, 2210881, 2210913, 2210945, 2210977, 2211009]), new Uint32Array([0, 0, 2105825, 0, 0, 2111905, 2105473, 0, 0, 2112289, 2108193, 2112481, 2112577, 0, 2098305, 2108321]), new Uint32Array([0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([0, 2097153, 2134241, 0, 2132705, 0, 0, 2131297, 0, 2133089, 0, 2133857, 0, 2220769, 0, 2235361]), new Uint32Array([14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 6291456, 6291456, 14680064]), new Uint32Array([23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2171873, 6291456, 2171905, 6291456, 2171937, 6291456, 2171969, 6291456, 2172001, 6291456, 2172033, 6291456, 2172065, 6291456, 2172097, 6291456]), new Uint32Array([2220929, 2220929, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2133857, 2134145, 2134145, 2134145, 2134145, 2134241, 2134241, 2134241, 2134241, 2105889, 2105889, 2105889, 2105889, 2097185, 2097185, 2097185]), new Uint32Array([2173697, 2173761, 2173793, 2174113, 2173985, 2173953, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761, 2143969, 2173793]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10499619, 10499715, 10499811, 10499907]), new Uint32Array([0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 0, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 23068672, 23068672]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 2144322, 2144386, 2144450, 2144514, 2144578, 2144642, 2144706, 2144770]), new Uint32Array([23068672, 23068672, 23068672, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 0, 2098241, 2108353, 2108417, 2105825, 0, 0, 2111905, 2105473, 2105569]), new Uint32Array([2236321, 2236353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2152194, 2121283, 2103684, 2103812, 2097986, 2098533, 2097990, 2098693, 2098595, 2098853, 2099013, 2103940, 2121379, 2121475, 2121571, 2104068]), new Uint32Array([2206241, 2206273, 2206305, 2206337, 2206369, 2206401, 2206433, 2206465, 2206497, 2206529, 2206561, 2206593, 2206625, 2206657, 2206689, 2206721]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 16777216, 16777216, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 23068672, 10538818, 10538882, 6291456, 6291456, 2150338]), new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2214369, 2214401, 2214433, 2214465, 2214497, 2214529, 2214561, 2214593, 2194977, 2214625, 2195073, 2214657, 2214689, 2214721, 6291456, 6291456]), new Uint32Array([2097152, 2097152, 2097152, 2097152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2182081, 6291456, 2182113, 6291456, 2182145, 6291456, 2182177, 6291456, 2182209, 6291456, 2182241, 6291456, 2182273, 6291456, 2182305, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2146881, 2146945, 2147009, 2147073, 2147137, 2147201, 2147265, 2147329]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 23068672, 23068672]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2122915, 2123011, 2123107, 2104708, 2123203, 2123299, 2123395, 2100133, 2104836, 2100290, 2100293, 2104962, 2104964, 2098052, 2123491, 2123587]), new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456]), new Uint32Array([6291456, 2171169, 6291456, 2171201, 6291456, 2171233, 6291456, 2171265, 6291456, 2171297, 6291456, 2171329, 6291456, 6291456, 2171361, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([0, 0, 2148994, 2149058, 2149122, 0, 6291456, 2149186, 2186945, 2173537, 2148993, 2149121, 2149058, 10531458, 10496066, 0]), new Uint32Array([2195009, 2195041, 2195073, 2195105, 2195137, 2195169, 2195201, 2195233, 2195265, 2195297, 2195329, 2195361, 2195393, 2195425, 2195457, 2195489]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 0, 0, 6291456, 6291456]), new Uint32Array([2182849, 6291456, 2182881, 6291456, 2182913, 6291456, 2182945, 6291456, 2182977, 6291456, 2183009, 6291456, 2183041, 6291456, 2183073, 6291456]), new Uint32Array([2211553, 2210081, 2211585, 2211617, 2211649, 2211681, 2211713, 2211745, 2211777, 2211809, 2209569, 2211841, 2211873, 2211905, 2211937, 2211969]), new Uint32Array([2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2166594, 2127298, 2166658, 2142978, 2141827, 2166722]), new Uint32Array([2173985, 2173761, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2233057, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 2185761, 2185793, 2185825, 2185857, 2185889, 2185921, 0, 0]), new Uint32Array([6291456, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 6291456]), new Uint32Array([0, 0, 0, 2220961, 2220961, 2220961, 2220961, 2144193, 2144193, 2159201, 2159201, 2159265, 2159265, 2144194, 2220993, 2220993]), new Uint32Array([2192641, 2235393, 2235425, 2152257, 2116609, 2235457, 2235489, 2200065, 2235521, 2235553, 2235585, 2212449, 2235617, 2235649, 2235681, 2235713]), new Uint32Array([2194049, 2194081, 2194113, 2194145, 2194177, 2194209, 2194241, 2194273, 2194305, 2194337, 2194369, 2194401, 2194433, 2194465, 2194497, 2194529]), new Uint32Array([2196673, 2208641, 2208673, 2208705, 2208737, 2208769, 2208801, 2208833, 2208865, 2208897, 2208929, 2208961, 2208993, 2209025, 2209057, 2209089]), new Uint32Array([2191681, 2191713, 2191745, 2191777, 2153281, 2191809, 2191841, 2191873, 2191905, 2191937, 2191969, 2192001, 2192033, 2192065, 2192097, 2192129]), new Uint32Array([2230946, 2231010, 2231074, 2231138, 2231202, 2231266, 2231330, 2231394, 2231458, 2231522, 2231586, 2231650, 2231714, 2231778, 2231842, 2231906]), new Uint32Array([14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2185953, 2185985, 2186017, 2186049, 2186081, 2186113, 2186145, 2186177]), new Uint32Array([2139811, 2139907, 2097284, 2105860, 2105988, 2106116, 2106244, 2097444, 2097604, 2097155, 10485778, 10486344, 2106372, 6291456, 0, 0]), new Uint32Array([2110051, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2172385, 6291456, 2172417, 6291456, 2172449, 6291456, 2172481, 6291456, 2172513, 6291456, 2172545, 6291456, 2172577, 6291456, 2172609, 6291456]), new Uint32Array([0, 0, 23068672, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2249345, 2249377, 2249409, 2249441, 2249473, 2249505, 2249537, 2249570, 2210209, 2249633, 2249665, 2249697, 2249729, 2249761, 2249793, 2216769]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2187169, 2187201, 2187233, 2187265, 2187297, 2187329, 2187361, 2187393, 2187425, 2187457, 2187489, 2187521, 2187553, 2187585, 2187617, 2187649]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([0, 0, 0, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456]), new Uint32Array([2182337, 6291456, 2182369, 6291456, 2182401, 6291456, 2182433, 6291456, 2182465, 6291456, 2182497, 6291456, 2182529, 6291456, 2182561, 6291456]), new Uint32Array([2138179, 2138275, 2138371, 2138467, 2134243, 2134435, 2138563, 2138659, 2138755, 2138851, 2138947, 2139043, 2138947, 2138755, 2139139, 2139235]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([0, 0, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2250498, 2250562, 2250625, 2250657, 2208321, 2250689, 2250721, 2250753, 2250785, 2250817, 2250849, 2218945, 2250881, 2250913, 2250945, 0]), new Uint32Array([2170369, 2105569, 2098305, 2108481, 2173249, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456]), new Uint32Array([2100897, 2111905, 2105473, 2105569, 2105601, 0, 2108193, 0, 0, 0, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481]), new Uint32Array([2100897, 2100897, 2105569, 2105569, 6291456, 2112289, 2149826, 6291456, 6291456, 2112481, 2112577, 2098177, 2098177, 2098177, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 2169953, 2169985, 6291456, 2170017, 6291456, 2170049, 2170081, 6291456, 2170113, 2170145, 2170177, 6291456, 6291456, 2170209, 2170241]), new Uint32Array([6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2220641, 2220641, 2220673, 2220673, 2220673, 2220673, 2220705, 2220705, 2220705, 2220705, 2220737, 2220737, 2220737, 2220737, 2220769, 2220769]), new Uint32Array([2127650, 2127746, 2127842, 2127938, 2128034, 2128130, 2128226, 2128322, 2128418, 2127523, 2127619, 2127715, 2127811, 2127907, 2128003, 2128099]), new Uint32Array([2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2173761, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177]), new Uint32Array([0, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2204705, 2204737, 2204769, 2204801, 2204833, 2204865, 2204897, 2204929, 2204961, 2204993, 2205025, 2205057, 2205089, 2205121, 2205153, 2205185]), new Uint32Array([2176385, 6291456, 2176417, 6291456, 2176449, 6291456, 2176481, 6291456, 2176513, 6291456, 2176545, 6291456, 2176577, 6291456, 2176609, 6291456]), new Uint32Array([2195521, 2195553, 2195585, 2195617, 2195649, 2195681, 2117857, 2195713, 2195745, 2195777, 2195809, 2195841, 2195873, 2195905, 2195937, 2195969]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456]), new Uint32Array([2173921, 2173953, 2173985, 2174017, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2233089, 2173697, 2173761, 2173793, 2174113]), new Uint32Array([2131586, 2132450, 2135970, 2135778, 2161602, 2136162, 2163650, 2161794, 2135586, 2163714, 2137186, 2131810, 2160290, 2135170, 2097506, 2159554]), new Uint32Array([2134145, 2097153, 2134241, 2105953, 2132705, 2130977, 2160065, 2131297, 2162049, 2133089, 2160577, 2133857, 0, 0, 0, 0]), new Uint32Array([2116513, 2116609, 2116705, 2116801, 2116897, 2116993, 2117089, 2117185, 2117281, 2117377, 2117473, 2117569, 2117665, 2117761, 2117857, 2117953]), new Uint32Array([2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 2100802, 2101154, 2101282, 2101410, 2101538, 2101666, 2101794]), new Uint32Array([2100289, 2098657, 2098049, 2200737, 2123489, 2123681, 2200769, 2098625, 2100321, 2098145, 2100449, 2098017, 2098753, 2098977, 2150241, 2150305]), new Uint32Array([6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 2109955, 6291456, 6291456, 0, 0, 0, 0]), new Uint32Array([18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 6291456, 0, 0]), new Uint32Array([2130979, 2131075, 2131075, 2131171, 2131267, 2131363, 2131459, 2131555, 2131651, 2131651, 2131747, 2131843, 2131939, 2132035, 2132131, 2132227]), new Uint32Array([0, 2177793, 6291456, 2177825, 6291456, 2177857, 6291456, 2177889, 6291456, 2177921, 6291456, 2177953, 6291456, 2177985, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2113345, 0, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289]), new Uint32Array([2136643, 2136739, 2136835, 2136931, 2137027, 2137123, 2137219, 2137315, 2137411, 2137507, 2137603, 2137699, 2137795, 2137891, 2137987, 2138083]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0]), new Uint32Array([2174433, 6291456, 2174465, 6291456, 2174497, 6291456, 2174529, 6291456, 2174561, 6291456, 2174593, 6291456, 2174625, 6291456, 2174657, 6291456]), new Uint32Array([0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441]), new Uint32Array([10496547, 10496643, 2105505, 2149698, 6291456, 10496739, 10496835, 2170273, 6291456, 2149762, 2105825, 2111713, 2111713, 2111713, 2111713, 2168673]), new Uint32Array([6291456, 2143490, 2143490, 2143490, 2171649, 6291456, 2171681, 2171713, 2171745, 6291456, 2171777, 6291456, 2171809, 6291456, 2171841, 6291456]), new Uint32Array([2159106, 2159106, 2159170, 2159170, 2159234, 2159234, 2159298, 2159298, 2159298, 2159362, 2159362, 2159362, 2106401, 2106401, 2106401, 2106401]), new Uint32Array([2105601, 2112289, 2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137]), new Uint32Array([2108417, 2181217, 2181249, 2181281, 2170433, 2170401, 2181313, 2181345, 2181377, 2181409, 2181441, 2181473, 2181505, 2181537, 2170529, 2181569]), new Uint32Array([2218433, 2245761, 2245793, 2245825, 2245857, 2245890, 2245953, 2245986, 2209665, 2246050, 2246113, 2246146, 2246210, 2246274, 2246337, 2246369]), new Uint32Array([2230754, 2230818, 2230882, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2184129, 6291456, 2184161, 6291456, 2184193, 6291456, 6291456, 6291456, 6291456, 6291456, 2146818, 2183361, 6291456, 6291456, 2142978, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2135170, 2097506, 2130691, 2130787, 2130883, 2163970, 2164034, 2164098, 2164162, 2164226, 2164290, 2164354, 2164418, 2164482, 2164546, 2133122]), new Uint32Array([2108515, 2108611, 2100740, 2108707, 2108803, 2108899, 2108995, 2109091, 2109187, 2109283, 2109379, 2109475, 2109571, 2109667, 2109763, 2100738]), new Uint32Array([2102788, 2102916, 2103044, 2120515, 2103172, 2120611, 2120707, 2098373, 2103300, 2120803, 2120899, 2120995, 2103428, 2103556, 2121091, 2121187]), new Uint32Array([2158082, 2158146, 0, 2158210, 2158274, 0, 2158338, 2158402, 2158466, 2129922, 2158530, 2158594, 2158658, 2158722, 2158786, 2158850]), new Uint32Array([10499619, 10499715, 10499811, 10499907, 10500003, 10500099, 10500195, 10500291, 10500387, 10500483, 10500579, 10500675, 10500771, 10500867, 10500963, 10501059]), new Uint32Array([2239585, 2239618, 2239681, 2239713, 0, 2191969, 2239745, 2239777, 2192033, 2239809, 2239841, 2239874, 2239937, 2239970, 2240033, 2240065]), new Uint32Array([2252705, 2252738, 2252801, 2252833, 2252865, 2252897, 2252930, 2252994, 2253057, 2253089, 2253121, 2253154, 2253217, 2253250, 2219361, 2219361]), new Uint32Array([2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 10538050, 10538114, 10538178, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2226402, 2226466, 2226530, 2226594, 2226658, 2226722, 2226786, 2226850, 2226914, 2226978, 2227042, 2227106, 2227170, 2227234, 2227298, 2227362]), new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 2144066, 2144130, 2144194, 2144258, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2124674, 2124770, 2123875, 2123971, 2124067, 2124163, 2124259, 2124355, 2124451, 2124547, 2124643, 2124739, 2124835, 2124931, 2125027, 2125123]), new Uint32Array([2168065, 6291456, 2168097, 6291456, 2168129, 6291456, 2168161, 6291456, 2168193, 6291456, 2168225, 6291456, 2168257, 6291456, 2168289, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0]), new Uint32Array([23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 2100610, 2100611, 6291456, 2107842, 2107843, 6291456, 6291456, 6291456, 6291456, 10537922, 6291456, 10537986, 6291456]), new Uint32Array([2174849, 2174881, 2174913, 2174945, 2174977, 2175009, 2175041, 2175073, 2175105, 2175137, 2175169, 2175201, 2175233, 2175265, 2175297, 2175329]), new Uint32Array([2154562, 2154626, 2154690, 2154754, 2141858, 2154818, 2154882, 2127298, 2154946, 2127298, 2155010, 2155074, 2155138, 2155202, 2155266, 2155202]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 0]), new Uint32Array([2200641, 2150786, 2150850, 2150914, 2150978, 2151042, 2106562, 2151106, 2150562, 2151170, 2151234, 2151298, 2151362, 2151426, 2151490, 2151554]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456]), new Uint32Array([2220289, 2220289, 2220321, 2220321, 2220321, 2220321, 2220353, 2220353, 2220353, 2220353, 2220385, 2220385, 2220385, 2220385, 2220417, 2220417]), new Uint32Array([2155330, 2155394, 0, 2155458, 2155522, 2155586, 2105732, 0, 2155650, 2155714, 2155778, 2125314, 2155842, 2155906, 2126274, 2155970]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0]), new Uint32Array([2097729, 2106017, 2106017, 2106017, 2106017, 2131297, 2131297, 2131297, 2131297, 2106081, 2106081, 2162049, 2162049, 2105953, 2105953, 2162337]), new Uint32Array([2097185, 2097697, 2097697, 2097697, 2097697, 2135777, 2135777, 2135777, 2135777, 2097377, 2097377, 2097377, 2097377, 2097601, 2097601, 2097217]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23068672]), new Uint32Array([2139331, 2139427, 2139523, 2139043, 2133571, 2132611, 2139619, 2139715, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2174113, 2174145, 2100897, 2098177, 2108289, 2100865, 2173601, 2173633, 2173985, 2174113, 2174145, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 18923778, 23068672, 23068672, 23068672, 23068672, 18923842, 23068672, 23068672, 23068672, 23068672, 18923906, 23068672, 23068672, 23068672]), new Uint32Array([2134145, 2097153, 2134241, 0, 2132705, 2130977, 2160065, 2131297, 0, 2133089, 0, 2133857, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2177537, 6291456, 2177569, 6291456, 2177601, 6291456, 2177633, 6291456, 2177665, 6291456, 2177697, 6291456, 2177729, 6291456, 2177761, 6291456]), new Uint32Array([2212481, 2212513, 2212545, 2212577, 2197121, 2212609, 2212641, 2212673, 2212705, 2212737, 2212769, 2212801, 2212833, 2212865, 2212897, 2212929]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2098241, 2108353, 2170209, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 6291456, 2108193, 2172417, 2112481, 2098177]), new Uint32Array([6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456])],
            r = new Uint16Array([616, 616, 565, 147, 161, 411, 330, 2, 131, 131, 328, 454, 241, 408, 86, 86, 696, 113, 285, 350, 325, 301, 473, 214, 639, 232, 447, 64, 369, 598, 124, 672, 567, 223, 621, 154, 107, 86, 86, 86, 86, 86, 86, 505, 86, 68, 634, 86, 218, 218, 218, 218, 486, 218, 218, 513, 188, 608, 216, 86, 217, 463, 668, 85, 700, 360, 184, 86, 86, 86, 647, 402, 153, 10, 346, 718, 662, 260, 145, 298, 117, 1, 443, 342, 138, 54, 563, 86, 240, 572, 218, 70, 387, 86, 118, 460, 641, 602, 86, 86, 306, 218, 86, 692, 86, 86, 86, 86, 86, 162, 707, 86, 458, 26, 86, 218, 638, 86, 86, 86, 86, 86, 65, 449, 86, 86, 306, 183, 86, 58, 391, 667, 86, 157, 131, 131, 131, 131, 86, 433, 131, 406, 31, 218, 247, 86, 86, 693, 218, 581, 351, 86, 438, 295, 69, 462, 45, 126, 173, 650, 14, 295, 69, 97, 168, 187, 641, 78, 523, 390, 69, 108, 287, 664, 173, 219, 83, 295, 69, 108, 431, 426, 173, 694, 412, 115, 628, 52, 257, 398, 641, 118, 501, 121, 69, 579, 151, 423, 173, 620, 464, 121, 69, 382, 151, 476, 173, 27, 53, 121, 86, 594, 578, 226, 173, 86, 632, 130, 86, 96, 228, 268, 641, 622, 563, 86, 86, 21, 148, 650, 131, 131, 321, 43, 144, 343, 381, 531, 131, 131, 178, 20, 86, 399, 156, 375, 164, 541, 30, 60, 715, 198, 92, 118, 131, 131, 86, 86, 306, 407, 86, 280, 457, 196, 488, 358, 131, 131, 244, 86, 86, 143, 86, 86, 86, 86, 86, 667, 563, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 336, 363, 86, 86, 336, 86, 86, 380, 678, 67, 86, 86, 86, 678, 86, 86, 86, 512, 86, 307, 86, 708, 86, 86, 86, 86, 86, 528, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 563, 307, 86, 86, 86, 86, 86, 104, 450, 337, 86, 720, 86, 32, 450, 397, 86, 86, 86, 587, 218, 558, 708, 708, 293, 708, 86, 86, 86, 86, 86, 694, 205, 86, 8, 86, 86, 86, 86, 549, 86, 667, 697, 697, 679, 86, 458, 460, 86, 86, 650, 86, 708, 543, 86, 86, 86, 245, 86, 86, 86, 140, 218, 127, 708, 708, 458, 197, 131, 131, 131, 131, 500, 86, 86, 483, 251, 86, 306, 510, 515, 86, 722, 86, 86, 86, 65, 201, 86, 86, 483, 580, 470, 86, 86, 86, 368, 131, 131, 131, 694, 114, 110, 555, 86, 86, 123, 721, 163, 142, 713, 418, 86, 317, 675, 209, 218, 218, 218, 371, 545, 592, 629, 490, 603, 199, 46, 320, 525, 680, 310, 279, 388, 111, 42, 252, 593, 607, 235, 617, 410, 377, 50, 548, 135, 356, 17, 520, 189, 116, 392, 600, 349, 332, 482, 699, 690, 535, 119, 106, 451, 71, 152, 667, 131, 218, 218, 265, 671, 637, 492, 504, 533, 683, 269, 269, 658, 86, 86, 86, 86, 86, 86, 86, 86, 86, 491, 619, 86, 86, 6, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 229, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 667, 86, 86, 171, 131, 118, 131, 656, 206, 234, 571, 89, 334, 670, 246, 311, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 534, 86, 86, 86, 86, 86, 86, 82, 86, 86, 86, 86, 86, 430, 86, 86, 86, 86, 86, 86, 86, 86, 86, 599, 86, 324, 86, 470, 69, 640, 264, 131, 626, 101, 174, 86, 86, 667, 233, 105, 73, 374, 394, 221, 204, 84, 28, 326, 86, 86, 471, 86, 86, 86, 109, 573, 86, 171, 200, 200, 200, 200, 218, 218, 86, 86, 86, 86, 460, 131, 131, 131, 86, 506, 86, 86, 86, 86, 86, 220, 404, 34, 614, 47, 442, 305, 25, 612, 338, 601, 648, 7, 344, 255, 131, 131, 51, 86, 312, 507, 563, 86, 86, 86, 86, 588, 86, 86, 86, 86, 86, 530, 511, 86, 458, 3, 435, 384, 556, 522, 230, 527, 86, 118, 86, 86, 717, 86, 137, 273, 79, 181, 484, 23, 93, 112, 655, 249, 417, 703, 370, 87, 98, 313, 684, 585, 155, 465, 596, 481, 695, 18, 416, 428, 61, 701, 706, 282, 643, 495, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 549, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 549, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 307, 86, 86, 86, 171, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 650, 131, 422, 542, 420, 263, 24, 172, 86, 86, 86, 86, 86, 566, 86, 86, 132, 540, 395, 353, 494, 519, 19, 485, 284, 472, 131, 131, 131, 16, 714, 86, 211, 708, 86, 86, 86, 694, 698, 86, 86, 483, 704, 708, 218, 272, 86, 86, 120, 86, 159, 478, 86, 307, 247, 86, 86, 663, 597, 459, 627, 667, 86, 86, 277, 455, 39, 302, 86, 250, 86, 86, 86, 271, 99, 452, 306, 281, 329, 400, 200, 86, 86, 362, 549, 352, 646, 461, 323, 586, 86, 86, 4, 708, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 717, 86, 518, 86, 86, 650, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 125, 554, 480, 300, 613, 72, 333, 288, 561, 544, 604, 48, 719, 91, 169, 176, 590, 224, 76, 191, 29, 559, 560, 231, 537, 166, 477, 538, 256, 437, 131, 131, 469, 167, 40, 0, 685, 266, 441, 705, 239, 642, 475, 568, 640, 610, 299, 673, 517, 318, 385, 22, 202, 180, 179, 359, 424, 215, 90, 66, 521, 653, 467, 682, 453, 409, 479, 88, 131, 661, 35, 303, 15, 262, 666, 630, 712, 131, 131, 618, 659, 175, 218, 195, 347, 193, 227, 261, 150, 165, 709, 546, 294, 569, 710, 270, 413, 376, 524, 55, 242, 38, 419, 529, 170, 657, 3, 304, 122, 379, 278, 131, 651, 86, 67, 576, 458, 458, 131, 131, 86, 86, 86, 86, 86, 86, 86, 118, 309, 86, 86, 547, 86, 86, 86, 86, 667, 650, 664, 131, 131, 86, 86, 56, 131, 131, 131, 131, 131, 131, 131, 131, 86, 307, 86, 86, 86, 664, 238, 650, 86, 86, 717, 86, 118, 86, 86, 315, 86, 59, 86, 86, 574, 549, 131, 131, 340, 57, 436, 86, 86, 86, 86, 86, 86, 458, 708, 499, 691, 62, 86, 650, 86, 86, 694, 86, 86, 86, 319, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 171, 86, 549, 694, 131, 131, 131, 131, 131, 131, 131, 131, 131, 77, 86, 86, 139, 86, 502, 86, 86, 86, 667, 595, 131, 131, 131, 86, 12, 86, 13, 86, 609, 131, 131, 131, 131, 86, 86, 86, 625, 86, 669, 86, 86, 182, 129, 86, 5, 694, 104, 86, 86, 86, 86, 131, 131, 86, 86, 386, 171, 86, 86, 86, 345, 86, 324, 86, 589, 86, 213, 36, 131, 131, 131, 131, 131, 86, 86, 86, 86, 104, 131, 131, 131, 141, 290, 80, 677, 86, 86, 86, 267, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 667, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 515, 86, 86, 33, 136, 669, 86, 711, 515, 86, 86, 550, 640, 86, 104, 708, 515, 86, 159, 372, 717, 86, 86, 444, 515, 86, 86, 663, 37, 86, 563, 460, 86, 390, 624, 702, 131, 131, 131, 131, 389, 59, 708, 86, 86, 341, 208, 708, 635, 295, 69, 108, 431, 508, 100, 190, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 649, 516, 660, 131, 131, 86, 86, 86, 218, 631, 708, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 341, 575, 238, 514, 131, 131, 86, 86, 86, 218, 291, 708, 307, 131, 86, 86, 306, 367, 708, 131, 131, 131, 86, 378, 697, 86, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 615, 253, 86, 86, 86, 292, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 104, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 69, 86, 341, 553, 549, 86, 307, 86, 86, 645, 275, 455, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 708, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 667, 460, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 717, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 667, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 171, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 104, 86, 667, 459, 131, 131, 131, 131, 131, 131, 86, 458, 225, 86, 86, 86, 516, 549, 11, 390, 405, 86, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 460, 44, 218, 197, 711, 515, 131, 131, 131, 131, 664, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 307, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 308, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 640, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 118, 307, 104, 286, 591, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 549, 86, 86, 681, 86, 86, 75, 185, 314, 582, 86, 358, 496, 474, 86, 104, 131, 86, 86, 86, 86, 146, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 171, 86, 640, 131, 131, 131, 131, 131, 131, 131, 131, 246, 503, 689, 339, 674, 81, 258, 415, 439, 128, 562, 366, 414, 246, 503, 689, 583, 222, 557, 316, 636, 665, 186, 355, 95, 670, 246, 503, 689, 339, 674, 557, 258, 415, 439, 186, 355, 95, 670, 246, 503, 689, 446, 644, 536, 652, 331, 532, 335, 440, 274, 421, 297, 570, 74, 425, 364, 425, 606, 552, 403, 509, 134, 365, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 218, 218, 218, 498, 218, 218, 577, 627, 551, 497, 572, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 553, 354, 236, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 296, 455, 131, 131, 456, 243, 103, 86, 41, 459, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 9, 276, 158, 716, 393, 564, 383, 489, 401, 654, 210, 654, 131, 131, 131, 640, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 650, 86, 86, 86, 86, 86, 86, 717, 667, 563, 563, 563, 86, 549, 102, 686, 133, 246, 605, 86, 448, 86, 86, 207, 307, 131, 131, 131, 641, 86, 177, 611, 445, 373, 194, 584, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 308, 307, 171, 86, 86, 86, 86, 86, 86, 86, 717, 86, 86, 86, 86, 86, 460, 131, 131, 650, 86, 86, 86, 694, 708, 86, 86, 694, 86, 458, 131, 131, 131, 131, 131, 131, 667, 694, 289, 650, 667, 131, 131, 86, 640, 131, 131, 664, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 171, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 460, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 458, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 640, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 466, 203, 149, 429, 94, 432, 160, 687, 539, 63, 237, 283, 192, 248, 348, 259, 427, 526, 396, 676, 254, 468, 487, 212, 327, 623, 49, 633, 322, 493, 434, 688, 357, 361, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131]);
        return {
          mapStr: "صلى الله عليه وسلمجل جلالهキロメートルrad∕s2エスクードキログラムキロワットグラムトンクルゼイロサンチームパーセントピアストルファラッドブッシェルヘクタールマンションミリバールレントゲン′′′′1⁄10viii(10)(11)(12)(13)(14)(15)(16)(17)(18)(19)(20)∫∫∫∫(오전)(오후)アパートアルファアンペアイニングエーカーカラットカロリーキュリーギルダークローネサイクルシリングバーレルフィートポイントマイクロミクロンメガトンリットルルーブル株式会社kcalm∕s2c∕kgاكبرمحمدصلعمرسولریال1⁄41⁄23⁄4 ̈́ྲཱྀླཱྀ ̈͂ ̓̀ ̓́ ̓͂ ̔̀ ̔́ ̔͂ ̈̀‵‵‵a/ca/sc/oc/utelfax1⁄71⁄91⁄32⁄31⁄52⁄53⁄54⁄51⁄65⁄61⁄83⁄85⁄87⁄8xii0⁄3∮∮∮(1)(2)(3)(4)(5)(6)(7)(8)(9)(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)(n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)::====(ᄀ)(ᄂ)(ᄃ)(ᄅ)(ᄆ)(ᄇ)(ᄉ)(ᄋ)(ᄌ)(ᄎ)(ᄏ)(ᄐ)(ᄑ)(ᄒ)(가)(나)(다)(라)(마)(바)(사)(아)(자)(차)(카)(타)(파)(하)(주)(一)(二)(三)(四)(五)(六)(七)(八)(九)(十)(月)(火)(水)(木)(金)(土)(日)(株)(有)(社)(名)(特)(財)(祝)(労)(代)(呼)(学)(監)(企)(資)(協)(祭)(休)(自)(至)pte10月11月12月ergltdアールインチウォンオンスオームカイリガロンガンマギニーケースコルナコーポセンチダースノットハイツパーツピクルフランペニヒヘルツペンスページベータボルトポンドホールホーンマイルマッハマルクヤードヤールユアンルピー10点11点12点13点14点15点16点17点18点19点20点21点22点23点24点hpabardm2dm3khzmhzghzthzmm2cm2km2mm3cm3km3kpampagpalogmilmolppmv∕ma∕m10日11日12日13日14日15日16日17日18日19日20日21日22日23日24日25日26日27日28日29日30日31日galffifflשּׁשּׂ ٌّ ٍّ َّ ُّ ِّ ّٰـَّـُّـِّتجمتحجتحمتخمتمجتمحتمخجمححميحمىسحجسجحسجىسمحسمجسممصححصممشحمشجيشمخشممضحىضخمطمحطممطميعجمعممعمىغممغميغمىفخمقمحقمملحملحيلحىلججلخملمحمحجمحيمجحمجممخممجخهمجهممنحمنحىنجمنجىنمينمىيممبخيتجيتجىتخيتخىتميتمىجميجحىجمىسخىصحيشحيضحيلجيلمييحييجييميمميقمينحيعميكمينجحمخيلجمكممجحيحجيمجيفميبحيسخينجيصلےقلے𝅘𝅥𝅮𝅘𝅥𝅯𝅘𝅥𝅰𝅘𝅥𝅱𝅘𝅥𝅲𝆹𝅥𝅮𝆺𝅥𝅮𝆹𝅥𝅯𝆺𝅥𝅯〔s〕ppv〔本〕〔三〕〔二〕〔安〕〔点〕〔打〕〔盗〕〔勝〕〔敗〕 ̄ ́ ̧ssi̇ijl·ʼndžljnjdz ̆ ̇ ̊ ̨ ̃ ̋ ιեւاٴوٴۇٴيٴक़ख़ग़ज़ड़ढ़फ़य़ড়ঢ়য়ਲ਼ਸ਼ਖ਼ਗ਼ਜ਼ਫ਼ଡ଼ଢ଼ําໍາຫນຫມགྷཌྷདྷབྷཛྷཀྵཱཱིུྲྀླྀྒྷྜྷྡྷྦྷྫྷྐྵaʾἀιἁιἂιἃιἄιἅιἆιἇιἠιἡιἢιἣιἤιἥιἦιἧιὠιὡιὢιὣιὤιὥιὦιὧιὰιαιάιᾶι ͂ὴιηιήιῆιὼιωιώιῶι ̳!! ̅???!!?rs°c°fnosmtmivix⫝̸ ゙ ゚よりコト333435참고주의363738394042444546474849503月4月5月6月7月8月9月hgevギガデシドルナノピコビルペソホンリラレムdaauovpciu平成昭和大正明治naμakakbmbgbpfnfμfμgmgμlmldlklfmnmμmpsnsμsmsnvμvkvpwnwμwmwkwkωmωbqcccddbgyhainkkktlnlxphprsrsvwbstմնմեմիվնմխיִײַשׁשׂאַאָאּבּגּדּהּוּזּטּיּךּכּלּמּנּסּףּפּצּקּרּתּוֹבֿכֿפֿאלئائەئوئۇئۆئۈئېئىئجئحئمئيبجبمبىبيتىتيثجثمثىثيخحضجضمطحظمغجفجفحفىفيقحقىقيكاكجكحكخكلكىكينخنىنيهجهىهييىذٰرٰىٰئرئزئنبزبنترتزتنثرثزثنمانرنزننيريزئخئهبهتهصخنههٰثهسهشهطىطيعىعيغىغيسىسيشىشيصىصيضىضيشخشرسرصرضراً ًـًـّ ْـْلآلألإ𝅗𝅥0,1,2,3,4,5,6,7,8,9,wzhvsdwcmcmddjほかココàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþāăąćĉċčďđēĕėęěĝğġģĥħĩīĭįĵķĺļľłńņňŋōŏőœŕŗřśŝşšţťŧũūŭůűųŵŷÿźżɓƃƅɔƈɖɗƌǝəɛƒɠɣɩɨƙɯɲɵơƣƥʀƨʃƭʈưʊʋƴƶʒƹƽǎǐǒǔǖǘǚǜǟǡǣǥǧǩǫǭǯǵƕƿǹǻǽǿȁȃȅȇȉȋȍȏȑȓȕȗșțȝȟƞȣȥȧȩȫȭȯȱȳⱥȼƚⱦɂƀʉʌɇɉɋɍɏɦɹɻʁʕͱͳʹͷ;ϳέίόύβγδεζθκλνξοπρστυφχψϊϋϗϙϛϝϟϡϣϥϧϩϫϭϯϸϻͻͼͽѐёђѓєѕіїјљњћќѝўџабвгдежзийклмнопрстуфхцчшщъыьэюяѡѣѥѧѩѫѭѯѱѳѵѷѹѻѽѿҁҋҍҏґғҕҗҙқҝҟҡңҥҧҩҫҭүұҳҵҷҹһҽҿӂӄӆӈӊӌӎӑӓӕӗәӛӝӟӡӣӥӧөӫӭӯӱӳӵӷӹӻӽӿԁԃԅԇԉԋԍԏԑԓԕԗԙԛԝԟԡԣԥԧԩԫԭԯաբգդզէըթժլծկհձղճյշոչպջռստրցփքօֆ་ⴧⴭნᏰᏱᏲᏳᏴᏵꙋɐɑᴂɜᴖᴗᴝᴥɒɕɟɡɥɪᵻʝɭᶅʟɱɰɳɴɸʂƫᴜʐʑḁḃḅḇḉḋḍḏḑḓḕḗḙḛḝḟḡḣḥḧḩḫḭḯḱḳḵḷḹḻḽḿṁṃṅṇṉṋṍṏṑṓṕṗṙṛṝṟṡṣṥṧṩṫṭṯṱṳṵṷṹṻṽṿẁẃẅẇẉẋẍẏẑẓẕạảấầẩẫậắằẳẵặẹẻẽếềểễệỉịọỏốồổỗộớờởỡợụủứừửữựỳỵỷỹỻỽỿἐἑἒἓἔἕἰἱἲἳἴἵἶἷὀὁὂὃὄὅὑὓὕὗᾰᾱὲΐῐῑὶΰῠῡὺῥ`ὸ‐+−∑〈〉ⰰⰱⰲⰳⰴⰵⰶⰷⰸⰹⰺⰻⰼⰽⰾⰿⱀⱁⱂⱃⱄⱅⱆⱇⱈⱉⱊⱋⱌⱍⱎⱏⱐⱑⱒⱓⱔⱕⱖⱗⱘⱙⱚⱛⱜⱝⱞⱡɫᵽɽⱨⱪⱬⱳⱶȿɀⲁⲃⲅⲇⲉⲋⲍⲏⲑⲓⲕⲗⲙⲛⲝⲟⲡⲣⲥⲧⲩⲫⲭⲯⲱⲳⲵⲷⲹⲻⲽⲿⳁⳃⳅⳇⳉⳋⳍⳏⳑⳓⳕⳗⳙⳛⳝⳟⳡⳣⳬⳮⳳⵡ母龟丨丶丿乙亅亠人儿入冂冖冫几凵刀力勹匕匚匸卜卩厂厶又口囗士夂夊夕女子宀寸小尢尸屮山巛工己巾干幺广廴廾弋弓彐彡彳心戈戶手支攴文斗斤方无曰欠止歹殳毋比毛氏气爪父爻爿片牙牛犬玄玉瓜瓦甘生用田疋疒癶白皮皿目矛矢石示禸禾穴立竹米糸缶网羊羽老而耒耳聿肉臣臼舌舛舟艮色艸虍虫血行衣襾見角言谷豆豕豸貝赤走足身車辛辰辵邑酉釆里長門阜隶隹雨靑非面革韋韭音頁風飛食首香馬骨高髟鬥鬯鬲鬼魚鳥鹵鹿麥麻黃黍黑黹黽鼎鼓鼠鼻齊齒龍龜龠.〒卄卅ᄁᆪᆬᆭᄄᆰᆱᆲᆳᆴᆵᄚᄈᄡᄊ짜ᅢᅣᅤᅥᅦᅧᅨᅩᅪᅫᅬᅭᅮᅯᅰᅱᅲᅳᅴᅵᄔᄕᇇᇈᇌᇎᇓᇗᇙᄜᇝᇟᄝᄞᄠᄢᄣᄧᄩᄫᄬᄭᄮᄯᄲᄶᅀᅇᅌᇱᇲᅗᅘᅙᆄᆅᆈᆑᆒᆔᆞᆡ上中下甲丙丁天地問幼箏우秘男適優印注項写左右医宗夜テヌモヨヰヱヲꙁꙃꙅꙇꙉꙍꙏꙑꙓꙕꙗꙙꙛꙝꙟꙡꙣꙥꙧꙩꙫꙭꚁꚃꚅꚇꚉꚋꚍꚏꚑꚓꚕꚗꚙꚛꜣꜥꜧꜩꜫꜭꜯꜳꜵꜷꜹꜻꜽꜿꝁꝃꝅꝇꝉꝋꝍꝏꝑꝓꝕꝗꝙꝛꝝꝟꝡꝣꝥꝧꝩꝫꝭꝯꝺꝼᵹꝿꞁꞃꞅꞇꞌꞑꞓꞗꞙꞛꞝꞟꞡꞣꞥꞧꞩɬʞʇꭓꞵꞷꬷꭒᎠᎡᎢᎣᎤᎥᎦᎧᎨᎩᎪᎫᎬᎭᎮᎯᎰᎱᎲᎳᎴᎵᎶᎷᎸᎹᎺᎻᎼᎽᎾᎿᏀᏁᏂᏃᏄᏅᏆᏇᏈᏉᏊᏋᏌᏍᏎᏏᏐᏑᏒᏓᏔᏕᏖᏗᏘᏙᏚᏛᏜᏝᏞᏟᏠᏡᏢᏣᏤᏥᏦᏧᏨᏩᏪᏫᏬᏭᏮᏯ豈更賈滑串句契喇奈懶癩羅蘿螺裸邏樂洛烙珞落酪駱亂卵欄爛蘭鸞嵐濫藍襤拉臘蠟廊朗浪狼郎來冷勞擄櫓爐盧蘆虜路露魯鷺碌祿綠菉錄論壟弄籠聾牢磊賂雷壘屢樓淚漏累縷陋勒肋凜凌稜綾菱陵讀拏諾丹寧怒率異北磻便復不泌數索參塞省葉說殺沈拾若掠略亮兩凉梁糧良諒量勵呂廬旅濾礪閭驪麗黎曆歷轢年憐戀撚漣煉璉秊練聯輦蓮連鍊列劣咽烈裂廉念捻殮簾獵令囹嶺怜玲瑩羚聆鈴零靈領例禮醴隸惡了僚寮尿料燎療蓼遼暈阮劉杻柳流溜琉留硫紐類戮陸倫崙淪輪律慄栗隆利吏履易李梨泥理痢罹裏裡離匿溺吝燐璘藺隣鱗麟林淋臨笠粒狀炙識什茶刺切度拓糖宅洞暴輻降廓兀嗀塚晴凞猪益礼神祥福靖精蘒諸逸都飯飼館鶴郞隷侮僧免勉勤卑喝嘆器塀墨層悔慨憎懲敏既暑梅海渚漢煮爫琢碑祉祈祐祖禍禎穀突節縉繁署者臭艹著褐視謁謹賓贈辶難響頻恵𤋮舘並况全侀充冀勇勺啕喙嗢墳奄奔婢嬨廒廙彩徭惘慎愈慠戴揄搜摒敖望杖滛滋瀞瞧爵犯瑱甆画瘝瘟盛直睊着磌窱类絛缾荒華蝹襁覆調請諭變輸遲醙鉶陼韛頋鬒𢡊𢡄𣏕㮝䀘䀹𥉉𥳐𧻓齃龎עםٱٻپڀٺٿٹڤڦڄڃچڇڍڌڎڈژڑکگڳڱںڻۀہھۓڭۋۅۉ、〖〗—–_{}【】《》「」『』[]#&*-<>\\$%@ءؤة\"'^|~⦅⦆・ゥャ¢£¬¦¥₩│←↑→↓■○𐐨𐐩𐐪𐐫𐐬𐐭𐐮𐐯𐐰𐐱𐐲𐐳𐐴𐐵𐐶𐐷𐐸𐐹𐐺𐐻𐐼𐐽𐐾𐐿𐑀𐑁𐑂𐑃𐑄𐑅𐑆𐑇𐑈𐑉𐑊𐑋𐑌𐑍𐑎𐑏𐓘𐓙𐓚𐓛𐓜𐓝𐓞𐓟𐓠𐓡𐓢𐓣𐓤𐓥𐓦𐓧𐓨𐓩𐓪𐓫𐓬𐓭𐓮𐓯𐓰𐓱𐓲𐓳𐓴𐓵𐓶𐓷𐓸𐓹𐓺𐓻𐳀𐳁𐳂𐳃𐳄𐳅𐳆𐳇𐳈𐳉𐳊𐳋𐳌𐳍𐳎𐳏𐳐𐳑𐳒𐳓𐳔𐳕𐳖𐳗𐳘𐳙𐳚𐳛𐳜𐳝𐳞𐳟𐳠𐳡𐳢𐳣𐳤𐳥𐳦𐳧𐳨𐳩𐳪𐳫𐳬𐳭𐳮𐳯𐳰𐳱𐳲𑣀𑣁𑣂𑣃𑣄𑣅𑣆𑣇𑣈𑣉𑣊𑣋𑣌𑣍𑣎𑣏𑣐𑣑𑣒𑣓𑣔𑣕𑣖𑣗𑣘𑣙𑣚𑣛𑣜𑣝𑣞𑣟ıȷ∇∂𞤢𞤣𞤤𞤥𞤦𞤧𞤨𞤩𞤪𞤫𞤬𞤭𞤮𞤯𞤰𞤱𞤲𞤳𞤴𞤵𞤶𞤷𞤸𞤹𞤺𞤻𞤼𞤽𞤾𞤿𞥀𞥁𞥂𞥃ٮڡٯ字双多解交映無前後再新初終販声吹演投捕遊指禁空合満申割営配得可丽丸乁𠄢你侻倂偺備像㒞𠘺兔兤具𠔜㒹內𠕋冗冤仌冬𩇟刃㓟刻剆剷㔕包匆卉博即卽卿𠨬灰及叟𠭣叫叱吆咞吸呈周咢哶唐啓啣善喫喳嗂圖圗噑噴壮城埴堍型堲報墬𡓤売壷夆夢奢𡚨𡛪姬娛娧姘婦㛮嬈嬾𡧈寃寘寳𡬘寿将㞁屠峀岍𡷤嵃𡷦嵮嵫嵼巡巢㠯巽帨帽幩㡢𢆃㡼庰庳庶𪎒𢌱舁弢㣇𣊸𦇚形彫㣣徚忍志忹悁㤺㤜𢛔惇慈慌慺憲憤憯懞戛扝抱拔捐𢬌挽拼捨掃揤𢯱搢揅掩㨮摩摾撝摷㩬敬𣀊旣書晉㬙㬈㫤冒冕最暜肭䏙朡杞杓𣏃㭉柺枅桒𣑭梎栟椔楂榣槪檨𣚣櫛㰘次𣢧歔㱎歲殟殻𣪍𡴋𣫺汎𣲼沿泍汧洖派浩浸涅𣴞洴港湮㴳滇𣻑淹潮𣽞𣾎濆瀹瀛㶖灊災灷炭𠔥煅𤉣熜爨牐𤘈犀犕𤜵𤠔獺王㺬玥㺸瑇瑜璅瓊㼛甤𤰶甾𤲒𢆟瘐𤾡𤾸𥁄㿼䀈𥃳𥃲𥄙𥄳眞真瞋䁆䂖𥐝硎䃣𥘦𥚚𥛅秫䄯穊穏𥥼𥪧䈂𥮫篆築䈧𥲀糒䊠糨糣紀𥾆絣䌁緇縂繅䌴𦈨𦉇䍙𦋙罺𦌾羕翺𦓚𦔣聠𦖨聰𣍟䏕育脃䐋脾媵𦞧𦞵𣎓𣎜舄辞䑫芑芋芝劳花芳芽苦𦬼茝荣莭茣莽菧荓菊菌菜𦰶𦵫𦳕䔫蓱蓳蔖𧏊蕤𦼬䕝䕡𦾱𧃒䕫虐虧虩蚩蚈蜎蛢蜨蝫螆蟡蠁䗹衠𧙧裗裞䘵裺㒻𧢮𧥦䚾䛇誠𧲨貫賁贛起𧼯𠠄跋趼跰𠣞軔𨗒𨗭邔郱鄑𨜮鄛鈸鋗鋘鉼鏹鐕𨯺開䦕閷𨵷䧦雃嶲霣𩅅𩈚䩮䩶韠𩐊䪲𩒖頩𩖶飢䬳餩馧駂駾䯎𩬰鱀鳽䳎䳭鵧𪃎䳸𪄅𪈎𪊑䵖黾鼅鼏鼖𪘀",
          mapChar: function mapChar(e) {
            return 196608 <= e ? 917760 <= e && e <= 917999 ? 18874368 : 0 : t[r[e >> 4]][15 & e];
          }
        };
      }, "function" == typeof define && define.amd ? define([], function () {
        return i();
      }) : "object" === (void 0 === r ? "undefined" : _typeof(r)) ? t.exports = i() : n.uts46_map = i();
    }, {}],
    377: [function (e, t, r) {
      var n, i;
      n = this, i = function i(p, b) {
        function i(e, t, r) {
          for (var n = [], i = p.ucs2.decode(e), o = 0; o < i.length; o++) {
            var a = i[o],
                s = p.ucs2.encode([i[o]]),
                u = b.mapChar(a),
                c = u >> 23,
                f = u >> 21 & 3,
                h = u >> 5 & 65535,
                d = 31 & u,
                l = b.mapStr.substr(h, d);
            if (0 === f || t && 1 & c) throw new Error("Illegal char " + s);
            1 === f ? n.push(l) : 2 === f ? n.push(r ? l : s) : 3 === f && n.push(s);
          }

          return n.join("").normalize("NFC");
        }

        function c(e, t, r) {
          void 0 === r && (r = !1);
          var n = i(e, r, t).split(".");
          return (n = n.map(function (e) {
            return e.startsWith("xn--") ? o(e = p.decode(e.substring(4)), r, !1) : o(e, r, t), e;
          })).join(".");
        }

        function o(e, t, r) {
          if ("-" === e[2] && "-" === e[3]) throw new Error("Failed to validate " + e);
          if (e.startsWith("-") || e.endsWith("-")) throw new Error("Failed to validate " + e);
          if (e.includes(".")) throw new Error("Failed to validate " + e);
          if (i(e, t, r) !== e) throw new Error("Failed to validate " + e);
          var n = e.codePointAt(0);
          if (b.mapChar(n) & 2 << 23) throw new Error("Label contains illegal character: " + n);
        }

        return {
          toUnicode: function toUnicode(e, t) {
            return void 0 === t && (t = {}), c(e, !1, "useStd3ASCII" in t && t.useStd3ASCII);
          },
          toAscii: function toAscii(e, t) {
            void 0 === t && (t = {});
            var r,
                n = !("transitional" in t) || t.transitional,
                i = "useStd3ASCII" in t && t.useStd3ASCII,
                o = "verifyDnsLength" in t && t.verifyDnsLength,
                a = c(e, n, i).split(".").map(p.toASCII),
                s = a.join(".");

            if (o) {
              if (s.length < 1 || 253 < s.length) throw new Error("DNS name has wrong length: " + s);

              for (r = 0; r < a.length; r++) {
                var u = a[r];
                if (u.length < 1 || 63 < u.length) throw new Error("DNS label has wrong length: " + u);
              }
            }

            return s;
          }
        };
      }, "function" == typeof define && define.amd ? define(["punycode", "./idna-map"], function (e, t) {
        return i(e, t);
      }) : "object" === (void 0 === r ? "undefined" : _typeof(r)) ? t.exports = i(e("punycode"), e("./idna-map")) : n.uts46 = i(n.punycode, n.idna_map);
    }, {
      "./idna-map": 376,
      punycode: 128
    }],
    378: [function (e, _, t) {
      (function (g, w) {
        !function () {
          var e = "object" === ("undefined" == typeof window ? "undefined" : _typeof(window)) ? window : {};
          !e.JS_SHA3_NO_NODE_JS && "object" === (void 0 === g ? "undefined" : _typeof(g)) && g.versions && g.versions.node && (e = w);

          for (var t = !e.JS_SHA3_NO_COMMON_JS && "object" === (void 0 === _ ? "undefined" : _typeof(_)) && _.exports, u = "0123456789abcdef".split(""), f = [0, 8, 16, 24], fe = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648], r = [224, 256, 384, 512], o = ["hex", "buffer", "arrayBuffer", "array"], a = function a(t, r, n) {
            return function (e) {
              return new m(t, r, t).update(e)[n]();
            };
          }, s = function s(r, n, i) {
            return function (e, t) {
              return new m(r, n, t).update(e)[i]();
            };
          }, n = function n(e, t) {
            var r = a(e, t, "hex");
            r.create = function () {
              return new m(e, t, e);
            }, r.update = function (e) {
              return r.create().update(e);
            };

            for (var n = 0; n < o.length; ++n) {
              var i = o[n];
              r[i] = a(e, t, i);
            }

            return r;
          }, i = [{
            name: "keccak",
            padding: [1, 256, 65536, 16777216],
            bits: r,
            createMethod: n
          }, {
            name: "sha3",
            padding: [6, 1536, 393216, 100663296],
            bits: r,
            createMethod: n
          }, {
            name: "shake",
            padding: [31, 7936, 2031616, 520093696],
            bits: [128, 256],
            createMethod: function createMethod(t, r) {
              var n = s(t, r, "hex");
              n.create = function (e) {
                return new m(t, r, e);
              }, n.update = function (e, t) {
                return n.create(t).update(e);
              };

              for (var e = 0; e < o.length; ++e) {
                var i = o[e];
                n[i] = s(t, r, i);
              }

              return n;
            }
          }], c = {}, h = [], d = 0; d < i.length; ++d) {
            for (var l = i[d], p = l.bits, b = 0; b < p.length; ++b) {
              var y = l.name + "_" + p[b];
              h.push(y), c[y] = l.createMethod(p[b], l.padding);
            }
          }

          function m(e, t, r) {
            this.blocks = [], this.s = [], this.padding = t, this.outputBits = r, this.reset = !0, this.block = 0, this.start = 0, this.blockCount = 1600 - (e << 1) >> 5, this.byteCount = this.blockCount << 2, this.outputBlocks = r >> 5, this.extraBytes = (31 & r) >> 3;

            for (var n = 0; n < 50; ++n) {
              this.s[n] = 0;
            }
          }

          m.prototype.update = function (e) {
            var t = "string" != typeof e;
            t && e.constructor === ArrayBuffer && (e = new Uint8Array(e));

            for (var r, n, i = e.length, o = this.blocks, a = this.byteCount, s = this.blockCount, u = 0, c = this.s; u < i;) {
              if (this.reset) for (this.reset = !1, o[0] = this.block, r = 1; r < s + 1; ++r) {
                o[r] = 0;
              }
              if (t) for (r = this.start; u < i && r < a; ++u) {
                o[r >> 2] |= e[u] << f[3 & r++];
              } else for (r = this.start; u < i && r < a; ++u) {
                (n = e.charCodeAt(u)) < 128 ? o[r >> 2] |= n << f[3 & r++] : (n < 2048 ? o[r >> 2] |= (192 | n >> 6) << f[3 & r++] : (n < 55296 || 57344 <= n ? o[r >> 2] |= (224 | n >> 12) << f[3 & r++] : (n = 65536 + ((1023 & n) << 10 | 1023 & e.charCodeAt(++u)), o[r >> 2] |= (240 | n >> 18) << f[3 & r++], o[r >> 2] |= (128 | n >> 12 & 63) << f[3 & r++]), o[r >> 2] |= (128 | n >> 6 & 63) << f[3 & r++]), o[r >> 2] |= (128 | 63 & n) << f[3 & r++]);
              }

              if (a <= (this.lastByteIndex = r)) {
                for (this.start = r - a, this.block = o[s], r = 0; r < s; ++r) {
                  c[r] ^= o[r];
                }

                v(c), this.reset = !0;
              } else this.start = r;
            }

            return this;
          }, m.prototype.finalize = function () {
            var e = this.blocks,
                t = this.lastByteIndex,
                r = this.blockCount,
                n = this.s;
            if (e[t >> 2] |= this.padding[3 & t], this.lastByteIndex === this.byteCount) for (e[0] = e[r], t = 1; t < r + 1; ++t) {
              e[t] = 0;
            }

            for (e[r - 1] |= 2147483648, t = 0; t < r; ++t) {
              n[t] ^= e[t];
            }

            v(n);
          }, m.prototype.toString = m.prototype.hex = function () {
            this.finalize();

            for (var e, t = this.blockCount, r = this.s, n = this.outputBlocks, i = this.extraBytes, o = 0, a = 0, s = ""; a < n;) {
              for (o = 0; o < t && a < n; ++o, ++a) {
                e = r[o], s += u[e >> 4 & 15] + u[15 & e] + u[e >> 12 & 15] + u[e >> 8 & 15] + u[e >> 20 & 15] + u[e >> 16 & 15] + u[e >> 28 & 15] + u[e >> 24 & 15];
              }

              a % t == 0 && (v(r), o = 0);
            }

            return i && (e = r[o], 0 < i && (s += u[e >> 4 & 15] + u[15 & e]), 1 < i && (s += u[e >> 12 & 15] + u[e >> 8 & 15]), 2 < i && (s += u[e >> 20 & 15] + u[e >> 16 & 15])), s;
          }, m.prototype.buffer = m.prototype.arrayBuffer = function () {
            this.finalize();
            var e,
                t = this.blockCount,
                r = this.s,
                n = this.outputBlocks,
                i = this.extraBytes,
                o = 0,
                a = 0,
                s = this.outputBits >> 3;
            e = i ? new ArrayBuffer(n + 1 << 2) : new ArrayBuffer(s);

            for (var u = new Uint32Array(e); a < n;) {
              for (o = 0; o < t && a < n; ++o, ++a) {
                u[a] = r[o];
              }

              a % t == 0 && v(r);
            }

            return i && (u[o] = r[o], e = e.slice(0, s)), e;
          }, m.prototype.digest = m.prototype.array = function () {
            this.finalize();

            for (var e, t, r = this.blockCount, n = this.s, i = this.outputBlocks, o = this.extraBytes, a = 0, s = 0, u = []; s < i;) {
              for (a = 0; a < r && s < i; ++a, ++s) {
                e = s << 2, t = n[a], u[e] = 255 & t, u[e + 1] = t >> 8 & 255, u[e + 2] = t >> 16 & 255, u[e + 3] = t >> 24 & 255;
              }

              s % r == 0 && v(n);
            }

            return o && (e = s << 2, t = n[a], 0 < o && (u[e] = 255 & t), 1 < o && (u[e + 1] = t >> 8 & 255), 2 < o && (u[e + 2] = t >> 16 & 255)), u;
          };

          var v = function v(e) {
            var t, r, n, i, o, a, s, u, c, f, h, d, l, p, b, y, m, v, g, w, _, A, x, M, k, E, S, U, j, I, T, C, B, N, P, R, O, L, q, D, F, H, z, K, V, G, W, X, J, Z, $, Y, Q, ee, te, re, ne, ie, oe, ae, se, ue, ce;

            for (n = 0; n < 48; n += 2) {
              i = e[0] ^ e[10] ^ e[20] ^ e[30] ^ e[40], o = e[1] ^ e[11] ^ e[21] ^ e[31] ^ e[41], a = e[2] ^ e[12] ^ e[22] ^ e[32] ^ e[42], s = e[3] ^ e[13] ^ e[23] ^ e[33] ^ e[43], u = e[4] ^ e[14] ^ e[24] ^ e[34] ^ e[44], c = e[5] ^ e[15] ^ e[25] ^ e[35] ^ e[45], f = e[6] ^ e[16] ^ e[26] ^ e[36] ^ e[46], h = e[7] ^ e[17] ^ e[27] ^ e[37] ^ e[47], t = (d = e[8] ^ e[18] ^ e[28] ^ e[38] ^ e[48]) ^ (a << 1 | s >>> 31), r = (l = e[9] ^ e[19] ^ e[29] ^ e[39] ^ e[49]) ^ (s << 1 | a >>> 31), e[0] ^= t, e[1] ^= r, e[10] ^= t, e[11] ^= r, e[20] ^= t, e[21] ^= r, e[30] ^= t, e[31] ^= r, e[40] ^= t, e[41] ^= r, t = i ^ (u << 1 | c >>> 31), r = o ^ (c << 1 | u >>> 31), e[2] ^= t, e[3] ^= r, e[12] ^= t, e[13] ^= r, e[22] ^= t, e[23] ^= r, e[32] ^= t, e[33] ^= r, e[42] ^= t, e[43] ^= r, t = a ^ (f << 1 | h >>> 31), r = s ^ (h << 1 | f >>> 31), e[4] ^= t, e[5] ^= r, e[14] ^= t, e[15] ^= r, e[24] ^= t, e[25] ^= r, e[34] ^= t, e[35] ^= r, e[44] ^= t, e[45] ^= r, t = u ^ (d << 1 | l >>> 31), r = c ^ (l << 1 | d >>> 31), e[6] ^= t, e[7] ^= r, e[16] ^= t, e[17] ^= r, e[26] ^= t, e[27] ^= r, e[36] ^= t, e[37] ^= r, e[46] ^= t, e[47] ^= r, t = f ^ (i << 1 | o >>> 31), r = h ^ (o << 1 | i >>> 31), e[8] ^= t, e[9] ^= r, e[18] ^= t, e[19] ^= r, e[28] ^= t, e[29] ^= r, e[38] ^= t, e[39] ^= r, e[48] ^= t, e[49] ^= r, p = e[0], b = e[1], G = e[11] << 4 | e[10] >>> 28, W = e[10] << 4 | e[11] >>> 28, U = e[20] << 3 | e[21] >>> 29, j = e[21] << 3 | e[20] >>> 29, ae = e[31] << 9 | e[30] >>> 23, se = e[30] << 9 | e[31] >>> 23, H = e[40] << 18 | e[41] >>> 14, z = e[41] << 18 | e[40] >>> 14, N = e[2] << 1 | e[3] >>> 31, P = e[3] << 1 | e[2] >>> 31, y = e[13] << 12 | e[12] >>> 20, m = e[12] << 12 | e[13] >>> 20, X = e[22] << 10 | e[23] >>> 22, J = e[23] << 10 | e[22] >>> 22, I = e[33] << 13 | e[32] >>> 19, T = e[32] << 13 | e[33] >>> 19, ue = e[42] << 2 | e[43] >>> 30, ce = e[43] << 2 | e[42] >>> 30, ee = e[5] << 30 | e[4] >>> 2, te = e[4] << 30 | e[5] >>> 2, R = e[14] << 6 | e[15] >>> 26, O = e[15] << 6 | e[14] >>> 26, v = e[25] << 11 | e[24] >>> 21, g = e[24] << 11 | e[25] >>> 21, Z = e[34] << 15 | e[35] >>> 17, $ = e[35] << 15 | e[34] >>> 17, C = e[45] << 29 | e[44] >>> 3, B = e[44] << 29 | e[45] >>> 3, M = e[6] << 28 | e[7] >>> 4, k = e[7] << 28 | e[6] >>> 4, re = e[17] << 23 | e[16] >>> 9, ne = e[16] << 23 | e[17] >>> 9, L = e[26] << 25 | e[27] >>> 7, q = e[27] << 25 | e[26] >>> 7, w = e[36] << 21 | e[37] >>> 11, _ = e[37] << 21 | e[36] >>> 11, Y = e[47] << 24 | e[46] >>> 8, Q = e[46] << 24 | e[47] >>> 8, K = e[8] << 27 | e[9] >>> 5, V = e[9] << 27 | e[8] >>> 5, E = e[18] << 20 | e[19] >>> 12, S = e[19] << 20 | e[18] >>> 12, ie = e[29] << 7 | e[28] >>> 25, oe = e[28] << 7 | e[29] >>> 25, D = e[38] << 8 | e[39] >>> 24, F = e[39] << 8 | e[38] >>> 24, A = e[48] << 14 | e[49] >>> 18, x = e[49] << 14 | e[48] >>> 18, e[0] = p ^ ~y & v, e[1] = b ^ ~m & g, e[10] = M ^ ~E & U, e[11] = k ^ ~S & j, e[20] = N ^ ~R & L, e[21] = P ^ ~O & q, e[30] = K ^ ~G & X, e[31] = V ^ ~W & J, e[40] = ee ^ ~re & ie, e[41] = te ^ ~ne & oe, e[2] = y ^ ~v & w, e[3] = m ^ ~g & _, e[12] = E ^ ~U & I, e[13] = S ^ ~j & T, e[22] = R ^ ~L & D, e[23] = O ^ ~q & F, e[32] = G ^ ~X & Z, e[33] = W ^ ~J & $, e[42] = re ^ ~ie & ae, e[43] = ne ^ ~oe & se, e[4] = v ^ ~w & A, e[5] = g ^ ~_ & x, e[14] = U ^ ~I & C, e[15] = j ^ ~T & B, e[24] = L ^ ~D & H, e[25] = q ^ ~F & z, e[34] = X ^ ~Z & Y, e[35] = J ^ ~$ & Q, e[44] = ie ^ ~ae & ue, e[45] = oe ^ ~se & ce, e[6] = w ^ ~A & p, e[7] = _ ^ ~x & b, e[16] = I ^ ~C & M, e[17] = T ^ ~B & k, e[26] = D ^ ~H & N, e[27] = F ^ ~z & P, e[36] = Z ^ ~Y & K, e[37] = $ ^ ~Q & V, e[46] = ae ^ ~ue & ee, e[47] = se ^ ~ce & te, e[8] = A ^ ~p & y, e[9] = x ^ ~b & m, e[18] = C ^ ~M & E, e[19] = B ^ ~k & S, e[28] = H ^ ~N & R, e[29] = z ^ ~P & O, e[38] = Y ^ ~K & G, e[39] = Q ^ ~V & W, e[48] = ue ^ ~ee & re, e[49] = ce ^ ~te & ne, e[0] ^= fe[n], e[1] ^= fe[n + 1];
            }
          };

          if (t) _.exports = c;else for (d = 0; d < h.length; ++d) {
            e[h[d]] = c[h[d]];
          }
        }();
      }).call(this, e("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, {
      _process: 121
    }],
    379: [function (e, t, r) {
      arguments[4][187][0].apply(r, arguments);
    }, {
      dup: 187
    }],
    380: [function (e, t, r) {
      var n = e("./config"),
          i = e("./contracts/Registry"),
          o = e("./lib/ResolverMethodHandler");

      function a(e) {
        this.eth = e;
      }

      Object.defineProperty(a.prototype, "registry", {
        get: function get() {
          return new i(this);
        },
        enumerable: !0
      }), Object.defineProperty(a.prototype, "resolverMethodHandler", {
        get: function get() {
          return new o(this.registry);
        },
        enumerable: !0
      }), a.prototype.resolver = function (e) {
        return this.registry.resolver(e);
      }, a.prototype.getAddress = function (e, t) {
        return this.resolverMethodHandler.method(e, "addr", []).call(t);
      }, a.prototype.setAddress = function (e, t, r, n) {
        return this.resolverMethodHandler.method(e, "setAddr", [t]).send(r, n);
      }, a.prototype.getPubkey = function (e, t) {
        return this.resolverMethodHandler.method(e, "pubkey", [], t).call(t);
      }, a.prototype.setPubkey = function (e, t, r, n, i) {
        return this.resolverMethodHandler.method(e, "setPubkey", [t, r]).send(n, i);
      }, a.prototype.getContent = function (e, t) {
        return this.resolverMethodHandler.method(e, "content", []).call(t);
      }, a.prototype.setContent = function (e, t, r, n) {
        return this.resolverMethodHandler.method(e, "setContent", [t]).send(r, n);
      }, a.prototype.getMultihash = function (e, t) {
        return this.resolverMethodHandler.method(e, "multihash", []).call(t);
      }, a.prototype.setMultihash = function (e, t, r, n) {
        return this.resolverMethodHandler.method(e, "multihash", [t]).send(r, n);
      }, a.prototype.checkNetwork = function () {
        var r = this;
        return r.eth.getBlock("latest").then(function (e) {
          var t = new Date() / 1e3 - e.timestamp;
          if (3600 < t) throw new Error("Network not synced; last block was " + t + " seconds ago");
          return r.eth.net.getNetworkType();
        }).then(function (e) {
          var t = n.addresses[e];
          if (void 0 === t) throw new Error("ENS is not supported on network " + e);
          return t;
        });
      }, t.exports = a;
    }, {
      "./config": 381,
      "./contracts/Registry": 382,
      "./lib/ResolverMethodHandler": 384
    }],
    381: [function (e, t, r) {
      t.exports = {
        addresses: {
          main: "0x314159265dD8dbb310642f98f50C066173C1259b",
          ropsten: "0x112234455c3a32fd11230c42e7bccd4a84e02010",
          rinkeby: "0xe7410170f87102df0055eb195163a03b7f2bff4a"
        }
      };
    }, {}],
    382: [function (e, t, r) {
      var i = e("underscore"),
          n = e("web3-eth-contract"),
          o = e("eth-ens-namehash"),
          a = e("web3-core-promievent"),
          s = e("../ressources/ABI/Registry"),
          u = e("../ressources/ABI/Resolver");

      function c(e) {
        var r = this;
        this.ens = e, this.contract = e.checkNetwork().then(function (e) {
          var t = new n(s, e);
          return t.setProvider(r.ens.eth.currentProvider), t;
        });
      }

      c.prototype.owner = function (t, r) {
        var n = new a(!0);
        return this.contract.then(function (e) {
          e.methods.owner(o.hash(t)).call().then(function (e) {
            n.resolve(e), i.isFunction(r) && r(e);
          })["catch"](function (e) {
            n.reject(e), i.isFunction(r) && r(e);
          });
        }), n.eventEmitter;
      }, c.prototype.resolver = function (t) {
        var r = this;
        return this.contract.then(function (e) {
          return e.methods.resolver(o.hash(t)).call();
        }).then(function (e) {
          var t = new n(u, e);
          return t.setProvider(r.ens.eth.currentProvider), t;
        });
      }, t.exports = c;
    }, {
      "../ressources/ABI/Registry": 385,
      "../ressources/ABI/Resolver": 386,
      "eth-ens-namehash": 375,
      underscore: 379,
      "web3-core-promievent": 207,
      "web3-eth-contract": 374
    }],
    383: [function (e, t, r) {
      var n = e("./ENS");
      t.exports = n;
    }, {
      "./ENS": 380
    }],
    384: [function (e, t, r) {
      var a = e("web3-core-promievent"),
          n = e("eth-ens-namehash"),
          o = e("underscore");

      function i(e) {
        this.registry = e;
      }

      i.prototype.method = function (e, t, r, n) {
        return {
          call: this.call.bind({
            ensName: e,
            methodName: t,
            methodArguments: r,
            callback: n,
            parent: this
          }),
          send: this.send.bind({
            ensName: e,
            methodName: t,
            methodArguments: r,
            callback: n,
            parent: this
          })
        };
      }, i.prototype.call = function (t) {
        var r = this,
            n = new a(),
            i = this.parent.prepareArguments(this.ensName, this.methodArguments);
        return this.parent.registry.resolver(this.ensName).then(function (e) {
          r.parent.handleCall(n, e.methods[r.methodName], i, t);
        })["catch"](function (e) {
          n.reject(e);
        }), n.eventEmitter;
      }, i.prototype.send = function (t, r) {
        var n = this,
            i = new a(),
            o = this.parent.prepareArguments(this.ensName, this.methodArguments);
        return this.parent.registry.resolver(this.ensName).then(function (e) {
          n.parent.handleSend(i, e.methods[n.methodName], o, t, r);
        })["catch"](function (e) {
          i.reject(e);
        }), i.eventEmitter;
      }, i.prototype.handleCall = function (t, e, r, n) {
        return e.apply(this, r).call().then(function (e) {
          t.resolve(e), o.isFunction(n) && n(e);
        })["catch"](function (e) {
          t.reject(e), o.isFunction(n) && n(e);
        }), t;
      }, i.prototype.handleSend = function (r, e, t, n, i) {
        return e.apply(this, t).send(n).on("transactionHash", function (e) {
          r.eventEmitter.emit("transactionHash", e);
        }).on("confirmation", function (e, t) {
          r.eventEmitter.emit("confirmation", e, t);
        }).on("receipt", function (e) {
          r.eventEmitter.emit("receipt", e), r.resolve(e), o.isFunction(i) && i(e);
        }).on("error", function (e) {
          r.eventEmitter.emit("error", e), r.reject(e), o.isFunction(i) && i(e);
        }), r;
      }, i.prototype.prepareArguments = function (e, t) {
        var r = n.hash(e);
        return 0 < t.length ? (t.unshift(r), t) : [r];
      }, t.exports = i;
    }, {
      "eth-ens-namehash": 375,
      underscore: 379,
      "web3-core-promievent": 207
    }],
    385: [function (e, t, r) {
      t.exports = [{
        constant: !0,
        inputs: [{
          name: "node",
          type: "bytes32"
        }],
        name: "resolver",
        outputs: [{
          name: "",
          type: "address"
        }],
        payable: !1,
        type: "function"
      }, {
        constant: !0,
        inputs: [{
          name: "node",
          type: "bytes32"
        }],
        name: "owner",
        outputs: [{
          name: "",
          type: "address"
        }],
        payable: !1,
        type: "function"
      }, {
        constant: !1,
        inputs: [{
          name: "node",
          type: "bytes32"
        }, {
          name: "label",
          type: "bytes32"
        }, {
          name: "owner",
          type: "address"
        }],
        name: "setSubnodeOwner",
        outputs: [],
        payable: !1,
        type: "function"
      }, {
        constant: !1,
        inputs: [{
          name: "node",
          type: "bytes32"
        }, {
          name: "ttl",
          type: "uint64"
        }],
        name: "setTTL",
        outputs: [],
        payable: !1,
        type: "function"
      }, {
        constant: !0,
        inputs: [{
          name: "node",
          type: "bytes32"
        }],
        name: "ttl",
        outputs: [{
          name: "",
          type: "uint64"
        }],
        payable: !1,
        type: "function"
      }, {
        constant: !1,
        inputs: [{
          name: "node",
          type: "bytes32"
        }, {
          name: "resolver",
          type: "address"
        }],
        name: "setResolver",
        outputs: [],
        payable: !1,
        type: "function"
      }, {
        constant: !1,
        inputs: [{
          name: "node",
          type: "bytes32"
        }, {
          name: "owner",
          type: "address"
        }],
        name: "setOwner",
        outputs: [],
        payable: !1,
        type: "function"
      }, {
        anonymous: !1,
        inputs: [{
          indexed: !0,
          name: "node",
          type: "bytes32"
        }, {
          indexed: !1,
          name: "owner",
          type: "address"
        }],
        name: "Transfer",
        type: "event"
      }, {
        anonymous: !1,
        inputs: [{
          indexed: !0,
          name: "node",
          type: "bytes32"
        }, {
          indexed: !0,
          name: "label",
          type: "bytes32"
        }, {
          indexed: !1,
          name: "owner",
          type: "address"
        }],
        name: "NewOwner",
        type: "event"
      }, {
        anonymous: !1,
        inputs: [{
          indexed: !0,
          name: "node",
          type: "bytes32"
        }, {
          indexed: !1,
          name: "resolver",
          type: "address"
        }],
        name: "NewResolver",
        type: "event"
      }, {
        anonymous: !1,
        inputs: [{
          indexed: !0,
          name: "node",
          type: "bytes32"
        }, {
          indexed: !1,
          name: "ttl",
          type: "uint64"
        }],
        name: "NewTTL",
        type: "event"
      }];
    }, {}],
    386: [function (e, t, r) {
      t.exports = [{
        constant: !0,
        inputs: [{
          name: "interfaceID",
          type: "bytes4"
        }],
        name: "supportsInterface",
        outputs: [{
          name: "",
          type: "bool"
        }],
        payable: !1,
        type: "function"
      }, {
        constant: !0,
        inputs: [{
          name: "node",
          type: "bytes32"
        }, {
          name: "contentTypes",
          type: "uint256"
        }],
        name: "ABI",
        outputs: [{
          name: "contentType",
          type: "uint256"
        }, {
          name: "data",
          type: "bytes"
        }],
        payable: !1,
        type: "function"
      }, {
        constant: !1,
        inputs: [{
          name: "node",
          type: "bytes32"
        }, {
          name: "hash",
          type: "bytes"
        }],
        name: "setMultihash",
        outputs: [],
        payable: !1,
        stateMutability: "nonpayable",
        type: "function"
      }, {
        constant: !0,
        inputs: [{
          name: "node",
          type: "bytes32"
        }],
        name: "multihash",
        outputs: [{
          name: "",
          type: "bytes"
        }],
        payable: !1,
        stateMutability: "view",
        type: "function"
      }, {
        constant: !1,
        inputs: [{
          name: "node",
          type: "bytes32"
        }, {
          name: "x",
          type: "bytes32"
        }, {
          name: "y",
          type: "bytes32"
        }],
        name: "setPubkey",
        outputs: [],
        payable: !1,
        type: "function"
      }, {
        constant: !0,
        inputs: [{
          name: "node",
          type: "bytes32"
        }],
        name: "content",
        outputs: [{
          name: "ret",
          type: "bytes32"
        }],
        payable: !1,
        type: "function"
      }, {
        constant: !0,
        inputs: [{
          name: "node",
          type: "bytes32"
        }],
        name: "addr",
        outputs: [{
          name: "ret",
          type: "address"
        }],
        payable: !1,
        type: "function"
      }, {
        constant: !1,
        inputs: [{
          name: "node",
          type: "bytes32"
        }, {
          name: "contentType",
          type: "uint256"
        }, {
          name: "data",
          type: "bytes"
        }],
        name: "setABI",
        outputs: [],
        payable: !1,
        type: "function"
      }, {
        constant: !0,
        inputs: [{
          name: "node",
          type: "bytes32"
        }],
        name: "name",
        outputs: [{
          name: "ret",
          type: "string"
        }],
        payable: !1,
        type: "function"
      }, {
        constant: !1,
        inputs: [{
          name: "node",
          type: "bytes32"
        }, {
          name: "name",
          type: "string"
        }],
        name: "setName",
        outputs: [],
        payable: !1,
        type: "function"
      }, {
        constant: !1,
        inputs: [{
          name: "node",
          type: "bytes32"
        }, {
          name: "hash",
          type: "bytes32"
        }],
        name: "setContent",
        outputs: [],
        payable: !1,
        type: "function"
      }, {
        constant: !0,
        inputs: [{
          name: "node",
          type: "bytes32"
        }],
        name: "pubkey",
        outputs: [{
          name: "x",
          type: "bytes32"
        }, {
          name: "y",
          type: "bytes32"
        }],
        payable: !1,
        type: "function"
      }, {
        constant: !1,
        inputs: [{
          name: "node",
          type: "bytes32"
        }, {
          name: "addr",
          type: "address"
        }],
        name: "setAddr",
        outputs: [],
        payable: !1,
        type: "function"
      }, {
        inputs: [{
          name: "ensAddr",
          type: "address"
        }],
        payable: !1,
        type: "constructor"
      }, {
        anonymous: !1,
        inputs: [{
          indexed: !0,
          name: "node",
          type: "bytes32"
        }, {
          indexed: !1,
          name: "a",
          type: "address"
        }],
        name: "AddrChanged",
        type: "event"
      }, {
        anonymous: !1,
        inputs: [{
          indexed: !0,
          name: "node",
          type: "bytes32"
        }, {
          indexed: !1,
          name: "hash",
          type: "bytes32"
        }],
        name: "ContentChanged",
        type: "event"
      }, {
        anonymous: !1,
        inputs: [{
          indexed: !0,
          name: "node",
          type: "bytes32"
        }, {
          indexed: !1,
          name: "name",
          type: "string"
        }],
        name: "NameChanged",
        type: "event"
      }, {
        anonymous: !1,
        inputs: [{
          indexed: !0,
          name: "node",
          type: "bytes32"
        }, {
          indexed: !0,
          name: "contentType",
          type: "uint256"
        }],
        name: "ABIChanged",
        type: "event"
      }, {
        anonymous: !1,
        inputs: [{
          indexed: !0,
          name: "node",
          type: "bytes32"
        }, {
          indexed: !1,
          name: "x",
          type: "bytes32"
        }, {
          indexed: !1,
          name: "y",
          type: "bytes32"
        }],
        name: "PubkeyChanged",
        type: "event"
      }];
    }, {}],
    387: [function (x, e, t) {
      !function (e, t) {
        function y(e, t) {
          if (!e) throw new Error(t || "Assertion failed");
        }

        function r(e, t) {
          e.super_ = t;

          var r = function r() {};

          r.prototype = t.prototype, e.prototype = new r(), e.prototype.constructor = e;
        }

        function m(e, t, r) {
          if (m.isBN(e)) return e;
          this.negative = 0, this.words = null, this.length = 0, (this.red = null) !== e && ("le" !== t && "be" !== t || (r = t, t = 10), this._init(e || 0, t || 10, r || "be"));
        }

        var n;
        "object" === (void 0 === e ? "undefined" : _typeof(e)) ? e.exports = m : t.BN = m, (m.BN = m).wordSize = 26;

        try {
          n = x("buffer").Buffer;
        } catch (e) {}

        function a(e, t, r) {
          for (var n = 0, i = Math.min(e.length, r), o = t; o < i; o++) {
            var a = e.charCodeAt(o) - 48;
            n <<= 4, n |= 49 <= a && a <= 54 ? a - 49 + 10 : 17 <= a && a <= 22 ? a - 17 + 10 : 15 & a;
          }

          return n;
        }

        function h(e, t, r, n) {
          for (var i = 0, o = Math.min(e.length, r), a = t; a < o; a++) {
            var s = e.charCodeAt(a) - 48;
            i *= n, i += 49 <= s ? s - 49 + 10 : 17 <= s ? s - 17 + 10 : s;
          }

          return i;
        }

        m.isBN = function (e) {
          return e instanceof m || null !== e && "object" === (void 0 === e ? "undefined" : _typeof(e)) && e.constructor.wordSize === m.wordSize && Array.isArray(e.words);
        }, m.max = function (e, t) {
          return 0 < e.cmp(t) ? e : t;
        }, m.min = function (e, t) {
          return e.cmp(t) < 0 ? e : t;
        }, m.prototype._init = function (e, t, r) {
          if ("number" == typeof e) return this._initNumber(e, t, r);
          if ("object" === (void 0 === e ? "undefined" : _typeof(e))) return this._initArray(e, t, r);
          "hex" === t && (t = 16), y(t === (0 | t) && 2 <= t && t <= 36);
          var n = 0;
          "-" === (e = e.toString().replace(/\s+/g, ""))[0] && n++, 16 === t ? this._parseHex(e, n) : this._parseBase(e, t, n), "-" === e[0] && (this.negative = 1), this.strip(), "le" === r && this._initArray(this.toArray(), t, r);
        }, m.prototype._initNumber = function (e, t, r) {
          e < 0 && (this.negative = 1, e = -e), e < 67108864 ? (this.words = [67108863 & e], this.length = 1) : e < 4503599627370496 ? (this.words = [67108863 & e, e / 67108864 & 67108863], this.length = 2) : (y(e < 9007199254740992), this.words = [67108863 & e, e / 67108864 & 67108863, 1], this.length = 3), "le" === r && this._initArray(this.toArray(), t, r);
        }, m.prototype._initArray = function (e, t, r) {
          if (y("number" == typeof e.length), e.length <= 0) return this.words = [0], this.length = 1, this;
          this.length = Math.ceil(e.length / 3), this.words = new Array(this.length);

          for (var n = 0; n < this.length; n++) {
            this.words[n] = 0;
          }

          var i,
              o,
              a = 0;
          if ("be" === r) for (n = e.length - 1, i = 0; 0 <= n; n -= 3) {
            o = e[n] | e[n - 1] << 8 | e[n - 2] << 16, this.words[i] |= o << a & 67108863, this.words[i + 1] = o >>> 26 - a & 67108863, 26 <= (a += 24) && (a -= 26, i++);
          } else if ("le" === r) for (i = n = 0; n < e.length; n += 3) {
            o = e[n] | e[n + 1] << 8 | e[n + 2] << 16, this.words[i] |= o << a & 67108863, this.words[i + 1] = o >>> 26 - a & 67108863, 26 <= (a += 24) && (a -= 26, i++);
          }
          return this.strip();
        }, m.prototype._parseHex = function (e, t) {
          this.length = Math.ceil((e.length - t) / 6), this.words = new Array(this.length);

          for (var r = 0; r < this.length; r++) {
            this.words[r] = 0;
          }

          var n,
              i,
              o = 0;

          for (r = e.length - 6, n = 0; t <= r; r -= 6) {
            i = a(e, r, r + 6), this.words[n] |= i << o & 67108863, this.words[n + 1] |= i >>> 26 - o & 4194303, 26 <= (o += 24) && (o -= 26, n++);
          }

          r + 6 !== t && (i = a(e, t, r + 6), this.words[n] |= i << o & 67108863, this.words[n + 1] |= i >>> 26 - o & 4194303), this.strip();
        }, m.prototype._parseBase = function (e, t, r) {
          this.words = [0];

          for (var n = 0, i = this.length = 1; i <= 67108863; i *= t) {
            n++;
          }

          n--, i = i / t | 0;

          for (var o = e.length - r, a = o % n, s = Math.min(o, o - a) + r, u = 0, c = r; c < s; c += n) {
            u = h(e, c, c + n, t), this.imuln(i), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
          }

          if (0 !== a) {
            var f = 1;

            for (u = h(e, c, e.length, t), c = 0; c < a; c++) {
              f *= t;
            }

            this.imuln(f), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
          }
        }, m.prototype.copy = function (e) {
          e.words = new Array(this.length);

          for (var t = 0; t < this.length; t++) {
            e.words[t] = this.words[t];
          }

          e.length = this.length, e.negative = this.negative, e.red = this.red;
        }, m.prototype.clone = function () {
          var e = new m(null);
          return this.copy(e), e;
        }, m.prototype._expand = function (e) {
          for (; this.length < e;) {
            this.words[this.length++] = 0;
          }

          return this;
        }, m.prototype.strip = function () {
          for (; 1 < this.length && 0 === this.words[this.length - 1];) {
            this.length--;
          }

          return this._normSign();
        }, m.prototype._normSign = function () {
          return 1 === this.length && 0 === this.words[0] && (this.negative = 0), this;
        }, m.prototype.inspect = function () {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        };
        var d = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"],
            l = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
            p = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];

        function i(e, t, r) {
          r.negative = t.negative ^ e.negative;
          var n = e.length + t.length | 0;
          n = (r.length = n) - 1 | 0;
          var i = 0 | e.words[0],
              o = 0 | t.words[0],
              a = i * o,
              s = 67108863 & a,
              u = a / 67108864 | 0;
          r.words[0] = s;

          for (var c = 1; c < n; c++) {
            for (var f = u >>> 26, h = 67108863 & u, d = Math.min(c, t.length - 1), l = Math.max(0, c - e.length + 1); l <= d; l++) {
              var p = c - l | 0;
              f += (a = (i = 0 | e.words[p]) * (o = 0 | t.words[l]) + h) / 67108864 | 0, h = 67108863 & a;
            }

            r.words[c] = 0 | h, u = 0 | f;
          }

          return 0 !== u ? r.words[c] = 0 | u : r.length--, r.strip();
        }

        m.prototype.toString = function (e, t) {
          var r;

          if (t = 0 | t || 1, 16 === (e = e || 10) || "hex" === e) {
            r = "";

            for (var n = 0, i = 0, o = 0; o < this.length; o++) {
              var a = this.words[o],
                  s = (16777215 & (a << n | i)).toString(16);
              r = 0 !== (i = a >>> 24 - n & 16777215) || o !== this.length - 1 ? d[6 - s.length] + s + r : s + r, 26 <= (n += 2) && (n -= 26, o--);
            }

            for (0 !== i && (r = i.toString(16) + r); r.length % t != 0;) {
              r = "0" + r;
            }

            return 0 !== this.negative && (r = "-" + r), r;
          }

          if (e === (0 | e) && 2 <= e && e <= 36) {
            var u = l[e],
                c = p[e];
            r = "";
            var f = this.clone();

            for (f.negative = 0; !f.isZero();) {
              var h = f.modn(c).toString(e);
              r = (f = f.idivn(c)).isZero() ? h + r : d[u - h.length] + h + r;
            }

            for (this.isZero() && (r = "0" + r); r.length % t != 0;) {
              r = "0" + r;
            }

            return 0 !== this.negative && (r = "-" + r), r;
          }

          y(!1, "Base should be between 2 and 36");
        }, m.prototype.toNumber = function () {
          var e = this.words[0];
          return 2 === this.length ? e += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? e += 4503599627370496 + 67108864 * this.words[1] : 2 < this.length && y(!1, "Number can only safely store up to 53 bits"), 0 !== this.negative ? -e : e;
        }, m.prototype.toJSON = function () {
          return this.toString(16);
        }, m.prototype.toBuffer = function (e, t) {
          return y(void 0 !== n), this.toArrayLike(n, e, t);
        }, m.prototype.toArray = function (e, t) {
          return this.toArrayLike(Array, e, t);
        }, m.prototype.toArrayLike = function (e, t, r) {
          var n = this.byteLength(),
              i = r || Math.max(1, n);
          y(n <= i, "byte array longer than desired length"), y(0 < i, "Requested array length <= 0"), this.strip();
          var o,
              a,
              s = "le" === t,
              u = new e(i),
              c = this.clone();

          if (s) {
            for (a = 0; !c.isZero(); a++) {
              o = c.andln(255), c.iushrn(8), u[a] = o;
            }

            for (; a < i; a++) {
              u[a] = 0;
            }
          } else {
            for (a = 0; a < i - n; a++) {
              u[a] = 0;
            }

            for (a = 0; !c.isZero(); a++) {
              o = c.andln(255), c.iushrn(8), u[i - a - 1] = o;
            }
          }

          return u;
        }, m.prototype._countBits = Math.clz32 ? function (e) {
          return 32 - Math.clz32(e);
        } : function (e) {
          var t = e,
              r = 0;
          return 4096 <= t && (r += 13, t >>>= 13), 64 <= t && (r += 7, t >>>= 7), 8 <= t && (r += 4, t >>>= 4), 2 <= t && (r += 2, t >>>= 2), r + t;
        }, m.prototype._zeroBits = function (e) {
          if (0 === e) return 26;
          var t = e,
              r = 0;
          return 0 == (8191 & t) && (r += 13, t >>>= 13), 0 == (127 & t) && (r += 7, t >>>= 7), 0 == (15 & t) && (r += 4, t >>>= 4), 0 == (3 & t) && (r += 2, t >>>= 2), 0 == (1 & t) && r++, r;
        }, m.prototype.bitLength = function () {
          var e = this.words[this.length - 1],
              t = this._countBits(e);

          return 26 * (this.length - 1) + t;
        }, m.prototype.zeroBits = function () {
          if (this.isZero()) return 0;

          for (var e = 0, t = 0; t < this.length; t++) {
            var r = this._zeroBits(this.words[t]);

            if (e += r, 26 !== r) break;
          }

          return e;
        }, m.prototype.byteLength = function () {
          return Math.ceil(this.bitLength() / 8);
        }, m.prototype.toTwos = function (e) {
          return 0 !== this.negative ? this.abs().inotn(e).iaddn(1) : this.clone();
        }, m.prototype.fromTwos = function (e) {
          return this.testn(e - 1) ? this.notn(e).iaddn(1).ineg() : this.clone();
        }, m.prototype.isNeg = function () {
          return 0 !== this.negative;
        }, m.prototype.neg = function () {
          return this.clone().ineg();
        }, m.prototype.ineg = function () {
          return this.isZero() || (this.negative ^= 1), this;
        }, m.prototype.iuor = function (e) {
          for (; this.length < e.length;) {
            this.words[this.length++] = 0;
          }

          for (var t = 0; t < e.length; t++) {
            this.words[t] = this.words[t] | e.words[t];
          }

          return this.strip();
        }, m.prototype.ior = function (e) {
          return y(0 == (this.negative | e.negative)), this.iuor(e);
        }, m.prototype.or = function (e) {
          return this.length > e.length ? this.clone().ior(e) : e.clone().ior(this);
        }, m.prototype.uor = function (e) {
          return this.length > e.length ? this.clone().iuor(e) : e.clone().iuor(this);
        }, m.prototype.iuand = function (e) {
          var t;
          t = this.length > e.length ? e : this;

          for (var r = 0; r < t.length; r++) {
            this.words[r] = this.words[r] & e.words[r];
          }

          return this.length = t.length, this.strip();
        }, m.prototype.iand = function (e) {
          return y(0 == (this.negative | e.negative)), this.iuand(e);
        }, m.prototype.and = function (e) {
          return this.length > e.length ? this.clone().iand(e) : e.clone().iand(this);
        }, m.prototype.uand = function (e) {
          return this.length > e.length ? this.clone().iuand(e) : e.clone().iuand(this);
        }, m.prototype.iuxor = function (e) {
          var t, r;
          this.length > e.length ? (t = this, r = e) : (t = e, r = this);

          for (var n = 0; n < r.length; n++) {
            this.words[n] = t.words[n] ^ r.words[n];
          }

          if (this !== t) for (; n < t.length; n++) {
            this.words[n] = t.words[n];
          }
          return this.length = t.length, this.strip();
        }, m.prototype.ixor = function (e) {
          return y(0 == (this.negative | e.negative)), this.iuxor(e);
        }, m.prototype.xor = function (e) {
          return this.length > e.length ? this.clone().ixor(e) : e.clone().ixor(this);
        }, m.prototype.uxor = function (e) {
          return this.length > e.length ? this.clone().iuxor(e) : e.clone().iuxor(this);
        }, m.prototype.inotn = function (e) {
          y("number" == typeof e && 0 <= e);
          var t = 0 | Math.ceil(e / 26),
              r = e % 26;
          this._expand(t), 0 < r && t--;

          for (var n = 0; n < t; n++) {
            this.words[n] = 67108863 & ~this.words[n];
          }

          return 0 < r && (this.words[n] = ~this.words[n] & 67108863 >> 26 - r), this.strip();
        }, m.prototype.notn = function (e) {
          return this.clone().inotn(e);
        }, m.prototype.setn = function (e, t) {
          y("number" == typeof e && 0 <= e);
          var r = e / 26 | 0,
              n = e % 26;
          return this._expand(r + 1), this.words[r] = t ? this.words[r] | 1 << n : this.words[r] & ~(1 << n), this.strip();
        }, m.prototype.iadd = function (e) {
          var t, r, n;
          if (0 !== this.negative && 0 === e.negative) return this.negative = 0, t = this.isub(e), this.negative ^= 1, this._normSign();
          if (0 === this.negative && 0 !== e.negative) return e.negative = 0, t = this.isub(e), e.negative = 1, t._normSign();
          this.length > e.length ? (r = this, n = e) : (r = e, n = this);

          for (var i = 0, o = 0; o < n.length; o++) {
            t = (0 | r.words[o]) + (0 | n.words[o]) + i, this.words[o] = 67108863 & t, i = t >>> 26;
          }

          for (; 0 !== i && o < r.length; o++) {
            t = (0 | r.words[o]) + i, this.words[o] = 67108863 & t, i = t >>> 26;
          }

          if (this.length = r.length, 0 !== i) this.words[this.length] = i, this.length++;else if (r !== this) for (; o < r.length; o++) {
            this.words[o] = r.words[o];
          }
          return this;
        }, m.prototype.add = function (e) {
          var t;
          return 0 !== e.negative && 0 === this.negative ? (e.negative = 0, t = this.sub(e), e.negative ^= 1, t) : 0 === e.negative && 0 !== this.negative ? (this.negative = 0, t = e.sub(this), this.negative = 1, t) : this.length > e.length ? this.clone().iadd(e) : e.clone().iadd(this);
        }, m.prototype.isub = function (e) {
          if (0 !== e.negative) {
            e.negative = 0;
            var t = this.iadd(e);
            return e.negative = 1, t._normSign();
          }

          if (0 !== this.negative) return this.negative = 0, this.iadd(e), this.negative = 1, this._normSign();
          var r,
              n,
              i = this.cmp(e);
          if (0 === i) return this.negative = 0, this.length = 1, this.words[0] = 0, this;
          0 < i ? (r = this, n = e) : (r = e, n = this);

          for (var o = 0, a = 0; a < n.length; a++) {
            o = (t = (0 | r.words[a]) - (0 | n.words[a]) + o) >> 26, this.words[a] = 67108863 & t;
          }

          for (; 0 !== o && a < r.length; a++) {
            o = (t = (0 | r.words[a]) + o) >> 26, this.words[a] = 67108863 & t;
          }

          if (0 === o && a < r.length && r !== this) for (; a < r.length; a++) {
            this.words[a] = r.words[a];
          }
          return this.length = Math.max(this.length, a), r !== this && (this.negative = 1), this.strip();
        }, m.prototype.sub = function (e) {
          return this.clone().isub(e);
        };

        var o = function o(e, t, r) {
          var n,
              i,
              o,
              a = e.words,
              s = t.words,
              u = r.words,
              c = 0,
              f = 0 | a[0],
              h = 8191 & f,
              d = f >>> 13,
              l = 0 | a[1],
              p = 8191 & l,
              b = l >>> 13,
              y = 0 | a[2],
              m = 8191 & y,
              v = y >>> 13,
              g = 0 | a[3],
              w = 8191 & g,
              _ = g >>> 13,
              A = 0 | a[4],
              x = 8191 & A,
              M = A >>> 13,
              k = 0 | a[5],
              E = 8191 & k,
              S = k >>> 13,
              U = 0 | a[6],
              j = 8191 & U,
              I = U >>> 13,
              T = 0 | a[7],
              C = 8191 & T,
              B = T >>> 13,
              N = 0 | a[8],
              P = 8191 & N,
              R = N >>> 13,
              O = 0 | a[9],
              L = 8191 & O,
              q = O >>> 13,
              D = 0 | s[0],
              F = 8191 & D,
              H = D >>> 13,
              z = 0 | s[1],
              K = 8191 & z,
              V = z >>> 13,
              G = 0 | s[2],
              W = 8191 & G,
              X = G >>> 13,
              J = 0 | s[3],
              Z = 8191 & J,
              $ = J >>> 13,
              Y = 0 | s[4],
              Q = 8191 & Y,
              ee = Y >>> 13,
              te = 0 | s[5],
              re = 8191 & te,
              ne = te >>> 13,
              ie = 0 | s[6],
              oe = 8191 & ie,
              ae = ie >>> 13,
              se = 0 | s[7],
              ue = 8191 & se,
              ce = se >>> 13,
              fe = 0 | s[8],
              he = 8191 & fe,
              de = fe >>> 13,
              le = 0 | s[9],
              pe = 8191 & le,
              be = le >>> 13;

          r.negative = e.negative ^ t.negative, r.length = 19;
          var ye = (c + (n = Math.imul(h, F)) | 0) + ((8191 & (i = (i = Math.imul(h, H)) + Math.imul(d, F) | 0)) << 13) | 0;
          c = ((o = Math.imul(d, H)) + (i >>> 13) | 0) + (ye >>> 26) | 0, ye &= 67108863, n = Math.imul(p, F), i = (i = Math.imul(p, H)) + Math.imul(b, F) | 0, o = Math.imul(b, H);
          var me = (c + (n = n + Math.imul(h, K) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, V) | 0) + Math.imul(d, K) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(d, V) | 0) + (i >>> 13) | 0) + (me >>> 26) | 0, me &= 67108863, n = Math.imul(m, F), i = (i = Math.imul(m, H)) + Math.imul(v, F) | 0, o = Math.imul(v, H), n = n + Math.imul(p, K) | 0, i = (i = i + Math.imul(p, V) | 0) + Math.imul(b, K) | 0, o = o + Math.imul(b, V) | 0;
          var ve = (c + (n = n + Math.imul(h, W) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, X) | 0) + Math.imul(d, W) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(d, X) | 0) + (i >>> 13) | 0) + (ve >>> 26) | 0, ve &= 67108863, n = Math.imul(w, F), i = (i = Math.imul(w, H)) + Math.imul(_, F) | 0, o = Math.imul(_, H), n = n + Math.imul(m, K) | 0, i = (i = i + Math.imul(m, V) | 0) + Math.imul(v, K) | 0, o = o + Math.imul(v, V) | 0, n = n + Math.imul(p, W) | 0, i = (i = i + Math.imul(p, X) | 0) + Math.imul(b, W) | 0, o = o + Math.imul(b, X) | 0;
          var ge = (c + (n = n + Math.imul(h, Z) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, $) | 0) + Math.imul(d, Z) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(d, $) | 0) + (i >>> 13) | 0) + (ge >>> 26) | 0, ge &= 67108863, n = Math.imul(x, F), i = (i = Math.imul(x, H)) + Math.imul(M, F) | 0, o = Math.imul(M, H), n = n + Math.imul(w, K) | 0, i = (i = i + Math.imul(w, V) | 0) + Math.imul(_, K) | 0, o = o + Math.imul(_, V) | 0, n = n + Math.imul(m, W) | 0, i = (i = i + Math.imul(m, X) | 0) + Math.imul(v, W) | 0, o = o + Math.imul(v, X) | 0, n = n + Math.imul(p, Z) | 0, i = (i = i + Math.imul(p, $) | 0) + Math.imul(b, Z) | 0, o = o + Math.imul(b, $) | 0;
          var we = (c + (n = n + Math.imul(h, Q) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, ee) | 0) + Math.imul(d, Q) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(d, ee) | 0) + (i >>> 13) | 0) + (we >>> 26) | 0, we &= 67108863, n = Math.imul(E, F), i = (i = Math.imul(E, H)) + Math.imul(S, F) | 0, o = Math.imul(S, H), n = n + Math.imul(x, K) | 0, i = (i = i + Math.imul(x, V) | 0) + Math.imul(M, K) | 0, o = o + Math.imul(M, V) | 0, n = n + Math.imul(w, W) | 0, i = (i = i + Math.imul(w, X) | 0) + Math.imul(_, W) | 0, o = o + Math.imul(_, X) | 0, n = n + Math.imul(m, Z) | 0, i = (i = i + Math.imul(m, $) | 0) + Math.imul(v, Z) | 0, o = o + Math.imul(v, $) | 0, n = n + Math.imul(p, Q) | 0, i = (i = i + Math.imul(p, ee) | 0) + Math.imul(b, Q) | 0, o = o + Math.imul(b, ee) | 0;

          var _e = (c + (n = n + Math.imul(h, re) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, ne) | 0) + Math.imul(d, re) | 0)) << 13) | 0;

          c = ((o = o + Math.imul(d, ne) | 0) + (i >>> 13) | 0) + (_e >>> 26) | 0, _e &= 67108863, n = Math.imul(j, F), i = (i = Math.imul(j, H)) + Math.imul(I, F) | 0, o = Math.imul(I, H), n = n + Math.imul(E, K) | 0, i = (i = i + Math.imul(E, V) | 0) + Math.imul(S, K) | 0, o = o + Math.imul(S, V) | 0, n = n + Math.imul(x, W) | 0, i = (i = i + Math.imul(x, X) | 0) + Math.imul(M, W) | 0, o = o + Math.imul(M, X) | 0, n = n + Math.imul(w, Z) | 0, i = (i = i + Math.imul(w, $) | 0) + Math.imul(_, Z) | 0, o = o + Math.imul(_, $) | 0, n = n + Math.imul(m, Q) | 0, i = (i = i + Math.imul(m, ee) | 0) + Math.imul(v, Q) | 0, o = o + Math.imul(v, ee) | 0, n = n + Math.imul(p, re) | 0, i = (i = i + Math.imul(p, ne) | 0) + Math.imul(b, re) | 0, o = o + Math.imul(b, ne) | 0;
          var Ae = (c + (n = n + Math.imul(h, oe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, ae) | 0) + Math.imul(d, oe) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(d, ae) | 0) + (i >>> 13) | 0) + (Ae >>> 26) | 0, Ae &= 67108863, n = Math.imul(C, F), i = (i = Math.imul(C, H)) + Math.imul(B, F) | 0, o = Math.imul(B, H), n = n + Math.imul(j, K) | 0, i = (i = i + Math.imul(j, V) | 0) + Math.imul(I, K) | 0, o = o + Math.imul(I, V) | 0, n = n + Math.imul(E, W) | 0, i = (i = i + Math.imul(E, X) | 0) + Math.imul(S, W) | 0, o = o + Math.imul(S, X) | 0, n = n + Math.imul(x, Z) | 0, i = (i = i + Math.imul(x, $) | 0) + Math.imul(M, Z) | 0, o = o + Math.imul(M, $) | 0, n = n + Math.imul(w, Q) | 0, i = (i = i + Math.imul(w, ee) | 0) + Math.imul(_, Q) | 0, o = o + Math.imul(_, ee) | 0, n = n + Math.imul(m, re) | 0, i = (i = i + Math.imul(m, ne) | 0) + Math.imul(v, re) | 0, o = o + Math.imul(v, ne) | 0, n = n + Math.imul(p, oe) | 0, i = (i = i + Math.imul(p, ae) | 0) + Math.imul(b, oe) | 0, o = o + Math.imul(b, ae) | 0;
          var xe = (c + (n = n + Math.imul(h, ue) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, ce) | 0) + Math.imul(d, ue) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(d, ce) | 0) + (i >>> 13) | 0) + (xe >>> 26) | 0, xe &= 67108863, n = Math.imul(P, F), i = (i = Math.imul(P, H)) + Math.imul(R, F) | 0, o = Math.imul(R, H), n = n + Math.imul(C, K) | 0, i = (i = i + Math.imul(C, V) | 0) + Math.imul(B, K) | 0, o = o + Math.imul(B, V) | 0, n = n + Math.imul(j, W) | 0, i = (i = i + Math.imul(j, X) | 0) + Math.imul(I, W) | 0, o = o + Math.imul(I, X) | 0, n = n + Math.imul(E, Z) | 0, i = (i = i + Math.imul(E, $) | 0) + Math.imul(S, Z) | 0, o = o + Math.imul(S, $) | 0, n = n + Math.imul(x, Q) | 0, i = (i = i + Math.imul(x, ee) | 0) + Math.imul(M, Q) | 0, o = o + Math.imul(M, ee) | 0, n = n + Math.imul(w, re) | 0, i = (i = i + Math.imul(w, ne) | 0) + Math.imul(_, re) | 0, o = o + Math.imul(_, ne) | 0, n = n + Math.imul(m, oe) | 0, i = (i = i + Math.imul(m, ae) | 0) + Math.imul(v, oe) | 0, o = o + Math.imul(v, ae) | 0, n = n + Math.imul(p, ue) | 0, i = (i = i + Math.imul(p, ce) | 0) + Math.imul(b, ue) | 0, o = o + Math.imul(b, ce) | 0;
          var Me = (c + (n = n + Math.imul(h, he) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, de) | 0) + Math.imul(d, he) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(d, de) | 0) + (i >>> 13) | 0) + (Me >>> 26) | 0, Me &= 67108863, n = Math.imul(L, F), i = (i = Math.imul(L, H)) + Math.imul(q, F) | 0, o = Math.imul(q, H), n = n + Math.imul(P, K) | 0, i = (i = i + Math.imul(P, V) | 0) + Math.imul(R, K) | 0, o = o + Math.imul(R, V) | 0, n = n + Math.imul(C, W) | 0, i = (i = i + Math.imul(C, X) | 0) + Math.imul(B, W) | 0, o = o + Math.imul(B, X) | 0, n = n + Math.imul(j, Z) | 0, i = (i = i + Math.imul(j, $) | 0) + Math.imul(I, Z) | 0, o = o + Math.imul(I, $) | 0, n = n + Math.imul(E, Q) | 0, i = (i = i + Math.imul(E, ee) | 0) + Math.imul(S, Q) | 0, o = o + Math.imul(S, ee) | 0, n = n + Math.imul(x, re) | 0, i = (i = i + Math.imul(x, ne) | 0) + Math.imul(M, re) | 0, o = o + Math.imul(M, ne) | 0, n = n + Math.imul(w, oe) | 0, i = (i = i + Math.imul(w, ae) | 0) + Math.imul(_, oe) | 0, o = o + Math.imul(_, ae) | 0, n = n + Math.imul(m, ue) | 0, i = (i = i + Math.imul(m, ce) | 0) + Math.imul(v, ue) | 0, o = o + Math.imul(v, ce) | 0, n = n + Math.imul(p, he) | 0, i = (i = i + Math.imul(p, de) | 0) + Math.imul(b, he) | 0, o = o + Math.imul(b, de) | 0;
          var ke = (c + (n = n + Math.imul(h, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, be) | 0) + Math.imul(d, pe) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(d, be) | 0) + (i >>> 13) | 0) + (ke >>> 26) | 0, ke &= 67108863, n = Math.imul(L, K), i = (i = Math.imul(L, V)) + Math.imul(q, K) | 0, o = Math.imul(q, V), n = n + Math.imul(P, W) | 0, i = (i = i + Math.imul(P, X) | 0) + Math.imul(R, W) | 0, o = o + Math.imul(R, X) | 0, n = n + Math.imul(C, Z) | 0, i = (i = i + Math.imul(C, $) | 0) + Math.imul(B, Z) | 0, o = o + Math.imul(B, $) | 0, n = n + Math.imul(j, Q) | 0, i = (i = i + Math.imul(j, ee) | 0) + Math.imul(I, Q) | 0, o = o + Math.imul(I, ee) | 0, n = n + Math.imul(E, re) | 0, i = (i = i + Math.imul(E, ne) | 0) + Math.imul(S, re) | 0, o = o + Math.imul(S, ne) | 0, n = n + Math.imul(x, oe) | 0, i = (i = i + Math.imul(x, ae) | 0) + Math.imul(M, oe) | 0, o = o + Math.imul(M, ae) | 0, n = n + Math.imul(w, ue) | 0, i = (i = i + Math.imul(w, ce) | 0) + Math.imul(_, ue) | 0, o = o + Math.imul(_, ce) | 0, n = n + Math.imul(m, he) | 0, i = (i = i + Math.imul(m, de) | 0) + Math.imul(v, he) | 0, o = o + Math.imul(v, de) | 0;
          var Ee = (c + (n = n + Math.imul(p, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(p, be) | 0) + Math.imul(b, pe) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(b, be) | 0) + (i >>> 13) | 0) + (Ee >>> 26) | 0, Ee &= 67108863, n = Math.imul(L, W), i = (i = Math.imul(L, X)) + Math.imul(q, W) | 0, o = Math.imul(q, X), n = n + Math.imul(P, Z) | 0, i = (i = i + Math.imul(P, $) | 0) + Math.imul(R, Z) | 0, o = o + Math.imul(R, $) | 0, n = n + Math.imul(C, Q) | 0, i = (i = i + Math.imul(C, ee) | 0) + Math.imul(B, Q) | 0, o = o + Math.imul(B, ee) | 0, n = n + Math.imul(j, re) | 0, i = (i = i + Math.imul(j, ne) | 0) + Math.imul(I, re) | 0, o = o + Math.imul(I, ne) | 0, n = n + Math.imul(E, oe) | 0, i = (i = i + Math.imul(E, ae) | 0) + Math.imul(S, oe) | 0, o = o + Math.imul(S, ae) | 0, n = n + Math.imul(x, ue) | 0, i = (i = i + Math.imul(x, ce) | 0) + Math.imul(M, ue) | 0, o = o + Math.imul(M, ce) | 0, n = n + Math.imul(w, he) | 0, i = (i = i + Math.imul(w, de) | 0) + Math.imul(_, he) | 0, o = o + Math.imul(_, de) | 0;
          var Se = (c + (n = n + Math.imul(m, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(m, be) | 0) + Math.imul(v, pe) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(v, be) | 0) + (i >>> 13) | 0) + (Se >>> 26) | 0, Se &= 67108863, n = Math.imul(L, Z), i = (i = Math.imul(L, $)) + Math.imul(q, Z) | 0, o = Math.imul(q, $), n = n + Math.imul(P, Q) | 0, i = (i = i + Math.imul(P, ee) | 0) + Math.imul(R, Q) | 0, o = o + Math.imul(R, ee) | 0, n = n + Math.imul(C, re) | 0, i = (i = i + Math.imul(C, ne) | 0) + Math.imul(B, re) | 0, o = o + Math.imul(B, ne) | 0, n = n + Math.imul(j, oe) | 0, i = (i = i + Math.imul(j, ae) | 0) + Math.imul(I, oe) | 0, o = o + Math.imul(I, ae) | 0, n = n + Math.imul(E, ue) | 0, i = (i = i + Math.imul(E, ce) | 0) + Math.imul(S, ue) | 0, o = o + Math.imul(S, ce) | 0, n = n + Math.imul(x, he) | 0, i = (i = i + Math.imul(x, de) | 0) + Math.imul(M, he) | 0, o = o + Math.imul(M, de) | 0;
          var Ue = (c + (n = n + Math.imul(w, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(w, be) | 0) + Math.imul(_, pe) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(_, be) | 0) + (i >>> 13) | 0) + (Ue >>> 26) | 0, Ue &= 67108863, n = Math.imul(L, Q), i = (i = Math.imul(L, ee)) + Math.imul(q, Q) | 0, o = Math.imul(q, ee), n = n + Math.imul(P, re) | 0, i = (i = i + Math.imul(P, ne) | 0) + Math.imul(R, re) | 0, o = o + Math.imul(R, ne) | 0, n = n + Math.imul(C, oe) | 0, i = (i = i + Math.imul(C, ae) | 0) + Math.imul(B, oe) | 0, o = o + Math.imul(B, ae) | 0, n = n + Math.imul(j, ue) | 0, i = (i = i + Math.imul(j, ce) | 0) + Math.imul(I, ue) | 0, o = o + Math.imul(I, ce) | 0, n = n + Math.imul(E, he) | 0, i = (i = i + Math.imul(E, de) | 0) + Math.imul(S, he) | 0, o = o + Math.imul(S, de) | 0;
          var je = (c + (n = n + Math.imul(x, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(x, be) | 0) + Math.imul(M, pe) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(M, be) | 0) + (i >>> 13) | 0) + (je >>> 26) | 0, je &= 67108863, n = Math.imul(L, re), i = (i = Math.imul(L, ne)) + Math.imul(q, re) | 0, o = Math.imul(q, ne), n = n + Math.imul(P, oe) | 0, i = (i = i + Math.imul(P, ae) | 0) + Math.imul(R, oe) | 0, o = o + Math.imul(R, ae) | 0, n = n + Math.imul(C, ue) | 0, i = (i = i + Math.imul(C, ce) | 0) + Math.imul(B, ue) | 0, o = o + Math.imul(B, ce) | 0, n = n + Math.imul(j, he) | 0, i = (i = i + Math.imul(j, de) | 0) + Math.imul(I, he) | 0, o = o + Math.imul(I, de) | 0;
          var Ie = (c + (n = n + Math.imul(E, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(E, be) | 0) + Math.imul(S, pe) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(S, be) | 0) + (i >>> 13) | 0) + (Ie >>> 26) | 0, Ie &= 67108863, n = Math.imul(L, oe), i = (i = Math.imul(L, ae)) + Math.imul(q, oe) | 0, o = Math.imul(q, ae), n = n + Math.imul(P, ue) | 0, i = (i = i + Math.imul(P, ce) | 0) + Math.imul(R, ue) | 0, o = o + Math.imul(R, ce) | 0, n = n + Math.imul(C, he) | 0, i = (i = i + Math.imul(C, de) | 0) + Math.imul(B, he) | 0, o = o + Math.imul(B, de) | 0;
          var Te = (c + (n = n + Math.imul(j, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(j, be) | 0) + Math.imul(I, pe) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(I, be) | 0) + (i >>> 13) | 0) + (Te >>> 26) | 0, Te &= 67108863, n = Math.imul(L, ue), i = (i = Math.imul(L, ce)) + Math.imul(q, ue) | 0, o = Math.imul(q, ce), n = n + Math.imul(P, he) | 0, i = (i = i + Math.imul(P, de) | 0) + Math.imul(R, he) | 0, o = o + Math.imul(R, de) | 0;
          var Ce = (c + (n = n + Math.imul(C, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(C, be) | 0) + Math.imul(B, pe) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(B, be) | 0) + (i >>> 13) | 0) + (Ce >>> 26) | 0, Ce &= 67108863, n = Math.imul(L, he), i = (i = Math.imul(L, de)) + Math.imul(q, he) | 0, o = Math.imul(q, de);
          var Be = (c + (n = n + Math.imul(P, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(P, be) | 0) + Math.imul(R, pe) | 0)) << 13) | 0;
          c = ((o = o + Math.imul(R, be) | 0) + (i >>> 13) | 0) + (Be >>> 26) | 0, Be &= 67108863;
          var Ne = (c + (n = Math.imul(L, pe)) | 0) + ((8191 & (i = (i = Math.imul(L, be)) + Math.imul(q, pe) | 0)) << 13) | 0;
          return c = ((o = Math.imul(q, be)) + (i >>> 13) | 0) + (Ne >>> 26) | 0, Ne &= 67108863, u[0] = ye, u[1] = me, u[2] = ve, u[3] = ge, u[4] = we, u[5] = _e, u[6] = Ae, u[7] = xe, u[8] = Me, u[9] = ke, u[10] = Ee, u[11] = Se, u[12] = Ue, u[13] = je, u[14] = Ie, u[15] = Te, u[16] = Ce, u[17] = Be, u[18] = Ne, 0 !== c && (u[19] = c, r.length++), r;
        };

        function s(e, t, r) {
          return new u().mulp(e, t, r);
        }

        function u(e, t) {
          this.x = e, this.y = t;
        }

        Math.imul || (o = i), m.prototype.mulTo = function (e, t) {
          var r = this.length + e.length;
          return 10 === this.length && 10 === e.length ? o(this, e, t) : r < 63 ? i(this, e, t) : r < 1024 ? function (e, t, r) {
            r.negative = t.negative ^ e.negative, r.length = e.length + t.length;

            for (var n = 0, i = 0, o = 0; o < r.length - 1; o++) {
              var a = i;
              i = 0;

              for (var s = 67108863 & n, u = Math.min(o, t.length - 1), c = Math.max(0, o - e.length + 1); c <= u; c++) {
                var f = o - c,
                    h = (0 | e.words[f]) * (0 | t.words[c]),
                    d = 67108863 & h;
                s = 67108863 & (d = d + s | 0), i += (a = (a = a + (h / 67108864 | 0) | 0) + (d >>> 26) | 0) >>> 26, a &= 67108863;
              }

              r.words[o] = s, n = a, a = i;
            }

            return 0 !== n ? r.words[o] = n : r.length--, r.strip();
          }(this, e, t) : s(this, e, t);
        }, u.prototype.makeRBT = function (e) {
          for (var t = new Array(e), r = m.prototype._countBits(e) - 1, n = 0; n < e; n++) {
            t[n] = this.revBin(n, r, e);
          }

          return t;
        }, u.prototype.revBin = function (e, t, r) {
          if (0 === e || e === r - 1) return e;

          for (var n = 0, i = 0; i < t; i++) {
            n |= (1 & e) << t - i - 1, e >>= 1;
          }

          return n;
        }, u.prototype.permute = function (e, t, r, n, i, o) {
          for (var a = 0; a < o; a++) {
            n[a] = t[e[a]], i[a] = r[e[a]];
          }
        }, u.prototype.transform = function (e, t, r, n, i, o) {
          this.permute(o, e, t, r, n, i);

          for (var a = 1; a < i; a <<= 1) {
            for (var s = a << 1, u = Math.cos(2 * Math.PI / s), c = Math.sin(2 * Math.PI / s), f = 0; f < i; f += s) {
              for (var h = u, d = c, l = 0; l < a; l++) {
                var p = r[f + l],
                    b = n[f + l],
                    y = r[f + l + a],
                    m = n[f + l + a],
                    v = h * y - d * m;
                m = h * m + d * y, y = v, r[f + l] = p + y, n[f + l] = b + m, r[f + l + a] = p - y, n[f + l + a] = b - m, l !== s && (v = u * h - c * d, d = u * d + c * h, h = v);
              }
            }
          }
        }, u.prototype.guessLen13b = function (e, t) {
          var r = 1 | Math.max(t, e),
              n = 1 & r,
              i = 0;

          for (r = r / 2 | 0; r; r >>>= 1) {
            i++;
          }

          return 1 << i + 1 + n;
        }, u.prototype.conjugate = function (e, t, r) {
          if (!(r <= 1)) for (var n = 0; n < r / 2; n++) {
            var i = e[n];
            e[n] = e[r - n - 1], e[r - n - 1] = i, i = t[n], t[n] = -t[r - n - 1], t[r - n - 1] = -i;
          }
        }, u.prototype.normalize13b = function (e, t) {
          for (var r = 0, n = 0; n < t / 2; n++) {
            var i = 8192 * Math.round(e[2 * n + 1] / t) + Math.round(e[2 * n] / t) + r;
            e[n] = 67108863 & i, r = i < 67108864 ? 0 : i / 67108864 | 0;
          }

          return e;
        }, u.prototype.convert13b = function (e, t, r, n) {
          for (var i = 0, o = 0; o < t; o++) {
            i += 0 | e[o], r[2 * o] = 8191 & i, i >>>= 13, r[2 * o + 1] = 8191 & i, i >>>= 13;
          }

          for (o = 2 * t; o < n; ++o) {
            r[o] = 0;
          }

          y(0 === i), y(0 == (-8192 & i));
        }, u.prototype.stub = function (e) {
          for (var t = new Array(e), r = 0; r < e; r++) {
            t[r] = 0;
          }

          return t;
        }, u.prototype.mulp = function (e, t, r) {
          var n = 2 * this.guessLen13b(e.length, t.length),
              i = this.makeRBT(n),
              o = this.stub(n),
              a = new Array(n),
              s = new Array(n),
              u = new Array(n),
              c = new Array(n),
              f = new Array(n),
              h = new Array(n),
              d = r.words;
          d.length = n, this.convert13b(e.words, e.length, a, n), this.convert13b(t.words, t.length, c, n), this.transform(a, o, s, u, n, i), this.transform(c, o, f, h, n, i);

          for (var l = 0; l < n; l++) {
            var p = s[l] * f[l] - u[l] * h[l];
            u[l] = s[l] * h[l] + u[l] * f[l], s[l] = p;
          }

          return this.conjugate(s, u, n), this.transform(s, u, d, o, n, i), this.conjugate(d, o, n), this.normalize13b(d, n), r.negative = e.negative ^ t.negative, r.length = e.length + t.length, r.strip();
        }, m.prototype.mul = function (e) {
          var t = new m(null);
          return t.words = new Array(this.length + e.length), this.mulTo(e, t);
        }, m.prototype.mulf = function (e) {
          var t = new m(null);
          return t.words = new Array(this.length + e.length), s(this, e, t);
        }, m.prototype.imul = function (e) {
          return this.clone().mulTo(e, this);
        }, m.prototype.imuln = function (e) {
          y("number" == typeof e), y(e < 67108864);

          for (var t = 0, r = 0; r < this.length; r++) {
            var n = (0 | this.words[r]) * e,
                i = (67108863 & n) + (67108863 & t);
            t >>= 26, t += n / 67108864 | 0, t += i >>> 26, this.words[r] = 67108863 & i;
          }

          return 0 !== t && (this.words[r] = t, this.length++), this;
        }, m.prototype.muln = function (e) {
          return this.clone().imuln(e);
        }, m.prototype.sqr = function () {
          return this.mul(this);
        }, m.prototype.isqr = function () {
          return this.imul(this.clone());
        }, m.prototype.pow = function (e) {
          var t = function (e) {
            for (var t = new Array(e.bitLength()), r = 0; r < t.length; r++) {
              var n = r / 26 | 0,
                  i = r % 26;
              t[r] = (e.words[n] & 1 << i) >>> i;
            }

            return t;
          }(e);

          if (0 === t.length) return new m(1);

          for (var r = this, n = 0; n < t.length && 0 === t[n]; n++, r = r.sqr()) {
            ;
          }

          if (++n < t.length) for (var i = r.sqr(); n < t.length; n++, i = i.sqr()) {
            0 !== t[n] && (r = r.mul(i));
          }
          return r;
        }, m.prototype.iushln = function (e) {
          y("number" == typeof e && 0 <= e);
          var t,
              r = e % 26,
              n = (e - r) / 26,
              i = 67108863 >>> 26 - r << 26 - r;

          if (0 !== r) {
            var o = 0;

            for (t = 0; t < this.length; t++) {
              var a = this.words[t] & i,
                  s = (0 | this.words[t]) - a << r;
              this.words[t] = s | o, o = a >>> 26 - r;
            }

            o && (this.words[t] = o, this.length++);
          }

          if (0 !== n) {
            for (t = this.length - 1; 0 <= t; t--) {
              this.words[t + n] = this.words[t];
            }

            for (t = 0; t < n; t++) {
              this.words[t] = 0;
            }

            this.length += n;
          }

          return this.strip();
        }, m.prototype.ishln = function (e) {
          return y(0 === this.negative), this.iushln(e);
        }, m.prototype.iushrn = function (e, t, r) {
          var n;
          y("number" == typeof e && 0 <= e), n = t ? (t - t % 26) / 26 : 0;
          var i = e % 26,
              o = Math.min((e - i) / 26, this.length),
              a = 67108863 ^ 67108863 >>> i << i,
              s = r;

          if (n -= o, n = Math.max(0, n), s) {
            for (var u = 0; u < o; u++) {
              s.words[u] = this.words[u];
            }

            s.length = o;
          }

          if (0 === o) ;else if (this.length > o) for (this.length -= o, u = 0; u < this.length; u++) {
            this.words[u] = this.words[u + o];
          } else this.words[0] = 0, this.length = 1;
          var c = 0;

          for (u = this.length - 1; 0 <= u && (0 !== c || n <= u); u--) {
            var f = 0 | this.words[u];
            this.words[u] = c << 26 - i | f >>> i, c = f & a;
          }

          return s && 0 !== c && (s.words[s.length++] = c), 0 === this.length && (this.words[0] = 0, this.length = 1), this.strip();
        }, m.prototype.ishrn = function (e, t, r) {
          return y(0 === this.negative), this.iushrn(e, t, r);
        }, m.prototype.shln = function (e) {
          return this.clone().ishln(e);
        }, m.prototype.ushln = function (e) {
          return this.clone().iushln(e);
        }, m.prototype.shrn = function (e) {
          return this.clone().ishrn(e);
        }, m.prototype.ushrn = function (e) {
          return this.clone().iushrn(e);
        }, m.prototype.testn = function (e) {
          y("number" == typeof e && 0 <= e);
          var t = e % 26,
              r = (e - t) / 26,
              n = 1 << t;
          return !(this.length <= r) && !!(this.words[r] & n);
        }, m.prototype.imaskn = function (e) {
          y("number" == typeof e && 0 <= e);
          var t = e % 26,
              r = (e - t) / 26;
          if (y(0 === this.negative, "imaskn works only with positive numbers"), this.length <= r) return this;

          if (0 !== t && r++, this.length = Math.min(r, this.length), 0 !== t) {
            var n = 67108863 ^ 67108863 >>> t << t;
            this.words[this.length - 1] &= n;
          }

          return this.strip();
        }, m.prototype.maskn = function (e) {
          return this.clone().imaskn(e);
        }, m.prototype.iaddn = function (e) {
          return y("number" == typeof e), y(e < 67108864), e < 0 ? this.isubn(-e) : 0 !== this.negative ? (1 === this.length && (0 | this.words[0]) < e ? (this.words[0] = e - (0 | this.words[0]), this.negative = 0) : (this.negative = 0, this.isubn(e), this.negative = 1), this) : this._iaddn(e);
        }, m.prototype._iaddn = function (e) {
          this.words[0] += e;

          for (var t = 0; t < this.length && 67108864 <= this.words[t]; t++) {
            this.words[t] -= 67108864, t === this.length - 1 ? this.words[t + 1] = 1 : this.words[t + 1]++;
          }

          return this.length = Math.max(this.length, t + 1), this;
        }, m.prototype.isubn = function (e) {
          if (y("number" == typeof e), y(e < 67108864), e < 0) return this.iaddn(-e);
          if (0 !== this.negative) return this.negative = 0, this.iaddn(e), this.negative = 1, this;
          if (this.words[0] -= e, 1 === this.length && this.words[0] < 0) this.words[0] = -this.words[0], this.negative = 1;else for (var t = 0; t < this.length && this.words[t] < 0; t++) {
            this.words[t] += 67108864, this.words[t + 1] -= 1;
          }
          return this.strip();
        }, m.prototype.addn = function (e) {
          return this.clone().iaddn(e);
        }, m.prototype.subn = function (e) {
          return this.clone().isubn(e);
        }, m.prototype.iabs = function () {
          return this.negative = 0, this;
        }, m.prototype.abs = function () {
          return this.clone().iabs();
        }, m.prototype._ishlnsubmul = function (e, t, r) {
          var n,
              i,
              o = e.length + r;

          this._expand(o);

          var a = 0;

          for (n = 0; n < e.length; n++) {
            i = (0 | this.words[n + r]) + a;
            var s = (0 | e.words[n]) * t;
            a = ((i -= 67108863 & s) >> 26) - (s / 67108864 | 0), this.words[n + r] = 67108863 & i;
          }

          for (; n < this.length - r; n++) {
            a = (i = (0 | this.words[n + r]) + a) >> 26, this.words[n + r] = 67108863 & i;
          }

          if (0 === a) return this.strip();

          for (y(-1 === a), n = a = 0; n < this.length; n++) {
            a = (i = -(0 | this.words[n]) + a) >> 26, this.words[n] = 67108863 & i;
          }

          return this.negative = 1, this.strip();
        }, m.prototype._wordDiv = function (e, t) {
          var r = (this.length, e.length),
              n = this.clone(),
              i = e,
              o = 0 | i.words[i.length - 1];
          0 !== (r = 26 - this._countBits(o)) && (i = i.ushln(r), n.iushln(r), o = 0 | i.words[i.length - 1]);
          var a,
              s = n.length - i.length;

          if ("mod" !== t) {
            (a = new m(null)).length = s + 1, a.words = new Array(a.length);

            for (var u = 0; u < a.length; u++) {
              a.words[u] = 0;
            }
          }

          var c = n.clone()._ishlnsubmul(i, 1, s);

          0 === c.negative && (n = c, a && (a.words[s] = 1));

          for (var f = s - 1; 0 <= f; f--) {
            var h = 67108864 * (0 | n.words[i.length + f]) + (0 | n.words[i.length + f - 1]);

            for (h = Math.min(h / o | 0, 67108863), n._ishlnsubmul(i, h, f); 0 !== n.negative;) {
              h--, n.negative = 0, n._ishlnsubmul(i, 1, f), n.isZero() || (n.negative ^= 1);
            }

            a && (a.words[f] = h);
          }

          return a && a.strip(), n.strip(), "div" !== t && 0 !== r && n.iushrn(r), {
            div: a || null,
            mod: n
          };
        }, m.prototype.divmod = function (e, t, r) {
          return y(!e.isZero()), this.isZero() ? {
            div: new m(0),
            mod: new m(0)
          } : 0 !== this.negative && 0 === e.negative ? (o = this.neg().divmod(e, t), "mod" !== t && (n = o.div.neg()), "div" !== t && (i = o.mod.neg(), r && 0 !== i.negative && i.iadd(e)), {
            div: n,
            mod: i
          }) : 0 === this.negative && 0 !== e.negative ? (o = this.divmod(e.neg(), t), "mod" !== t && (n = o.div.neg()), {
            div: n,
            mod: o.mod
          }) : 0 != (this.negative & e.negative) ? (o = this.neg().divmod(e.neg(), t), "div" !== t && (i = o.mod.neg(), r && 0 !== i.negative && i.isub(e)), {
            div: o.div,
            mod: i
          }) : e.length > this.length || this.cmp(e) < 0 ? {
            div: new m(0),
            mod: this
          } : 1 === e.length ? "div" === t ? {
            div: this.divn(e.words[0]),
            mod: null
          } : "mod" === t ? {
            div: null,
            mod: new m(this.modn(e.words[0]))
          } : {
            div: this.divn(e.words[0]),
            mod: new m(this.modn(e.words[0]))
          } : this._wordDiv(e, t);
          var n, i, o;
        }, m.prototype.div = function (e) {
          return this.divmod(e, "div", !1).div;
        }, m.prototype.mod = function (e) {
          return this.divmod(e, "mod", !1).mod;
        }, m.prototype.umod = function (e) {
          return this.divmod(e, "mod", !0).mod;
        }, m.prototype.divRound = function (e) {
          var t = this.divmod(e);
          if (t.mod.isZero()) return t.div;
          var r = 0 !== t.div.negative ? t.mod.isub(e) : t.mod,
              n = e.ushrn(1),
              i = e.andln(1),
              o = r.cmp(n);
          return o < 0 || 1 === i && 0 === o ? t.div : 0 !== t.div.negative ? t.div.isubn(1) : t.div.iaddn(1);
        }, m.prototype.modn = function (e) {
          y(e <= 67108863);

          for (var t = (1 << 26) % e, r = 0, n = this.length - 1; 0 <= n; n--) {
            r = (t * r + (0 | this.words[n])) % e;
          }

          return r;
        }, m.prototype.idivn = function (e) {
          y(e <= 67108863);

          for (var t = 0, r = this.length - 1; 0 <= r; r--) {
            var n = (0 | this.words[r]) + 67108864 * t;
            this.words[r] = n / e | 0, t = n % e;
          }

          return this.strip();
        }, m.prototype.divn = function (e) {
          return this.clone().idivn(e);
        }, m.prototype.egcd = function (e) {
          y(0 === e.negative), y(!e.isZero());
          var t = this,
              r = e.clone();
          t = 0 !== t.negative ? t.umod(e) : t.clone();

          for (var n = new m(1), i = new m(0), o = new m(0), a = new m(1), s = 0; t.isEven() && r.isEven();) {
            t.iushrn(1), r.iushrn(1), ++s;
          }

          for (var u = r.clone(), c = t.clone(); !t.isZero();) {
            for (var f = 0, h = 1; 0 == (t.words[0] & h) && f < 26; ++f, h <<= 1) {
              ;
            }

            if (0 < f) for (t.iushrn(f); 0 < f--;) {
              (n.isOdd() || i.isOdd()) && (n.iadd(u), i.isub(c)), n.iushrn(1), i.iushrn(1);
            }

            for (var d = 0, l = 1; 0 == (r.words[0] & l) && d < 26; ++d, l <<= 1) {
              ;
            }

            if (0 < d) for (r.iushrn(d); 0 < d--;) {
              (o.isOdd() || a.isOdd()) && (o.iadd(u), a.isub(c)), o.iushrn(1), a.iushrn(1);
            }
            0 <= t.cmp(r) ? (t.isub(r), n.isub(o), i.isub(a)) : (r.isub(t), o.isub(n), a.isub(i));
          }

          return {
            a: o,
            b: a,
            gcd: r.iushln(s)
          };
        }, m.prototype._invmp = function (e) {
          y(0 === e.negative), y(!e.isZero());
          var t = this,
              r = e.clone();
          t = 0 !== t.negative ? t.umod(e) : t.clone();

          for (var n, i = new m(1), o = new m(0), a = r.clone(); 0 < t.cmpn(1) && 0 < r.cmpn(1);) {
            for (var s = 0, u = 1; 0 == (t.words[0] & u) && s < 26; ++s, u <<= 1) {
              ;
            }

            if (0 < s) for (t.iushrn(s); 0 < s--;) {
              i.isOdd() && i.iadd(a), i.iushrn(1);
            }

            for (var c = 0, f = 1; 0 == (r.words[0] & f) && c < 26; ++c, f <<= 1) {
              ;
            }

            if (0 < c) for (r.iushrn(c); 0 < c--;) {
              o.isOdd() && o.iadd(a), o.iushrn(1);
            }
            0 <= t.cmp(r) ? (t.isub(r), i.isub(o)) : (r.isub(t), o.isub(i));
          }

          return (n = 0 === t.cmpn(1) ? i : o).cmpn(0) < 0 && n.iadd(e), n;
        }, m.prototype.gcd = function (e) {
          if (this.isZero()) return e.abs();
          if (e.isZero()) return this.abs();
          var t = this.clone(),
              r = e.clone();
          t.negative = 0;

          for (var n = r.negative = 0; t.isEven() && r.isEven(); n++) {
            t.iushrn(1), r.iushrn(1);
          }

          for (;;) {
            for (; t.isEven();) {
              t.iushrn(1);
            }

            for (; r.isEven();) {
              r.iushrn(1);
            }

            var i = t.cmp(r);

            if (i < 0) {
              var o = t;
              t = r, r = o;
            } else if (0 === i || 0 === r.cmpn(1)) break;

            t.isub(r);
          }

          return r.iushln(n);
        }, m.prototype.invm = function (e) {
          return this.egcd(e).a.umod(e);
        }, m.prototype.isEven = function () {
          return 0 == (1 & this.words[0]);
        }, m.prototype.isOdd = function () {
          return 1 == (1 & this.words[0]);
        }, m.prototype.andln = function (e) {
          return this.words[0] & e;
        }, m.prototype.bincn = function (e) {
          y("number" == typeof e);
          var t = e % 26,
              r = (e - t) / 26,
              n = 1 << t;
          if (this.length <= r) return this._expand(r + 1), this.words[r] |= n, this;

          for (var i = n, o = r; 0 !== i && o < this.length; o++) {
            var a = 0 | this.words[o];
            i = (a += i) >>> 26, a &= 67108863, this.words[o] = a;
          }

          return 0 !== i && (this.words[o] = i, this.length++), this;
        }, m.prototype.isZero = function () {
          return 1 === this.length && 0 === this.words[0];
        }, m.prototype.cmpn = function (e) {
          var t,
              r = e < 0;
          if (0 !== this.negative && !r) return -1;
          if (0 === this.negative && r) return 1;
          if (this.strip(), 1 < this.length) t = 1;else {
            r && (e = -e), y(e <= 67108863, "Number is too big");
            var n = 0 | this.words[0];
            t = n === e ? 0 : n < e ? -1 : 1;
          }
          return 0 !== this.negative ? 0 | -t : t;
        }, m.prototype.cmp = function (e) {
          if (0 !== this.negative && 0 === e.negative) return -1;
          if (0 === this.negative && 0 !== e.negative) return 1;
          var t = this.ucmp(e);
          return 0 !== this.negative ? 0 | -t : t;
        }, m.prototype.ucmp = function (e) {
          if (this.length > e.length) return 1;
          if (this.length < e.length) return -1;

          for (var t = 0, r = this.length - 1; 0 <= r; r--) {
            var n = 0 | this.words[r],
                i = 0 | e.words[r];

            if (n !== i) {
              n < i ? t = -1 : i < n && (t = 1);
              break;
            }
          }

          return t;
        }, m.prototype.gtn = function (e) {
          return 1 === this.cmpn(e);
        }, m.prototype.gt = function (e) {
          return 1 === this.cmp(e);
        }, m.prototype.gten = function (e) {
          return 0 <= this.cmpn(e);
        }, m.prototype.gte = function (e) {
          return 0 <= this.cmp(e);
        }, m.prototype.ltn = function (e) {
          return -1 === this.cmpn(e);
        }, m.prototype.lt = function (e) {
          return -1 === this.cmp(e);
        }, m.prototype.lten = function (e) {
          return this.cmpn(e) <= 0;
        }, m.prototype.lte = function (e) {
          return this.cmp(e) <= 0;
        }, m.prototype.eqn = function (e) {
          return 0 === this.cmpn(e);
        }, m.prototype.eq = function (e) {
          return 0 === this.cmp(e);
        }, m.red = function (e) {
          return new _(e);
        }, m.prototype.toRed = function (e) {
          return y(!this.red, "Already a number in reduction context"), y(0 === this.negative, "red works only with positives"), e.convertTo(this)._forceRed(e);
        }, m.prototype.fromRed = function () {
          return y(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
        }, m.prototype._forceRed = function (e) {
          return this.red = e, this;
        }, m.prototype.forceRed = function (e) {
          return y(!this.red, "Already a number in reduction context"), this._forceRed(e);
        }, m.prototype.redAdd = function (e) {
          return y(this.red, "redAdd works only with red numbers"), this.red.add(this, e);
        }, m.prototype.redIAdd = function (e) {
          return y(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, e);
        }, m.prototype.redSub = function (e) {
          return y(this.red, "redSub works only with red numbers"), this.red.sub(this, e);
        }, m.prototype.redISub = function (e) {
          return y(this.red, "redISub works only with red numbers"), this.red.isub(this, e);
        }, m.prototype.redShl = function (e) {
          return y(this.red, "redShl works only with red numbers"), this.red.shl(this, e);
        }, m.prototype.redMul = function (e) {
          return y(this.red, "redMul works only with red numbers"), this.red._verify2(this, e), this.red.mul(this, e);
        }, m.prototype.redIMul = function (e) {
          return y(this.red, "redMul works only with red numbers"), this.red._verify2(this, e), this.red.imul(this, e);
        }, m.prototype.redSqr = function () {
          return y(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
        }, m.prototype.redISqr = function () {
          return y(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
        }, m.prototype.redSqrt = function () {
          return y(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
        }, m.prototype.redInvm = function () {
          return y(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
        }, m.prototype.redNeg = function () {
          return y(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
        }, m.prototype.redPow = function (e) {
          return y(this.red && !e.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, e);
        };
        var c = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
        };

        function f(e, t) {
          this.name = e, this.p = new m(t, 16), this.n = this.p.bitLength(), this.k = new m(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
        }

        function b() {
          f.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
        }

        function v() {
          f.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
        }

        function g() {
          f.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
        }

        function w() {
          f.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
        }

        function _(e) {
          if ("string" == typeof e) {
            var t = m._prime(e);

            this.m = t.p, this.prime = t;
          } else y(e.gtn(1), "modulus must be greater than 1"), this.m = e, this.prime = null;
        }

        function A(e) {
          _.call(this, e), this.shift = this.m.bitLength(), this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26), this.r = new m(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
        }

        f.prototype._tmp = function () {
          var e = new m(null);
          return e.words = new Array(Math.ceil(this.n / 13)), e;
        }, f.prototype.ireduce = function (e) {
          for (var t, r = e; this.split(r, this.tmp), (t = (r = (r = this.imulK(r)).iadd(this.tmp)).bitLength()) > this.n;) {
            ;
          }

          var n = t < this.n ? -1 : r.ucmp(this.p);
          return 0 === n ? (r.words[0] = 0, r.length = 1) : 0 < n ? r.isub(this.p) : r.strip(), r;
        }, f.prototype.split = function (e, t) {
          e.iushrn(this.n, 0, t);
        }, f.prototype.imulK = function (e) {
          return e.imul(this.k);
        }, r(b, f), b.prototype.split = function (e, t) {
          for (var r = Math.min(e.length, 9), n = 0; n < r; n++) {
            t.words[n] = e.words[n];
          }

          if (t.length = r, e.length <= 9) return e.words[0] = 0, void (e.length = 1);
          var i = e.words[9];

          for (t.words[t.length++] = 4194303 & i, n = 10; n < e.length; n++) {
            var o = 0 | e.words[n];
            e.words[n - 10] = (4194303 & o) << 4 | i >>> 22, i = o;
          }

          i >>>= 22, 0 === (e.words[n - 10] = i) && 10 < e.length ? e.length -= 10 : e.length -= 9;
        }, b.prototype.imulK = function (e) {
          e.words[e.length] = 0, e.words[e.length + 1] = 0, e.length += 2;

          for (var t = 0, r = 0; r < e.length; r++) {
            var n = 0 | e.words[r];
            t += 977 * n, e.words[r] = 67108863 & t, t = 64 * n + (t / 67108864 | 0);
          }

          return 0 === e.words[e.length - 1] && (e.length--, 0 === e.words[e.length - 1] && e.length--), e;
        }, r(v, f), r(g, f), r(w, f), w.prototype.imulK = function (e) {
          for (var t = 0, r = 0; r < e.length; r++) {
            var n = 19 * (0 | e.words[r]) + t,
                i = 67108863 & n;
            n >>>= 26, e.words[r] = i, t = n;
          }

          return 0 !== t && (e.words[e.length++] = t), e;
        }, m._prime = function (e) {
          if (c[e]) return c[e];
          var t;
          if ("k256" === e) t = new b();else if ("p224" === e) t = new v();else if ("p192" === e) t = new g();else {
            if ("p25519" !== e) throw new Error("Unknown prime " + e);
            t = new w();
          }
          return c[e] = t;
        }, _.prototype._verify1 = function (e) {
          y(0 === e.negative, "red works only with positives"), y(e.red, "red works only with red numbers");
        }, _.prototype._verify2 = function (e, t) {
          y(0 == (e.negative | t.negative), "red works only with positives"), y(e.red && e.red === t.red, "red works only with red numbers");
        }, _.prototype.imod = function (e) {
          return this.prime ? this.prime.ireduce(e)._forceRed(this) : e.umod(this.m)._forceRed(this);
        }, _.prototype.neg = function (e) {
          return e.isZero() ? e.clone() : this.m.sub(e)._forceRed(this);
        }, _.prototype.add = function (e, t) {
          this._verify2(e, t);

          var r = e.add(t);
          return 0 <= r.cmp(this.m) && r.isub(this.m), r._forceRed(this);
        }, _.prototype.iadd = function (e, t) {
          this._verify2(e, t);

          var r = e.iadd(t);
          return 0 <= r.cmp(this.m) && r.isub(this.m), r;
        }, _.prototype.sub = function (e, t) {
          this._verify2(e, t);

          var r = e.sub(t);
          return r.cmpn(0) < 0 && r.iadd(this.m), r._forceRed(this);
        }, _.prototype.isub = function (e, t) {
          this._verify2(e, t);

          var r = e.isub(t);
          return r.cmpn(0) < 0 && r.iadd(this.m), r;
        }, _.prototype.shl = function (e, t) {
          return this._verify1(e), this.imod(e.ushln(t));
        }, _.prototype.imul = function (e, t) {
          return this._verify2(e, t), this.imod(e.imul(t));
        }, _.prototype.mul = function (e, t) {
          return this._verify2(e, t), this.imod(e.mul(t));
        }, _.prototype.isqr = function (e) {
          return this.imul(e, e.clone());
        }, _.prototype.sqr = function (e) {
          return this.mul(e, e);
        }, _.prototype.sqrt = function (e) {
          if (e.isZero()) return e.clone();
          var t = this.m.andln(3);

          if (y(t % 2 == 1), 3 === t) {
            var r = this.m.add(new m(1)).iushrn(2);
            return this.pow(e, r);
          }

          for (var n = this.m.subn(1), i = 0; !n.isZero() && 0 === n.andln(1);) {
            i++, n.iushrn(1);
          }

          y(!n.isZero());
          var o = new m(1).toRed(this),
              a = o.redNeg(),
              s = this.m.subn(1).iushrn(1),
              u = this.m.bitLength();

          for (u = new m(2 * u * u).toRed(this); 0 !== this.pow(u, s).cmp(a);) {
            u.redIAdd(a);
          }

          for (var c = this.pow(u, n), f = this.pow(e, n.addn(1).iushrn(1)), h = this.pow(e, n), d = i; 0 !== h.cmp(o);) {
            for (var l = h, p = 0; 0 !== l.cmp(o); p++) {
              l = l.redSqr();
            }

            y(p < d);
            var b = this.pow(c, new m(1).iushln(d - p - 1));
            f = f.redMul(b), c = b.redSqr(), h = h.redMul(c), d = p;
          }

          return f;
        }, _.prototype.invm = function (e) {
          var t = e._invmp(this.m);

          return 0 !== t.negative ? (t.negative = 0, this.imod(t).redNeg()) : this.imod(t);
        }, _.prototype.pow = function (e, t) {
          if (t.isZero()) return new m(1);
          if (0 === t.cmpn(1)) return e.clone();
          var r = new Array(16);
          r[0] = new m(1).toRed(this), r[1] = e;

          for (var n = 2; n < r.length; n++) {
            r[n] = this.mul(r[n - 1], e);
          }

          var i = r[0],
              o = 0,
              a = 0,
              s = t.bitLength() % 26;

          for (0 === s && (s = 26), n = t.length - 1; 0 <= n; n--) {
            for (var u = t.words[n], c = s - 1; 0 <= c; c--) {
              var f = u >> c & 1;
              i !== r[0] && (i = this.sqr(i)), 0 !== f || 0 !== o ? (o <<= 1, o |= f, (4 === ++a || 0 === n && 0 === c) && (i = this.mul(i, r[o]), o = a = 0)) : a = 0;
            }

            s = 26;
          }

          return i;
        }, _.prototype.convertTo = function (e) {
          var t = e.umod(this.m);
          return t === e ? t.clone() : t;
        }, _.prototype.convertFrom = function (e) {
          var t = e.clone();
          return t.red = null, t;
        }, m.mont = function (e) {
          return new A(e);
        }, r(A, _), A.prototype.convertTo = function (e) {
          return this.imod(e.ushln(this.shift));
        }, A.prototype.convertFrom = function (e) {
          var t = this.imod(e.mul(this.rinv));
          return t.red = null, t;
        }, A.prototype.imul = function (e, t) {
          if (e.isZero() || t.isZero()) return e.words[0] = 0, e.length = 1, e;
          var r = e.imul(t),
              n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),
              i = r.isub(n).iushrn(this.shift),
              o = i;
          return 0 <= i.cmp(this.m) ? o = i.isub(this.m) : i.cmpn(0) < 0 && (o = i.iadd(this.m)), o._forceRed(this);
        }, A.prototype.mul = function (e, t) {
          if (e.isZero() || t.isZero()) return new m(0)._forceRed(this);
          var r = e.mul(t),
              n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),
              i = r.isub(n).iushrn(this.shift),
              o = i;
          return 0 <= i.cmp(this.m) ? o = i.isub(this.m) : i.cmpn(0) < 0 && (o = i.iadd(this.m)), o._forceRed(this);
        }, A.prototype.invm = function (e) {
          return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this);
        };
      }(void 0 === e || e, this);
    }, {}],
    388: [function (e, t, r) {
      var n = e("web3-utils"),
          i = e("bn.js"),
          o = function o(e) {
        var r = "A".charCodeAt(0),
            n = "Z".charCodeAt(0);
        return (e = (e = e.toUpperCase()).substr(4) + e.substr(0, 4)).split("").map(function (e) {
          var t = e.charCodeAt(0);
          return r <= t && t <= n ? t - r + 10 : e;
        }).join("");
      },
          a = function a(e) {
        for (var t, r = e; 2 < r.length;) {
          t = r.slice(0, 9), r = parseInt(t, 10) % 97 + r.slice(t.length);
        }

        return parseInt(r, 10) % 97;
      },
          s = function s(e) {
        this._iban = e;
      };

      s.toAddress = function (e) {
        if (!(e = new s(e)).isDirect()) throw new Error("IBAN is indirect and can't be converted");
        return e.toAddress();
      }, s.toIban = function (e) {
        return s.fromAddress(e).toString();
      }, s.fromAddress = function (e) {
        if (!n.isAddress(e)) throw new Error("Provided address is not a valid address: " + e);
        e = e.replace("0x", "").replace("0X", "");

        var t = function (e, t) {
          for (var r = e; r.length < 2 * t;) {
            r = "0" + r;
          }

          return r;
        }(new i(e, 16).toString(36), 15);

        return s.fromBban(t.toUpperCase());
      }, s.fromBban = function (e) {
        var t = ("0" + (98 - a(o("XE00" + e)))).slice(-2);
        return new s("XE" + t + e);
      }, s.createIndirect = function (e) {
        return s.fromBban("ETH" + e.institution + e.identifier);
      }, s.isValid = function (e) {
        return new s(e).isValid();
      }, s.prototype.isValid = function () {
        return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) && 1 === a(o(this._iban));
      }, s.prototype.isDirect = function () {
        return 34 === this._iban.length || 35 === this._iban.length;
      }, s.prototype.isIndirect = function () {
        return 20 === this._iban.length;
      }, s.prototype.checksum = function () {
        return this._iban.substr(2, 2);
      }, s.prototype.institution = function () {
        return this.isIndirect() ? this._iban.substr(7, 4) : "";
      }, s.prototype.client = function () {
        return this.isIndirect() ? this._iban.substr(11) : "";
      }, s.prototype.toAddress = function () {
        if (this.isDirect()) {
          var e = this._iban.substr(4),
              t = new i(e, 36);

          return n.toChecksumAddress(t.toString(16, 20));
        }

        return "";
      }, s.prototype.toString = function () {
        return this._iban;
      }, t.exports = s;
    }, {
      "bn.js": 387,
      "web3-utils": 419
    }],
    389: [function (e, t, r) {
      var o = e("web3-core"),
          a = e("web3-core-method"),
          s = e("web3-utils"),
          u = e("web3-net"),
          c = e("web3-core-helpers").formatters,
          n = function n() {
        var t = this;
        o.packageInit(this, arguments), this.net = new u(this.currentProvider);
        var r = null,
            n = "latest";
        Object.defineProperty(this, "defaultAccount", {
          get: function get() {
            return r;
          },
          set: function set(e) {
            return e && (r = s.toChecksumAddress(c.inputAddressFormatter(e))), i.forEach(function (e) {
              e.defaultAccount = r;
            }), e;
          },
          enumerable: !0
        }), Object.defineProperty(this, "defaultBlock", {
          get: function get() {
            return n;
          },
          set: function set(e) {
            return n = e, i.forEach(function (e) {
              e.defaultBlock = n;
            }), e;
          },
          enumerable: !0
        });
        var i = [new a({
          name: "getAccounts",
          call: "personal_listAccounts",
          params: 0,
          outputFormatter: s.toChecksumAddress
        }), new a({
          name: "newAccount",
          call: "personal_newAccount",
          params: 1,
          inputFormatter: [null],
          outputFormatter: s.toChecksumAddress
        }), new a({
          name: "unlockAccount",
          call: "personal_unlockAccount",
          params: 3,
          inputFormatter: [c.inputAddressFormatter, null, null]
        }), new a({
          name: "lockAccount",
          call: "personal_lockAccount",
          params: 1,
          inputFormatter: [c.inputAddressFormatter]
        }), new a({
          name: "importRawKey",
          call: "personal_importRawKey",
          params: 2
        }), new a({
          name: "sendTransaction",
          call: "personal_sendTransaction",
          params: 2,
          inputFormatter: [c.inputTransactionFormatter, null]
        }), new a({
          name: "signTransaction",
          call: "personal_signTransaction",
          params: 2,
          inputFormatter: [c.inputTransactionFormatter, null]
        }), new a({
          name: "sign",
          call: "personal_sign",
          params: 3,
          inputFormatter: [c.inputSignFormatter, c.inputAddressFormatter, null]
        }), new a({
          name: "ecRecover",
          call: "personal_ecRecover",
          params: 2,
          inputFormatter: [c.inputSignFormatter, null]
        })];
        i.forEach(function (e) {
          e.attachToObject(t), e.setRequestManager(t._requestManager), e.defaultBlock = t.defaultBlock, e.defaultAccount = t.defaultAccount;
        });
      };

      o.addProviders(n), t.exports = n;
    }, {
      "web3-core": 218,
      "web3-core-helpers": 200,
      "web3-core-method": 202,
      "web3-net": 393,
      "web3-utils": 419
    }],
    390: [function (e, t, r) {
      arguments[4][187][0].apply(r, arguments);
    }, {
      dup: 187
    }],
    391: [function (e, t, r) {
      var i = e("underscore");

      t.exports = function (r) {
        var n,
            t = this;
        return this.net.getId().then(function (e) {
          return n = e, t.getBlock(0);
        }).then(function (e) {
          var t = "private";
          return "0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3" === e.hash && 1 === n && (t = "main"), "0cd786a2425d16f152c658316c423e6ce1181e15c3295826d7c9904cba9ce303" === e.hash && 2 === n && (t = "morden"), "0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d" === e.hash && 3 === n && (t = "ropsten"), "0x6341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177" === e.hash && 4 === n && (t = "rinkeby"), "0xa3c565fc15c7478862d50ccd6561e3c06b24cc509bf388941c25ea985ce32cb9" === e.hash && 42 === n && (t = "kovan"), i.isFunction(r) && r(null, t), t;
        })["catch"](function (e) {
          if (!i.isFunction(r)) throw e;
          r(e);
        });
      };
    }, {
      underscore: 390
    }],
    392: [function (e, t, r) {
      var s = e("underscore"),
          u = e("web3-core"),
          n = e("web3-core-helpers"),
          c = e("web3-core-subscriptions").subscriptions,
          f = e("web3-core-method"),
          h = e("web3-utils"),
          d = e("web3-net"),
          l = e("web3-eth-ens"),
          p = e("web3-eth-personal"),
          b = e("web3-eth-contract"),
          y = e("web3-eth-iban"),
          m = e("web3-eth-accounts"),
          v = e("web3-eth-abi"),
          g = e("./getNetworkType.js"),
          w = n.formatters,
          _ = function _(e) {
        return s.isString(e[0]) && 0 === e[0].indexOf("0x") ? "eth_getBlockByHash" : "eth_getBlockByNumber";
      },
          A = function A(e) {
        return s.isString(e[0]) && 0 === e[0].indexOf("0x") ? "eth_getTransactionByBlockHashAndIndex" : "eth_getTransactionByBlockNumberAndIndex";
      },
          x = function x(e) {
        return s.isString(e[0]) && 0 === e[0].indexOf("0x") ? "eth_getUncleByBlockHashAndIndex" : "eth_getUncleByBlockNumberAndIndex";
      },
          M = function M(e) {
        return s.isString(e[0]) && 0 === e[0].indexOf("0x") ? "eth_getBlockTransactionCountByHash" : "eth_getBlockTransactionCountByNumber";
      },
          k = function k(e) {
        return s.isString(e[0]) && 0 === e[0].indexOf("0x") ? "eth_getUncleCountByBlockHash" : "eth_getUncleCountByBlockNumber";
      },
          i = function i() {
        var t = this;
        u.packageInit(this, arguments);
        var e = this.setProvider;

        this.setProvider = function () {
          e.apply(t, arguments), t.net.setProvider.apply(t, arguments), t.personal.setProvider.apply(t, arguments), t.accounts.setProvider.apply(t, arguments), t.Contract.setProvider(t.currentProvider, t.accounts);
        };

        var r = null,
            n = "latest";
        Object.defineProperty(this, "defaultAccount", {
          get: function get() {
            return r;
          },
          set: function set(e) {
            return e && (r = h.toChecksumAddress(w.inputAddressFormatter(e))), t.Contract.defaultAccount = r, t.personal.defaultAccount = r, a.forEach(function (e) {
              e.defaultAccount = r;
            }), e;
          },
          enumerable: !0
        }), Object.defineProperty(this, "defaultBlock", {
          get: function get() {
            return n;
          },
          set: function set(e) {
            return n = e, t.Contract.defaultBlock = n, t.personal.defaultBlock = n, a.forEach(function (e) {
              e.defaultBlock = n;
            }), e;
          },
          enumerable: !0
        }), this.clearSubscriptions = t._requestManager.clearSubscriptions, this.net = new d(this.currentProvider), this.net.getNetworkType = g.bind(this), this.accounts = new m(this.currentProvider), this.personal = new p(this.currentProvider), this.personal.defaultAccount = this.defaultAccount;

        var i = this,
            o = function o() {
          b.apply(this, arguments);
          var e = this,
              t = i.setProvider;

          i.setProvider = function () {
            t.apply(i, arguments), u.packageInit(e, [i.currentProvider]);
          };
        };

        o.setProvider = function () {
          b.setProvider.apply(this, arguments);
        }, (o.prototype = Object.create(b.prototype)).constructor = o, this.Contract = o, this.Contract.defaultAccount = this.defaultAccount, this.Contract.defaultBlock = this.defaultBlock, this.Contract.setProvider(this.currentProvider, this.accounts), this.Iban = y, this.abi = v, this.ens = new l(this);
        var a = [new f({
          name: "getNodeInfo",
          call: "web3_clientVersion"
        }), new f({
          name: "getProtocolVersion",
          call: "eth_protocolVersion",
          params: 0
        }), new f({
          name: "getCoinbase",
          call: "eth_coinbase",
          params: 0
        }), new f({
          name: "isMining",
          call: "eth_mining",
          params: 0
        }), new f({
          name: "getHashrate",
          call: "eth_hashrate",
          params: 0,
          outputFormatter: h.hexToNumber
        }), new f({
          name: "isSyncing",
          call: "eth_syncing",
          params: 0,
          outputFormatter: w.outputSyncingFormatter
        }), new f({
          name: "getGasPrice",
          call: "eth_gasPrice",
          params: 0,
          outputFormatter: w.outputBigNumberFormatter
        }), new f({
          name: "getAccounts",
          call: "eth_accounts",
          params: 0,
          outputFormatter: h.toChecksumAddress
        }), new f({
          name: "getBlockNumber",
          call: "eth_blockNumber",
          params: 0,
          outputFormatter: h.hexToNumber
        }), new f({
          name: "getBalance",
          call: "eth_getBalance",
          params: 2,
          inputFormatter: [w.inputAddressFormatter, w.inputDefaultBlockNumberFormatter],
          outputFormatter: w.outputBigNumberFormatter
        }), new f({
          name: "getStorageAt",
          call: "eth_getStorageAt",
          params: 3,
          inputFormatter: [w.inputAddressFormatter, h.numberToHex, w.inputDefaultBlockNumberFormatter]
        }), new f({
          name: "getCode",
          call: "eth_getCode",
          params: 2,
          inputFormatter: [w.inputAddressFormatter, w.inputDefaultBlockNumberFormatter]
        }), new f({
          name: "getBlock",
          call: _,
          params: 2,
          inputFormatter: [w.inputBlockNumberFormatter, function (e) {
            return !!e;
          }],
          outputFormatter: w.outputBlockFormatter
        }), new f({
          name: "getUncle",
          call: x,
          params: 2,
          inputFormatter: [w.inputBlockNumberFormatter, h.numberToHex],
          outputFormatter: w.outputBlockFormatter
        }), new f({
          name: "getBlockTransactionCount",
          call: M,
          params: 1,
          inputFormatter: [w.inputBlockNumberFormatter],
          outputFormatter: h.hexToNumber
        }), new f({
          name: "getBlockUncleCount",
          call: k,
          params: 1,
          inputFormatter: [w.inputBlockNumberFormatter],
          outputFormatter: h.hexToNumber
        }), new f({
          name: "getTransaction",
          call: "eth_getTransactionByHash",
          params: 1,
          inputFormatter: [null],
          outputFormatter: w.outputTransactionFormatter
        }), new f({
          name: "getTransactionFromBlock",
          call: A,
          params: 2,
          inputFormatter: [w.inputBlockNumberFormatter, h.numberToHex],
          outputFormatter: w.outputTransactionFormatter
        }), new f({
          name: "getTransactionReceipt",
          call: "eth_getTransactionReceipt",
          params: 1,
          inputFormatter: [null],
          outputFormatter: w.outputTransactionReceiptFormatter
        }), new f({
          name: "getTransactionCount",
          call: "eth_getTransactionCount",
          params: 2,
          inputFormatter: [w.inputAddressFormatter, w.inputDefaultBlockNumberFormatter],
          outputFormatter: h.hexToNumber
        }), new f({
          name: "sendSignedTransaction",
          call: "eth_sendRawTransaction",
          params: 1,
          inputFormatter: [null]
        }), new f({
          name: "signTransaction",
          call: "eth_signTransaction",
          params: 1,
          inputFormatter: [w.inputTransactionFormatter]
        }), new f({
          name: "sendTransaction",
          call: "eth_sendTransaction",
          params: 1,
          inputFormatter: [w.inputTransactionFormatter]
        }), new f({
          name: "sign",
          call: "eth_sign",
          params: 2,
          inputFormatter: [w.inputSignFormatter, w.inputAddressFormatter],
          transformPayload: function transformPayload(e) {
            return e.params.reverse(), e;
          }
        }), new f({
          name: "call",
          call: "eth_call",
          params: 2,
          inputFormatter: [w.inputCallFormatter, w.inputDefaultBlockNumberFormatter]
        }), new f({
          name: "estimateGas",
          call: "eth_estimateGas",
          params: 1,
          inputFormatter: [w.inputCallFormatter],
          outputFormatter: h.hexToNumber
        }), new f({
          name: "submitWork",
          call: "eth_submitWork",
          params: 3
        }), new f({
          name: "getWork",
          call: "eth_getWork",
          params: 0
        }), new f({
          name: "getPastLogs",
          call: "eth_getLogs",
          params: 1,
          inputFormatter: [w.inputLogFormatter],
          outputFormatter: w.outputLogFormatter
        }), new c({
          name: "subscribe",
          type: "eth",
          subscriptions: {
            newBlockHeaders: {
              subscriptionName: "newHeads",
              params: 0,
              outputFormatter: w.outputBlockFormatter
            },
            pendingTransactions: {
              subscriptionName: "newPendingTransactions",
              params: 0
            },
            logs: {
              params: 1,
              inputFormatter: [w.inputLogFormatter],
              outputFormatter: w.outputLogFormatter,
              subscriptionHandler: function subscriptionHandler(e) {
                e.removed ? this.emit("changed", e) : this.emit("data", e), s.isFunction(this.callback) && this.callback(null, e, this);
              }
            },
            syncing: {
              params: 0,
              outputFormatter: w.outputSyncingFormatter,
              subscriptionHandler: function subscriptionHandler(e) {
                var t = this;
                !0 !== this._isSyncing ? (this._isSyncing = !0, this.emit("changed", t._isSyncing), s.isFunction(this.callback) && this.callback(null, t._isSyncing, this), setTimeout(function () {
                  t.emit("data", e), s.isFunction(t.callback) && t.callback(null, e, t);
                }, 0)) : (this.emit("data", e), s.isFunction(t.callback) && this.callback(null, e, this), clearTimeout(this._isSyncingTimeout), this._isSyncingTimeout = setTimeout(function () {
                  e.currentBlock > e.highestBlock - 200 && (t._isSyncing = !1, t.emit("changed", t._isSyncing), s.isFunction(t.callback) && t.callback(null, t._isSyncing, t));
                }, 500));
              }
            }
          }
        })];
        a.forEach(function (e) {
          e.attachToObject(t), e.setRequestManager(t._requestManager, t.accounts), e.defaultBlock = t.defaultBlock, e.defaultAccount = t.defaultAccount;
        });
      };

      u.addProviders(i), t.exports = i;
    }, {
      "./getNetworkType.js": 391,
      underscore: 390,
      "web3-core": 218,
      "web3-core-helpers": 200,
      "web3-core-method": 202,
      "web3-core-subscriptions": 215,
      "web3-eth-abi": 232,
      "web3-eth-accounts": 372,
      "web3-eth-contract": 374,
      "web3-eth-ens": 383,
      "web3-eth-iban": 388,
      "web3-eth-personal": 389,
      "web3-net": 393,
      "web3-utils": 419
    }],
    393: [function (e, t, r) {
      var n = e("web3-core"),
          i = e("web3-core-method"),
          o = e("web3-utils"),
          a = function a() {
        var t = this;
        n.packageInit(this, arguments), [new i({
          name: "getId",
          call: "net_version",
          params: 0,
          outputFormatter: o.hexToNumber
        }), new i({
          name: "isListening",
          call: "net_listening",
          params: 0
        }), new i({
          name: "getPeerCount",
          call: "net_peerCount",
          params: 0,
          outputFormatter: o.hexToNumber
        })].forEach(function (e) {
          e.attachToObject(t), e.setRequestManager(t._requestManager);
        });
      };

      n.addProviders(a), t.exports = a;
    }, {
      "web3-core": 218,
      "web3-core-method": 202,
      "web3-utils": 419
    }],
    394: [function (e, t, r) {
      !function () {
        function i(e, t, r, n) {
          return this instanceof i ? (this.domain = e || void 0, this.path = t || "/", this.secure = !!r, this.script = !!n, this) : new i(e, t, r, n);
        }

        function u(e, t, r) {
          return e instanceof u ? e : this instanceof u ? (this.name = null, this.value = null, this.expiration_date = 1 / 0, this.path = String(r || "/"), this.explicit_path = !1, this.domain = t || null, this.explicit_domain = !1, this.secure = !1, this.noscript = !1, e && this.parse(e, t, r), this) : new u(e, t, r);
        }

        i.All = Object.freeze(Object.create(null)), r.CookieAccessInfo = i, (r.Cookie = u).prototype.toString = function () {
          var e = [this.name + "=" + this.value];
          return this.expiration_date !== 1 / 0 && e.push("expires=" + new Date(this.expiration_date).toGMTString()), this.domain && e.push("domain=" + this.domain), this.path && e.push("path=" + this.path), this.secure && e.push("secure"), this.noscript && e.push("httponly"), e.join("; ");
        }, u.prototype.toValueString = function () {
          return this.name + "=" + this.value;
        };
        var a = /[:](?=\s*[a-zA-Z0-9_\-]+\s*[=])/g;

        function e() {
          var o, a;
          return this instanceof e ? (o = Object.create(null), this.setCookie = function (e, t, r) {
            var n, i;

            if (n = (e = new u(e, t, r)).expiration_date <= Date.now(), void 0 !== o[e.name]) {
              for (a = o[e.name], i = 0; i < a.length; i += 1) {
                if (a[i].collidesWith(e)) return n ? (a.splice(i, 1), 0 === a.length && delete o[e.name], !1) : a[i] = e;
              }

              return !n && (a.push(e), e);
            }

            return !n && (o[e.name] = [e], o[e.name]);
          }, this.getCookie = function (e, t) {
            var r, n;
            if (a = o[e]) for (n = 0; n < a.length; n += 1) {
              if ((r = a[n]).expiration_date <= Date.now()) 0 === a.length && delete o[r.name];else if (r.matches(t)) return r;
            }
          }, this.getCookies = function (e) {
            var t,
                r,
                n = [];

            for (t in o) {
              (r = this.getCookie(t, e)) && n.push(r);
            }

            return n.toString = function () {
              return n.join(":");
            }, n.toValueString = function () {
              return n.map(function (e) {
                return e.toValueString();
              }).join(";");
            }, n;
          }, this) : new e();
        }

        u.prototype.parse = function (e, t, r) {
          if (this instanceof u) {
            var n,
                i = e.split(";").filter(function (e) {
              return !!e;
            }),
                o = i[0].match(/([^=]+)=([\s\S]*)/);
            if (!o) return void console.warn("Invalid cookie header encountered. Header: '" + e + "'");
            var a = o[1],
                s = o[2];
            if ("string" != typeof a || 0 === a.length || "string" != typeof s) return void console.warn("Unable to extract values from cookie header. Cookie: '" + e + "'");

            for (this.name = a, this.value = s, n = 1; n < i.length; n += 1) {
              switch (a = (o = i[n].match(/([^=]+)(?:=([\s\S]*))?/))[1].trim().toLowerCase(), s = o[2], a) {
                case "httponly":
                  this.noscript = !0;
                  break;

                case "expires":
                  this.expiration_date = s ? Number(Date.parse(s)) : 1 / 0;
                  break;

                case "path":
                  this.path = s ? s.trim() : "", this.explicit_path = !0;
                  break;

                case "domain":
                  this.domain = s ? s.trim() : "", this.explicit_domain = !!this.domain;
                  break;

                case "secure":
                  this.secure = !0;
              }
            }

            return this.explicit_path || (this.path = r || "/"), this.explicit_domain || (this.domain = t), this;
          }

          return new u().parse(e, t, r);
        }, u.prototype.matches = function (e) {
          return e === i.All || !(this.noscript && e.script || this.secure && !e.secure || !this.collidesWith(e));
        }, u.prototype.collidesWith = function (e) {
          if (this.path && !e.path || this.domain && !e.domain) return !1;
          if (this.path && 0 !== e.path.indexOf(this.path)) return !1;
          if (this.explicit_path && 0 !== e.path.indexOf(this.path)) return !1;
          var t = e.domain && e.domain.replace(/^[\.]/, ""),
              r = this.domain && this.domain.replace(/^[\.]/, "");
          if (r === t) return !0;

          if (r) {
            if (!this.explicit_domain) return !1;
            var n = t.indexOf(r);
            return -1 !== n && n === t.length - r.length;
          }

          return !0;
        }, (r.CookieJar = e).prototype.setCookies = function (e, t, r) {
          var n,
              i,
              o = [];

          for (e = (e = Array.isArray(e) ? e : e.split(a)).map(function (e) {
            return new u(e, t, r);
          }), n = 0; n < e.length; n += 1) {
            i = e[n], this.setCookie(i, t, r) && o.push(i);
          }

          return o;
        };
      }();
    }, {}],
    395: [function (e, t, r) {
      var n,
          i = this && this.__extends || (n = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var r in t) {
          t.hasOwnProperty(r) && (e[r] = t[r]);
        }
      }, function (e, t) {
        function r() {
          this.constructor = e;
        }

        n(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r());
      });
      Object.defineProperty(r, "__esModule", {
        value: !0
      });

      var o = function (e) {
        function t() {
          return null !== e && e.apply(this, arguments) || this;
        }

        return i(t, e), t;
      }(Error);

      r.SecurityError = o;

      var a = function (e) {
        function t() {
          return null !== e && e.apply(this, arguments) || this;
        }

        return i(t, e), t;
      }(Error);

      r.InvalidStateError = a;

      var s = function (e) {
        function t() {
          return null !== e && e.apply(this, arguments) || this;
        }

        return i(t, e), t;
      }(Error);

      r.NetworkError = s;

      var u = function (e) {
        function t() {
          return null !== e && e.apply(this, arguments) || this;
        }

        return i(t, e), t;
      }(Error);

      r.SyntaxError = u;
    }, {}],
    396: [function (e, t, r) {
      Object.defineProperty(r, "__esModule", {
        value: !0
      }), function (e) {
        for (var t in e) {
          r.hasOwnProperty(t) || (r[t] = e[t]);
        }
      }(e("./xml-http-request"));
      var n = e("./xml-http-request-event-target");
      r.XMLHttpRequestEventTarget = n.XMLHttpRequestEventTarget;
    }, {
      "./xml-http-request": 400,
      "./xml-http-request-event-target": 398
    }],
    397: [function (e, t, r) {
      Object.defineProperty(r, "__esModule", {
        value: !0
      });

      var n = function n(e) {
        this.type = e, this.bubbles = !1, this.cancelable = !1, this.loaded = 0, this.lengthComputable = !1, this.total = 0;
      };

      r.ProgressEvent = n;
    }, {}],
    398: [function (e, t, r) {
      Object.defineProperty(r, "__esModule", {
        value: !0
      });

      var n = function () {
        function e() {
          this.listeners = {};
        }

        return e.prototype.addEventListener = function (e, t) {
          e = e.toLowerCase(), this.listeners[e] = this.listeners[e] || [], this.listeners[e].push(t.handleEvent || t);
        }, e.prototype.removeEventListener = function (e, t) {
          if (e = e.toLowerCase(), this.listeners[e]) {
            var r = this.listeners[e].indexOf(t.handleEvent || t);
            r < 0 || this.listeners[e].splice(r, 1);
          }
        }, e.prototype.dispatchEvent = function (e) {
          var t = e.type.toLowerCase();
          if ((e.target = this).listeners[t]) for (var r = 0, n = this.listeners[t]; r < n.length; r++) {
            n[r].call(this, e);
          }
          var i = this["on" + t];
          return i && i.call(this, e), !0;
        }, e;
      }();

      r.XMLHttpRequestEventTarget = n;
    }, {}],
    399: [function (t, e, i) {
      (function (o) {
        var n,
            r = this && this.__extends || (n = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var r in t) {
            t.hasOwnProperty(r) && (e[r] = t[r]);
          }
        }, function (e, t) {
          function r() {
            this.constructor = e;
          }

          n(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r());
        });
        Object.defineProperty(i, "__esModule", {
          value: !0
        });

        var e = function (t) {
          function e() {
            var e = t.call(this) || this;
            return e._contentType = null, e._body = null, e._reset(), e;
          }

          return r(e, t), e.prototype._reset = function () {
            this._contentType = null, this._body = null;
          }, e.prototype._setData = function (e) {
            if (null != e) if ("string" == typeof e) 0 !== e.length && (this._contentType = "text/plain;charset=UTF-8"), this._body = new o(e, "utf-8");else if (o.isBuffer(e)) this._body = e;else if (e instanceof ArrayBuffer) {
              for (var t = new o(e.byteLength), r = new Uint8Array(e), n = 0; n < e.byteLength; n++) {
                t[n] = r[n];
              }

              this._body = t;
            } else {
              if (!(e.buffer && e.buffer instanceof ArrayBuffer)) throw new Error("Unsupported send() data " + e);
              t = new o(e.byteLength);
              var i = e.byteOffset;

              for (r = new Uint8Array(e.buffer), n = 0; n < e.byteLength; n++) {
                t[n] = r[n + i];
              }

              this._body = t;
            }
          }, e.prototype._finalizeHeaders = function (e, t) {
            this._contentType && !t["content-type"] && (e["Content-Type"] = this._contentType), this._body && (e["Content-Length"] = this._body.length.toString());
          }, e.prototype._startUpload = function (e) {
            this._body && e.write(this._body), e.end();
          }, e;
        }(t("./xml-http-request-event-target").XMLHttpRequestEventTarget);

        i.XMLHttpRequestUpload = e;
      }).call(this, t("buffer").Buffer);
    }, {
      "./xml-http-request-event-target": 398,
      buffer: 47
    }],
    400: [function (b, e, y) {
      (function (n, i) {
        var o,
            e = this && this.__extends || (o = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var r in t) {
            t.hasOwnProperty(r) && (e[r] = t[r]);
          }
        }, function (e, t) {
          function r() {
            this.constructor = e;
          }

          o(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r());
        }),
            t = this && this.__assign || Object.assign || function (e) {
          for (var t, r = 1, n = arguments.length; r < n; r++) {
            for (var i in t = arguments[r]) {
              Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
            }
          }

          return e;
        };

        Object.defineProperty(y, "__esModule", {
          value: !0
        });

        var s = b("http"),
            u = b("https"),
            c = b("os"),
            f = b("url"),
            h = b("./progress-event"),
            d = b("./errors"),
            r = b("./xml-http-request-event-target"),
            l = b("./xml-http-request-upload"),
            p = b("cookiejar"),
            a = function (r) {
          function a(e) {
            void 0 === e && (e = {});
            var t = r.call(this) || this;
            return t.UNSENT = a.UNSENT, t.OPENED = a.OPENED, t.HEADERS_RECEIVED = a.HEADERS_RECEIVED, t.LOADING = a.LOADING, t.DONE = a.DONE, t.onreadystatechange = null, t.readyState = a.UNSENT, t.response = null, t.responseText = "", t.responseType = "", t.status = 0, t.statusText = "", t.timeout = 0, t.upload = new l.XMLHttpRequestUpload(), t.responseUrl = "", t.withCredentials = !1, t._method = null, t._url = null, t._sync = !1, t._headers = {}, t._loweredHeaders = {}, t._mimeOverride = null, t._request = null, t._response = null, t._responseParts = null, t._responseHeaders = null, t._aborting = null, t._error = null, t._loadedBytes = 0, t._totalBytes = 0, t._lengthComputable = !1, t._restrictedMethods = {
              CONNECT: !0,
              TRACE: !0,
              TRACK: !0
            }, t._restrictedHeaders = {
              "accept-charset": !0,
              "accept-encoding": !0,
              "access-control-request-headers": !0,
              "access-control-request-method": !0,
              connection: !0,
              "content-length": !0,
              cookie: !0,
              cookie2: !0,
              date: !0,
              dnt: !0,
              expect: !0,
              host: !0,
              "keep-alive": !0,
              origin: !0,
              referer: !0,
              te: !0,
              trailer: !0,
              "transfer-encoding": !0,
              upgrade: !0,
              "user-agent": !0,
              via: !0
            }, t._privateHeaders = {
              "set-cookie": !0,
              "set-cookie2": !0
            }, t._userAgent = "Mozilla/5.0 (" + c.type() + " " + c.arch() + ") node.js/" + n.versions.node + " v8/" + n.versions.v8, t._anonymous = e.anon || !1, t;
          }

          return e(a, r), a.prototype.open = function (e, t, r, n, i) {
            if (void 0 === r && (r = !0), e = e.toUpperCase(), this._restrictedMethods[e]) throw new a.SecurityError("HTTP method " + e + " is not allowed in XHR");

            var o = this._parseUrl(t, n, i);

            this.readyState === a.HEADERS_RECEIVED || this.readyState, this._method = e, this._url = o, this._sync = !r, this._headers = {}, this._loweredHeaders = {}, this._mimeOverride = null, this._setReadyState(a.OPENED), this._request = null, this._response = null, this.status = 0, this.statusText = "", this._responseParts = [], this._responseHeaders = null, this._loadedBytes = 0, this._totalBytes = 0, this._lengthComputable = !1;
          }, a.prototype.setRequestHeader = function (e, t) {
            if (this.readyState !== a.OPENED) throw new a.InvalidStateError("XHR readyState must be OPENED");
            var r = e.toLowerCase();
            this._restrictedHeaders[r] || /^sec-/.test(r) || /^proxy-/.test(r) ? console.warn('Refused to set unsafe header "' + e + '"') : (t = t.toString(), null != this._loweredHeaders[r] ? (e = this._loweredHeaders[r], this._headers[e] = this._headers[e] + ", " + t) : (this._loweredHeaders[r] = e, this._headers[e] = t));
          }, a.prototype.send = function (e) {
            if (this.readyState !== a.OPENED) throw new a.InvalidStateError("XHR readyState must be OPENED");
            if (this._request) throw new a.InvalidStateError("send() already called");

            switch (this._url.protocol) {
              case "file:":
                return this._sendFile(e);

              case "http:":
              case "https:":
                return this._sendHttp(e);

              default:
                throw new a.NetworkError("Unsupported protocol " + this._url.protocol);
            }
          }, a.prototype.abort = function () {
            null != this._request && (this._request.abort(), this._setError(), this._dispatchProgress("abort"), this._dispatchProgress("loadend"));
          }, a.prototype.getResponseHeader = function (e) {
            if (null == this._responseHeaders || null == e) return null;
            var t = e.toLowerCase();
            return this._responseHeaders.hasOwnProperty(t) ? this._responseHeaders[e.toLowerCase()] : null;
          }, a.prototype.getAllResponseHeaders = function () {
            var t = this;
            return null == this._responseHeaders ? "" : Object.keys(this._responseHeaders).map(function (e) {
              return e + ": " + t._responseHeaders[e];
            }).join("\r\n");
          }, a.prototype.overrideMimeType = function (e) {
            if (this.readyState === a.LOADING || this.readyState === a.DONE) throw new a.InvalidStateError("overrideMimeType() not allowed in LOADING or DONE");
            this._mimeOverride = e.toLowerCase();
          }, a.prototype.nodejsSet = function (e) {
            if (this.nodejsHttpAgent = e.httpAgent || this.nodejsHttpAgent, this.nodejsHttpsAgent = e.httpsAgent || this.nodejsHttpsAgent, e.hasOwnProperty("baseUrl")) {
              if (null != e.baseUrl) if (!f.parse(e.baseUrl, !1, !0).protocol) throw new a.SyntaxError("baseUrl must be an absolute URL");
              this.nodejsBaseUrl = e.baseUrl;
            }
          }, a.nodejsSet = function (e) {
            a.prototype.nodejsSet(e);
          }, a.prototype._setReadyState = function (e) {
            this.readyState = e, this.dispatchEvent(new h.ProgressEvent("readystatechange"));
          }, a.prototype._sendFile = function (e) {
            throw new Error("Protocol file: not implemented");
          }, a.prototype._sendHttp = function (e) {
            if (this._sync) throw new Error("Synchronous XHR processing not implemented");
            !e || "GET" !== this._method && "HEAD" !== this._method ? e = e || "" : (console.warn("Discarding entity body for " + this._method + " requests"), e = null), this.upload._setData(e), this._finalizeHeaders(), this._sendHxxpRequest();
          }, a.prototype._sendHxxpRequest = function () {
            var t = this;

            if (this.withCredentials) {
              var e = a.cookieJar.getCookies(p.CookieAccessInfo(this._url.hostname, this._url.pathname, "https:" === this._url.protocol)).toValueString();
              this._headers.cookie = this._headers.cookie2 = e;
            }

            var r = "http:" === this._url.protocol ? [s, this.nodejsHttpAgent] : [u, this.nodejsHttpsAgent],
                n = r[0],
                i = r[1],
                o = n.request.bind(n)({
              hostname: this._url.hostname,
              port: +this._url.port,
              path: this._url.path,
              auth: this._url.auth,
              method: this._method,
              headers: this._headers,
              agent: i
            });
            this._request = o, this.timeout && o.setTimeout(this.timeout, function () {
              return t._onHttpTimeout(o);
            }), o.on("response", function (e) {
              return t._onHttpResponse(o, e);
            }), o.on("error", function (e) {
              return t._onHttpRequestError(o, e);
            }), this.upload._startUpload(o), this._request === o && this._dispatchProgress("loadstart");
          }, a.prototype._finalizeHeaders = function () {
            this._headers = t({}, this._headers, {
              Connection: "keep-alive",
              Host: this._url.host,
              "User-Agent": this._userAgent
            }, this._anonymous ? {
              Referer: "about:blank"
            } : {}), this.upload._finalizeHeaders(this._headers, this._loweredHeaders);
          }, a.prototype._onHttpResponse = function (e, t) {
            var r = this;

            if (this._request === e) {
              if (this.withCredentials && (t.headers["set-cookie"] || t.headers["set-cookie2"]) && a.cookieJar.setCookies(t.headers["set-cookie"] || t.headers["set-cookie2"]), 0 <= [301, 302, 303, 307, 308].indexOf(t.statusCode)) return this._url = this._parseUrl(t.headers.location), this._method = "GET", this._loweredHeaders["content-type"] && (delete this._headers[this._loweredHeaders["content-type"]], delete this._loweredHeaders["content-type"]), null != this._headers["Content-Type"] && delete this._headers["Content-Type"], delete this._headers["Content-Length"], this.upload._reset(), this._finalizeHeaders(), void this._sendHxxpRequest();
              this._response = t, this._response.on("data", function (e) {
                return r._onHttpResponseData(t, e);
              }), this._response.on("end", function () {
                return r._onHttpResponseEnd(t);
              }), this._response.on("close", function () {
                return r._onHttpResponseClose(t);
              }), this.responseUrl = this._url.href.split("#")[0], this.status = t.statusCode, this.statusText = s.STATUS_CODES[this.status], this._parseResponseHeaders(t);
              var n = this._responseHeaders["content-length"] || "";
              this._totalBytes = +n, this._lengthComputable = !!n, this._setReadyState(a.HEADERS_RECEIVED);
            }
          }, a.prototype._onHttpResponseData = function (e, t) {
            this._response === e && (this._responseParts.push(new i(t)), this._loadedBytes += t.length, this.readyState !== a.LOADING && this._setReadyState(a.LOADING), this._dispatchProgress("progress"));
          }, a.prototype._onHttpResponseEnd = function (e) {
            this._response === e && (this._parseResponse(), this._request = null, this._response = null, this._setReadyState(a.DONE), this._dispatchProgress("load"), this._dispatchProgress("loadend"));
          }, a.prototype._onHttpResponseClose = function (e) {
            if (this._response === e) {
              var t = this._request;
              this._setError(), t.abort(), this._setReadyState(a.DONE), this._dispatchProgress("error"), this._dispatchProgress("loadend");
            }
          }, a.prototype._onHttpTimeout = function (e) {
            this._request === e && (this._setError(), e.abort(), this._setReadyState(a.DONE), this._dispatchProgress("timeout"), this._dispatchProgress("loadend"));
          }, a.prototype._onHttpRequestError = function (e, t) {
            this._request === e && (this._setError(), e.abort(), this._setReadyState(a.DONE), this._dispatchProgress("error"), this._dispatchProgress("loadend"));
          }, a.prototype._dispatchProgress = function (e) {
            var t = new a.ProgressEvent(e);
            t.lengthComputable = this._lengthComputable, t.loaded = this._loadedBytes, t.total = this._totalBytes, this.dispatchEvent(t);
          }, a.prototype._setError = function () {
            this._request = null, this._response = null, this._responseHeaders = null, this._responseParts = null;
          }, a.prototype._parseUrl = function (e, t, r) {
            var n = null == this.nodejsBaseUrl ? e : f.resolve(this.nodejsBaseUrl, e),
                i = f.parse(n, !1, !0);
            i.hash = null;
            var o = (i.auth || "").split(":"),
                a = o[0],
                s = o[1];
            return (a || s || t || r) && (i.auth = (t || a || "") + ":" + (r || s || "")), i;
          }, a.prototype._parseResponseHeaders = function (e) {
            for (var t in this._responseHeaders = {}, e.headers) {
              var r = t.toLowerCase();
              this._privateHeaders[r] || (this._responseHeaders[r] = e.headers[t]);
            }

            null != this._mimeOverride && (this._responseHeaders["content-type"] = this._mimeOverride);
          }, a.prototype._parseResponse = function () {
            var t = i.concat(this._responseParts);

            switch (this._responseParts = null, this.responseType) {
              case "json":
                this.responseText = null;

                try {
                  this.response = JSON.parse(t.toString("utf-8"));
                } catch (e) {
                  this.response = null;
                }

                return;

              case "buffer":
                return this.responseText = null, void (this.response = t);

              case "arraybuffer":
                this.responseText = null;

                for (var e = new ArrayBuffer(t.length), r = new Uint8Array(e), n = 0; n < t.length; n++) {
                  r[n] = t[n];
                }

                return void (this.response = e);

              case "text":
              default:
                try {
                  this.responseText = t.toString(this._parseResponseEncoding());
                } catch (e) {
                  this.responseText = t.toString("binary");
                }

                this.response = this.responseText;
            }
          }, a.prototype._parseResponseEncoding = function () {
            return /;\s*charset=(.*)$/.exec(this._responseHeaders["content-type"] || "")[1] || "utf-8";
          }, a.ProgressEvent = h.ProgressEvent, a.InvalidStateError = d.InvalidStateError, a.NetworkError = d.NetworkError, a.SecurityError = d.SecurityError, a.SyntaxError = d.SyntaxError, a.XMLHttpRequestUpload = l.XMLHttpRequestUpload, a.UNSENT = 0, a.OPENED = 1, a.HEADERS_RECEIVED = 2, a.LOADING = 3, a.DONE = 4, a.cookieJar = p.CookieJar(), a;
        }(r.XMLHttpRequestEventTarget);

        (y.XMLHttpRequest = a).prototype.nodejsHttpAgent = s.globalAgent, a.prototype.nodejsHttpsAgent = u.globalAgent, a.prototype.nodejsBaseUrl = null;
      }).call(this, b("_process"), b("buffer").Buffer);
    }, {
      "./errors": 395,
      "./progress-event": 397,
      "./xml-http-request-event-target": 398,
      "./xml-http-request-upload": 399,
      _process: 121,
      buffer: 47,
      cookiejar: 394,
      http: 159,
      https: 99,
      os: 109,
      url: 166
    }],
    401: [function (e, t, r) {
      var o = e("web3-core-helpers").errors,
          n = e("xhr2-cookies").XMLHttpRequest,
          i = e("http"),
          a = e("https"),
          s = function s(e, t) {
        t = t || {}, this.host = e || "http://localhost:8545", "https" === this.host.substring(0, 5) ? this.httpsAgent = new a.Agent({
          keepAlive: !0
        }) : this.httpAgent = new i.Agent({
          keepAlive: !0
        }), this.timeout = t.timeout || 0, this.headers = t.headers, this.connected = !1;
      };

      s.prototype._prepareRequest = function () {
        var t = new n();
        return t.nodejsSet({
          httpsAgent: this.httpsAgent,
          httpAgent: this.httpAgent
        }), t.open("POST", this.host, !0), t.setRequestHeader("Content-Type", "application/json"), t.timeout = this.timeout && 1 !== this.timeout ? this.timeout : 0, t.withCredentials = !0, this.headers && this.headers.forEach(function (e) {
          t.setRequestHeader(e.name, e.value);
        }), t;
      }, s.prototype.send = function (e, r) {
        var n = this,
            i = this._prepareRequest();

        i.onreadystatechange = function () {
          if (4 === i.readyState && 1 !== i.timeout) {
            var e = i.responseText,
                t = null;

            try {
              e = JSON.parse(e);
            } catch (e) {
              t = o.InvalidResponse(i.responseText);
            }

            n.connected = !0, r(t, e);
          }
        }, i.ontimeout = function () {
          n.connected = !1, r(o.ConnectionTimeout(this.timeout));
        };

        try {
          i.send(JSON.stringify(e));
        } catch (e) {
          this.connected = !1, r(o.InvalidConnection(this.host));
        }
      }, s.prototype.disconnect = function () {}, t.exports = s;
    }, {
      http: 159,
      https: 99,
      "web3-core-helpers": 200,
      "xhr2-cookies": 396
    }],
    402: [function (e, ve, ge) {
      !function (p, r, h, X, u, J) {
        var b = l(function (r, n) {
          var i = n.length;
          return l(function (e) {
            for (var t = 0; t < e.length; t++) {
              n[i + t] = e[t];
            }

            return n.length = i + e.length, r.apply(this, n);
          });
        });
        l(function (e) {
          var t = j(e);

          function r(e, t) {
            return [d(e, t)];
          }

          return l(function (e) {
            return T(r, e, t)[0];
          });
        });

        function y(e, t) {
          return function () {
            return e.call(this, t.apply(this, arguments));
          };
        }

        function n(t) {
          return function (e) {
            return e[t];
          };
        }

        var m = l(function (n) {
          return l(function (e) {
            for (var t, r = 0; r < A(n); r++) {
              if (t = d(e, n[r])) return t;
            }
          });
        });

        function d(e, t) {
          return t.apply(J, e);
        }

        function l(t) {
          var r = t.length - 1,
              n = h.prototype.slice;
          if (0 == r) return function () {
            return t.call(this, n.call(arguments));
          };
          if (1 == r) return function () {
            return t.call(this, arguments[0], n.call(arguments, 1));
          };
          var i = h(t.length);
          return function () {
            for (var e = 0; e < r; e++) {
              i[e] = arguments[e];
            }

            return i[r] = n.call(arguments, r), t.apply(this, i);
          };
        }

        function v(t, r) {
          return function (e) {
            return t(e) && r(e);
          };
        }

        function g() {}

        function w() {
          return !0;
        }

        function _(e, t) {
          return t && t.constructor === e;
        }

        var A = n("length"),
            x = b(_, String);

        function M(e) {
          return e !== J;
        }

        function k(e, t) {
          return t instanceof r && function e(t, r) {
            return !r || t(S(r)) && e(t, U(r));
          }(function (e) {
            return e in t;
          }, e);
        }

        function E(e, t) {
          return [e, t];
        }

        var i = null,
            S = n(0),
            U = n(1);

        function j(e) {
          return C(e.reduce((r = E, function (e, t) {
            return r(t, e);
          }), i));
          var r;
        }

        var I = l(j);

        function s(e) {
          return T(function (e, t) {
            return e.unshift(t), e;
          }, [], e);
        }

        function c(e, t) {
          return t ? E(e(S(t)), c(e, U(t))) : i;
        }

        function T(e, t, r) {
          return r ? e(T(e, t, U(r)), S(r)) : t;
        }

        function f(e, n, t) {
          return function e(t, r) {
            return t ? n(S(t)) ? (r(S(t)), U(t)) : E(S(t), e(U(t), r)) : i;
          }(e, t || g);
        }

        function C(e) {
          return function e(t, r) {
            return t ? e(U(t), E(S(t), r)) : r;
          }(e, i);
        }

        function a(e) {
          var o,
              a,
              s,
              u = e(ce).emit,
              c = e(fe).emit,
              f = e(he).emit,
              t = e(re).emit,
              h = 65536,
              d = /[\\"\n]/g,
              r = 0,
              l = r++,
              p = r++,
              b = r++,
              y = r++,
              m = r++,
              v = r++,
              g = r++,
              w = r++,
              _ = r++,
              A = r++,
              x = r++,
              M = r++,
              k = r++,
              E = r++,
              S = r++,
              U = r++,
              j = r++,
              I = r++,
              T = r++,
              C = r++,
              B = h,
              N = J,
              P = "",
              R = !1,
              O = !1,
              L = l,
              q = [],
              D = null,
              F = 0,
              H = 0,
              z = 0,
              K = 0,
              V = 1;

          function G(e) {
            N !== J && (c(N), f(), N = J), o = X(e + "\nLn: " + V + "\nCol: " + K + "\nChr: " + a), t(de(J, J, o));
          }

          function W(e) {
            return "\r" == e || "\n" == e || " " == e || "\t" == e;
          }

          e(ae).on(function (e) {
            if (o) return;
            if (O) return G("Cannot write after close");
            var t = 0;
            a = e[0];

            for (; a && (s = a, a = e[t++]);) {
              switch (z++, "\n" == a ? (V++, K = 0) : K++, L) {
                case l:
                  if ("{" === a) L = b;else if ("[" === a) L = m;else if (!W(a)) return G("Non-whitespace before {[.");
                  continue;

                case w:
                case b:
                  if (W(a)) continue;
                  if (L === w) q.push(_);else {
                    if ("}" === a) {
                      c({}), f(), L = q.pop() || p;
                      continue;
                    }

                    q.push(y);
                  }
                  if ('"' !== a) return G('Malformed object key should start with " ');
                  L = g;
                  continue;

                case _:
                case y:
                  if (W(a)) continue;
                  if (":" === a) L === y ? (q.push(y), N !== J && (c({}), u(N), N = J), H++) : N !== J && (u(N), N = J), L = p;else if ("}" === a) N !== J && (c(N), f(), N = J), f(), H--, L = q.pop() || p;else {
                    if ("," !== a) return G("Bad object");
                    L === y && q.push(y), N !== J && (c(N), f(), N = J), L = w;
                  }
                  continue;

                case m:
                case p:
                  if (W(a)) continue;

                  if (L === m) {
                    if (c([]), H++, L = p, "]" === a) {
                      f(), H--, L = q.pop() || p;
                      continue;
                    }

                    q.push(v);
                  }

                  if ('"' === a) L = g;else if ("{" === a) L = b;else if ("[" === a) L = m;else if ("t" === a) L = A;else if ("f" === a) L = k;else if ("n" === a) L = j;else if ("-" === a) P += a;else if ("0" === a) P += a, L = 20;else {
                    if (-1 === "123456789".indexOf(a)) return G("Bad value");
                    P += a, L = 20;
                  }
                  continue;

                case v:
                  if ("," === a) q.push(v), N !== J && (c(N), f(), N = J), L = p;else {
                    if ("]" !== a) {
                      if (W(a)) continue;
                      return G("Bad array");
                    }

                    N !== J && (c(N), f(), N = J), f(), H--, L = q.pop() || p;
                  }
                  continue;

                case g:
                  N === J && (N = "");
                  var r = t - 1;

                  e: for (;;) {
                    for (; 0 < F;) {
                      if (D += a, a = e.charAt(t++), 4 === F ? (N += String.fromCharCode(parseInt(D, 16)), F = 0, r = t - 1) : F++, !a) break e;
                    }

                    if ('"' === a && !R) {
                      L = q.pop() || p, N += e.substring(r, t - 1);
                      break;
                    }

                    if (!("\\" !== a || R || (R = !0, N += e.substring(r, t - 1), a = e.charAt(t++)))) break;

                    if (R) {
                      if (R = !1, "n" === a ? N += "\n" : "r" === a ? N += "\r" : "t" === a ? N += "\t" : "f" === a ? N += "\f" : "b" === a ? N += "\b" : "u" === a ? (F = 1, D = "") : N += a, a = e.charAt(t++), r = t - 1, a) continue;
                      break;
                    }

                    d.lastIndex = t;
                    var n = d.exec(e);

                    if (!n) {
                      t = e.length + 1, N += e.substring(r, t - 1);
                      break;
                    }

                    if (t = n.index + 1, !(a = e.charAt(n.index))) {
                      N += e.substring(r, t - 1);
                      break;
                    }
                  }

                  continue;

                case A:
                  if (!a) continue;
                  if ("r" !== a) return G("Invalid true started with t" + a);
                  L = x;
                  continue;

                case x:
                  if (!a) continue;
                  if ("u" !== a) return G("Invalid true started with tr" + a);
                  L = M;
                  continue;

                case M:
                  if (!a) continue;
                  if ("e" !== a) return G("Invalid true started with tru" + a);
                  c(!0), f(), L = q.pop() || p;
                  continue;

                case k:
                  if (!a) continue;
                  if ("a" !== a) return G("Invalid false started with f" + a);
                  L = E;
                  continue;

                case E:
                  if (!a) continue;
                  if ("l" !== a) return G("Invalid false started with fa" + a);
                  L = S;
                  continue;

                case S:
                  if (!a) continue;
                  if ("s" !== a) return G("Invalid false started with fal" + a);
                  L = U;
                  continue;

                case U:
                  if (!a) continue;
                  if ("e" !== a) return G("Invalid false started with fals" + a);
                  c(!1), f(), L = q.pop() || p;
                  continue;

                case j:
                  if (!a) continue;
                  if ("u" !== a) return G("Invalid null started with n" + a);
                  L = I;
                  continue;

                case I:
                  if (!a) continue;
                  if ("l" !== a) return G("Invalid null started with nu" + a);
                  L = T;
                  continue;

                case T:
                  if (!a) continue;
                  if ("l" !== a) return G("Invalid null started with nul" + a);
                  c(null), f(), L = q.pop() || p;
                  continue;

                case C:
                  if ("." !== a) return G("Leading zero not followed by .");
                  P += a, L = 20;
                  continue;

                case 20:
                  if (-1 !== "0123456789".indexOf(a)) P += a;else if ("." === a) {
                    if (-1 !== P.indexOf(".")) return G("Invalid number has two dots");
                    P += a;
                  } else if ("e" === a || "E" === a) {
                    if (-1 !== P.indexOf("e") || -1 !== P.indexOf("E")) return G("Invalid number has two exponential");
                    P += a;
                  } else if ("+" === a || "-" === a) {
                    if ("e" !== s && "E" !== s) return G("Invalid symbol in number");
                    P += a;
                  } else P && (c(parseFloat(P)), f(), P = ""), t--, L = q.pop() || p;
                  continue;

                default:
                  return G("Unknown state: " + L);
              }
            }

            B <= z && (i = 0, N !== J && N.length > h && (G("Max buffer length exceeded: textNode"), i = Math.max(i, N.length)), P.length > h && (G("Max buffer length exceeded: numberNode"), i = Math.max(i, P.length)), B = h - i + z);
            var i;
          }), e(se).on(function () {
            if (L == l) return c({}), f(), void (O = !0);
            L === p && 0 === H || G("Unexpected end");
            N !== J && (c(N), f(), N = J);
            O = !0;
          });
        }

        var e,
            t,
            o,
            B,
            N,
            P,
            R,
            O,
            L,
            q,
            D,
            F = (e = l(function (e) {
          return e.unshift(/^/), (t = RegExp(e.map(n("source")).join(""))).exec.bind(t);
          var t;
        }), B = e(t = /(\$?)/, /([\w-_]+|\*)/, o = /(?:{([\w ]*?)})?/), N = e(t, /\["([^"]+)"\]/, o), P = e(t, /\[(\d+|\*)\]/, o), R = e(t, /()/, /{([\w ]*?)}/), O = e(/\.\./), L = e(/\./), q = e(t, /!/), D = e(/$/), function (e) {
          return e(m(B, N, P, R), O, L, q, D);
        });

        function H(e, t) {
          return {
            key: e,
            node: t
          };
        }

        var z = n("key"),
            K = n("node"),
            V = {};

        function G(e) {
          var i = e(Y).emit,
              t = e(Q).emit,
              u = e(ie).emit,
              r = e(ne).emit;

          function c(e, t, r) {
            K(S(e))[t] = r;
          }

          function f(e, t, r) {
            e && c(e, t, r);
            var n = E(H(t, r), e);
            return i(n), n;
          }

          var n = {};
          return n[fe] = function (e, t) {
            if (!e) return u(t), f(e, V, t);
            var r,
                n,
                i,
                o = (n = t, i = K(S(r = e)), _(h, i) ? f(r, A(i), n) : r),
                a = U(o),
                s = z(S(o));
            return c(a, s, t), E(H(s, t), a);
          }, n[he] = function (e) {
            return t(e), U(e) || r(K(S(e)));
          }, n[ce] = f, n;
        }

        var W = F(function (e, t, r, n, i) {
          var o = y(z, S),
              a = y(K, S);

          function s(e, t) {
            return !!t[1] ? v(e, S) : e;
          }

          function u(e) {
            if (e == w) return w;
            return v(function (e) {
              return o(e) != V;
            }, y(e, U));
          }

          function c() {
            return function (e) {
              return o(e) == V;
            };
          }

          function f(e, t, r, n, i) {
            var o,
                a = e(r);

            if (a) {
              var s = (o = a, T(function (e, t) {
                return t(e, o);
              }, n, t));
              return i(r.substr(A(a[0])), s);
            }
          }

          function h(e, t) {
            return b(f, e, t);
          }

          var d = m(h(e, I(s, function (e, t) {
            var r = t[3];
            return r ? v(y(b(k, j(r.split(/\W+/))), a), e) : e;
          }, function (e, t) {
            var r = t[2];
            return v(r && "*" != r ? function (e) {
              return o(e) == r;
            } : w, e);
          }, u)), h(t, I(function (e) {
            if (e == w) return w;
            var t = c(),
                r = e,
                n = u(function (e) {
              return i(e);
            }),
                i = m(t, r, n);
            return i;
          })), h(r, I()), h(n, I(s, c)), h(i, I(function (r) {
            return function (e) {
              var t = r(e);
              return !0 === t ? S(e) : t;
            };
          })), function (e) {
            throw X('"' + e + '" could not be tokenised');
          });

          function l(e, t) {
            return t;
          }

          function p(e, t) {
            return d(e, t, e ? p : l);
          }

          return function (t) {
            try {
              return p(t, w);
            } catch (e) {
              throw X('Could not compile "' + t + '" because ' + e.message);
            }
          };
        });

        function Z(n, i, r) {
          var o, a;

          function s(t) {
            return function (e) {
              return e.id == t;
            };
          }

          return {
            on: function on(e, t) {
              var r = {
                listener: e,
                id: t || e
              };
              return i && i.emit(n, e, r.id), o = E(r, o), a = E(e, a), this;
            },
            emit: function emit() {
              !function e(t, r) {
                t && (S(t).apply(null, r), e(U(t), r));
              }(a, arguments);
            },
            un: function un(e) {
              var t;
              o = f(o, s(e), function (e) {
                t = e;
              }), t && (a = f(a, function (e) {
                return e == t.listener;
              }), r && r.emit(n, t.listener, t.id));
            },
            listeners: function listeners() {
              return a;
            },
            hasListener: function hasListener(e) {
              return M(function e(t, r) {
                return r && (t(S(r)) ? S(r) : e(t, U(r)));
              }(e ? s(e) : w, o));
            }
          };
        }

        var $ = 1,
            Y = $++,
            Q = $++,
            ee = $++,
            te = $++,
            re = "fail",
            ne = $++,
            ie = $++,
            oe = "start",
            ae = "data",
            se = "end",
            ue = $++,
            ce = $++,
            fe = $++,
            he = $++;

        function de(e, t, r) {
          try {
            var n = u.parse(t);
          } catch (e) {}

          return {
            statusCode: e,
            body: t,
            jsonBody: n,
            thrown: r
          };
        }

        function le(n, i) {
          var o = {
            node: n(Q),
            path: n(Y)
          };

          function a(t, r, o) {
            var a = n(t).emit;
            r.on(function (e) {
              var t,
                  r,
                  n,
                  i = o(e);
              !1 !== i && (t = a, r = K(i), n = C(e), t(r, s(U(c(z, n))), s(c(K, n))));
            }, t), n("removeListener").on(function (e) {
              e == t && (n(e).listeners() || r.un(t));
            });
          }

          n("newListener").on(function (e) {
            var t = /(node|path):(.*)/.exec(e);

            if (t) {
              var r = o[t[1]];
              r.hasListener(e) || a(e, r, i(t[2]));
            }
          });
        }

        function pe(o, e) {
          var i,
              a = /^(node|path):./,
              s = o(ne),
              u = o(te).emit,
              c = o(ee).emit,
              t = l(function (e, t) {
            if (i[e]) d(t, i[e]);else {
              var r = o(e),
                  n = t[0];
              a.test(e) ? f(r, n) : r.on(n);
            }
            return i;
          });

          function f(t, e, r) {
            r = r || e;
            var n = h(e);
            return t.on(function () {
              var e = !1;
              i.forget = function () {
                e = !0;
              }, d(arguments, n), delete i.forget, e && t.un(r);
            }, r), i;
          }

          function h(e) {
            return function () {
              try {
                return e.apply(i, arguments);
              } catch (e) {
                setTimeout(function () {
                  throw e;
                });
              }
            };
          }

          function n(e, t, r) {
            var n, i;
            "node" == e ? (i = r, n = function n() {
              var e = i.apply(this, arguments);
              M(e) && (e == me.drop ? u() : c(e));
            }) : n = r, f(o(e + ":" + t), n, r);
          }

          function r(e, t, r) {
            return x(t) ? n(e, t, r) : function (e, t) {
              for (var r in t) {
                n(e, r, t[r]);
              }
            }(e, t), i;
          }

          return o(ie).on(function (e) {
            var t;
            i.root = (t = e, function () {
              return t;
            });
          }), o(oe).on(function (e, t) {
            i.header = function (e) {
              return e ? t[e] : t;
            };
          }), i = {
            on: t,
            addListener: t,
            removeListener: function removeListener(e, t, r) {
              if ("done" == e) s.un(t);else if ("node" == e || "path" == e) o.un(e + ":" + t, r);else {
                var n = t;
                o(e).un(n);
              }
              return i;
            },
            emit: o.emit,
            node: b(r, "node"),
            path: b(r, "path"),
            done: b(f, s),
            start: b(function (e, t) {
              return o(e).on(h(t), t), i;
            }, oe),
            fail: o(re).on,
            abort: o(ue).emit,
            header: g,
            root: g,
            source: e
          };
        }

        function be(e, t, r, n, i) {
          var o = function () {
            var t = {},
                r = i("newListener"),
                n = i("removeListener");

            function i(e) {
              return t[e] = Z(e, r, n);
            }

            function o(e) {
              return t[e] || i(e);
            }

            return ["emit", "on", "un"].forEach(function (r) {
              o[r] = l(function (e, t) {
                d(t, o(e)[r]);
              });
            }), o;
          }();

          return t && function (t, n, e, r, i, o, a) {
            var s,
                u = t(ae).emit,
                c = t(re).emit,
                f = 0,
                h = !0;

            function d() {
              var e = n.responseText,
                  t = e.substr(f);
              t && u(t), f = A(e);
            }

            t(ue).on(function () {
              n.onreadystatechange = null, n.abort();
            }), "onprogress" in n && (n.onprogress = d), n.onreadystatechange = function () {
              function e() {
                try {
                  h && t(oe).emit(n.status, (e = n.getAllResponseHeaders(), r = {}, e && e.split("\r\n").forEach(function (e) {
                    var t = e.indexOf(": ");
                    r[e.substring(0, t)] = e.substring(t + 2);
                  }), r)), h = !1;
                } catch (e) {}

                var e, r;
              }

              switch (n.readyState) {
                case 2:
                case 3:
                  return e();

                case 4:
                  e(), 2 == String(n.status)[0] ? (d(), t(se).emit()) : c(de(n.status, n.responseText));
              }
            };

            try {
              for (var l in n.open(e, r, !0), o) {
                n.setRequestHeader(l, o[l]);
              }

              (function (t, e) {
                function r(e) {
                  return e.port || {
                    "http:": 80,
                    "https:": 443
                  }[e.protocol || t.protocol];
                }

                return !!(e.protocol && e.protocol != t.protocol || e.host && e.host != t.host || e.host && r(e) != r(t));
              })(p.location, {
                protocol: (s = /(\w+:)?(?:\/\/)([\w.-]+)?(?::(\d+))?\/?/.exec(r) || [])[1] || "",
                host: s[2] || "",
                port: s[3] || ""
              }) || n.setRequestHeader("X-Requested-With", "XMLHttpRequest"), n.withCredentials = a, n.send(i);
            } catch (e) {
              p.setTimeout(b(c, de(J, J, e)), 0);
            }
          }(o, new XMLHttpRequest(), e, t, r, n, i), a(o), function (t, r) {
            var i,
                n = {};

            function e(t) {
              return function (e) {
                i = t(i, e);
              };
            }

            for (var o in r) {
              t(o).on(e(r[o]), n);
            }

            t(ee).on(function (e) {
              var t = S(i),
                  r = z(t),
                  n = U(i);
              n && (K(S(n))[r] = e);
            }), t(te).on(function () {
              var e = S(i),
                  t = z(e),
                  r = U(i);
              r && delete K(S(r))[t];
            }), t(ue).on(function () {
              for (var e in r) {
                t(e).un(n);
              }
            });
          }(o, G(o)), le(o, W), pe(o, t);
        }

        function ye(e, t, r, n, i, o, a) {
          return i = i ? u.parse(u.stringify(i)) : {}, n ? x(n) || (n = u.stringify(n), i["Content-Type"] = i["Content-Type"] || "application/json") : n = null, e(r || "GET", (s = t, !1 === a && (-1 == s.indexOf("?") ? s += "?" : s += "&", s += "_=" + new Date().getTime()), s), n, i, o || !1);
          var s;
        }

        function me(e) {
          var t = I("resume", "pause", "pipe"),
              r = b(k, t);
          return e ? r(e) || x(e) ? ye(be, e) : ye(be, e.url, e.method, e.body, e.headers, e.withCredentials, e.cached) : be();
        }

        me.drop = function () {
          return me.drop;
        }, "function" == typeof define && define.amd ? define("oboe", [], function () {
          return me;
        }) : "object" === (void 0 === ge ? "undefined" : _typeof(ge)) ? ve.exports = me : p.oboe = me;
      }(function () {
        try {
          return window;
        } catch (e) {
          return self;
        }
      }(), Object, Array, Error, JSON);
    }, {}],
    403: [function (e, t, r) {
      arguments[4][187][0].apply(r, arguments);
    }, {
      dup: 187
    }],
    404: [function (e, t, r) {
      var i = e("underscore"),
          o = e("web3-core-helpers").errors,
          a = e("oboe"),
          n = function n(e, t) {
        var n = this;
        this.responseCallbacks = {}, this.notificationCallbacks = [], this.path = e, this.connected = !1, this.connection = t.connect({
          path: this.path
        }), this.addDefaultEvents();

        var r = function r(t) {
          var r = null;
          i.isArray(t) ? t.forEach(function (e) {
            n.responseCallbacks[e.id] && (r = e.id);
          }) : r = t.id, r || -1 === t.method.indexOf("_subscription") ? n.responseCallbacks[r] && (n.responseCallbacks[r](null, t), delete n.responseCallbacks[r]) : n.notificationCallbacks.forEach(function (e) {
            i.isFunction(e) && e(t);
          });
        };

        "Socket" === t.constructor.name ? a(this.connection).done(r) : this.connection.on("data", function (e) {
          n._parseResponse(e.toString()).forEach(r);
        });
      };

      n.prototype.addDefaultEvents = function () {
        var e = this;
        this.connection.on("connect", function () {
          e.connected = !0;
        }), this.connection.on("close", function () {
          e.connected = !1;
        }), this.connection.on("error", function () {
          e._timeout();
        }), this.connection.on("end", function () {
          e._timeout();
        }), this.connection.on("timeout", function () {
          e._timeout();
        });
      }, n.prototype._parseResponse = function (e) {
        var r = this,
            n = [];
        return e.replace(/\}[\n\r]?\{/g, "}|--|{").replace(/\}\][\n\r]?\[\{/g, "}]|--|[{").replace(/\}[\n\r]?\[\{/g, "}|--|[{").replace(/\}\][\n\r]?\{/g, "}]|--|{").split("|--|").forEach(function (t) {
          r.lastChunk && (t = r.lastChunk + t);
          var e = null;

          try {
            e = JSON.parse(t);
          } catch (e) {
            return r.lastChunk = t, clearTimeout(r.lastChunkTimeout), void (r.lastChunkTimeout = setTimeout(function () {
              throw r._timeout(), o.InvalidResponse(t);
            }, 15e3));
          }

          clearTimeout(r.lastChunkTimeout), r.lastChunk = null, e && n.push(e);
        }), n;
      }, n.prototype._addResponseCallback = function (e, t) {
        var r = e.id || e[0].id,
            n = e.method || e[0].method;
        this.responseCallbacks[r] = t, this.responseCallbacks[r].method = n;
      }, n.prototype._timeout = function () {
        for (var e in this.responseCallbacks) {
          this.responseCallbacks.hasOwnProperty(e) && (this.responseCallbacks[e](o.InvalidConnection("on IPC")), delete this.responseCallbacks[e]);
        }
      }, n.prototype.reconnect = function () {
        this.connection.connect({
          path: this.path
        });
      }, n.prototype.send = function (e, t) {
        this.connection.writable || this.connection.connect({
          path: this.path
        }), this.connection.write(JSON.stringify(e)), this._addResponseCallback(e, t);
      }, n.prototype.on = function (e, t) {
        if ("function" != typeof t) throw new Error("The second parameter callback must be a function.");

        switch (e) {
          case "data":
            this.notificationCallbacks.push(t);
            break;

          default:
            this.connection.on(e, t);
        }
      }, n.prototype.once = function (e, t) {
        if ("function" != typeof t) throw new Error("The second parameter callback must be a function.");
        this.connection.once(e, t);
      }, n.prototype.removeListener = function (e, r) {
        var n = this;

        switch (e) {
          case "data":
            this.notificationCallbacks.forEach(function (e, t) {
              e === r && n.notificationCallbacks.splice(t, 1);
            });
            break;

          default:
            this.connection.removeListener(e, r);
        }
      }, n.prototype.removeAllListeners = function (e) {
        switch (e) {
          case "data":
            this.notificationCallbacks = [];
            break;

          default:
            this.connection.removeAllListeners(e);
        }
      }, n.prototype.reset = function () {
        this._timeout(), this.notificationCallbacks = [], this.connection.removeAllListeners("error"), this.connection.removeAllListeners("end"), this.connection.removeAllListeners("timeout"), this.addDefaultEvents();
      }, t.exports = n;
    }, {
      oboe: 402,
      underscore: 403,
      "web3-core-helpers": 200
    }],
    405: [function (e, t, r) {
      arguments[4][187][0].apply(r, arguments);
    }, {
      dup: 187
    }],
    406: [function (i, a, e) {
      (function (t) {
        var s = i("underscore"),
            o = i("web3-core-helpers").errors,
            u = null,
            c = null,
            f = null;
        if ("undefined" != typeof window && void 0 !== window.WebSocket) u = function u(e, t) {
          return new window.WebSocket(e, t);
        }, c = btoa, f = function f(e) {
          return new URL(e);
        };else {
          u = i("websocket").w3cwebsocket, c = function c(e) {
            return t(e).toString("base64");
          };
          var e = i("url");

          if (e.URL) {
            var r = e.URL;

            f = function f(e) {
              return new r(e);
            };
          } else f = i("url").parse;
        }

        var n = function n(e, t) {
          var n = this;
          this.responseCallbacks = {}, this.notificationCallbacks = [], t = t || {}, this._customTimeout = t.timeout;
          var r = f(e),
              i = t.headers || {},
              o = t.protocol || void 0;
          r.username && r.password && (i.authorization = "Basic " + c(r.username + ":" + r.password));
          var a = t.clientConfig || void 0;
          r.auth && (i.authorization = "Basic " + c(r.auth)), this.connection = new u(e, o, void 0, i, void 0, a), this.addDefaultEvents(), this.connection.onmessage = function (e) {
            var t = "string" == typeof e.data ? e.data : "";

            n._parseResponse(t).forEach(function (t) {
              var r = null;
              s.isArray(t) ? t.forEach(function (e) {
                n.responseCallbacks[e.id] && (r = e.id);
              }) : r = t.id, !r && t && t.method && -1 !== t.method.indexOf("_subscription") ? n.notificationCallbacks.forEach(function (e) {
                s.isFunction(e) && e(t);
              }) : n.responseCallbacks[r] && (n.responseCallbacks[r](null, t), delete n.responseCallbacks[r]);
            });
          }, Object.defineProperty(this, "connected", {
            get: function get() {
              return this.connection && this.connection.readyState === this.connection.OPEN;
            },
            enumerable: !0
          });
        };

        n.prototype.addDefaultEvents = function () {
          var e = this;
          this.connection.onerror = function () {
            e._timeout();
          }, this.connection.onclose = function () {
            e._timeout(), e.reset();
          };
        }, n.prototype._parseResponse = function (e) {
          var r = this,
              n = [];
          return e.replace(/\}[\n\r]?\{/g, "}|--|{").replace(/\}\][\n\r]?\[\{/g, "}]|--|[{").replace(/\}[\n\r]?\[\{/g, "}|--|[{").replace(/\}\][\n\r]?\{/g, "}]|--|{").split("|--|").forEach(function (t) {
            r.lastChunk && (t = r.lastChunk + t);
            var e = null;

            try {
              e = JSON.parse(t);
            } catch (e) {
              return r.lastChunk = t, clearTimeout(r.lastChunkTimeout), void (r.lastChunkTimeout = setTimeout(function () {
                throw r._timeout(), o.InvalidResponse(t);
              }, 15e3));
            }

            clearTimeout(r.lastChunkTimeout), r.lastChunk = null, e && n.push(e);
          }), n;
        }, n.prototype._addResponseCallback = function (e, t) {
          var r = e.id || e[0].id,
              n = e.method || e[0].method;
          this.responseCallbacks[r] = t, this.responseCallbacks[r].method = n;
          var i = this;
          this._customTimeout && setTimeout(function () {
            i.responseCallbacks[r] && (i.responseCallbacks[r](o.ConnectionTimeout(i._customTimeout)), delete i.responseCallbacks[r]);
          }, this._customTimeout);
        }, n.prototype._timeout = function () {
          for (var e in this.responseCallbacks) {
            this.responseCallbacks.hasOwnProperty(e) && (this.responseCallbacks[e](o.InvalidConnection("on WS")), delete this.responseCallbacks[e]);
          }
        }, n.prototype.send = function (e, t) {
          var r = this;

          if (this.connection.readyState !== this.connection.CONNECTING) {
            if (this.connection.readyState !== this.connection.OPEN) return console.error("connection not open on send()"), "function" == typeof this.connection.onerror ? this.connection.onerror(new Error("connection not open")) : console.error("no error callback"), void t(new Error("connection not open"));
            this.connection.send(JSON.stringify(e)), this._addResponseCallback(e, t);
          } else setTimeout(function () {
            r.send(e, t);
          }, 10);
        }, n.prototype.on = function (e, t) {
          if ("function" != typeof t) throw new Error("The second parameter callback must be a function.");

          switch (e) {
            case "data":
              this.notificationCallbacks.push(t);
              break;

            case "connect":
              this.connection.onopen = t;
              break;

            case "end":
              this.connection.onclose = t;
              break;

            case "error":
              this.connection.onerror = t;
          }
        }, n.prototype.removeListener = function (e, r) {
          var n = this;

          switch (e) {
            case "data":
              this.notificationCallbacks.forEach(function (e, t) {
                e === r && n.notificationCallbacks.splice(t, 1);
              });
          }
        }, n.prototype.removeAllListeners = function (e) {
          switch (e) {
            case "data":
              this.notificationCallbacks = [];
              break;

            case "connect":
              this.connection.onopen = null;
              break;

            case "end":
              this.connection.onclose = null;
              break;

            case "error":
              this.connection.onerror = null;
          }
        }, n.prototype.reset = function () {
          this._timeout(), this.notificationCallbacks = [], this.addDefaultEvents();
        }, n.prototype.disconnect = function () {
          this.connection && this.connection.close();
        }, a.exports = n;
      }).call(this, i("buffer").Buffer);
    }, {
      buffer: 47,
      underscore: 405,
      url: 166,
      "web3-core-helpers": 200,
      websocket: 45
    }],
    407: [function (e, t, r) {
      var n = e("web3-core"),
          i = e("web3-core-subscriptions").subscriptions,
          o = e("web3-core-method"),
          a = e("web3-net"),
          s = function s() {
        var t = this;
        n.packageInit(this, arguments);
        var e = this.setProvider;
        this.setProvider = function () {
          e.apply(t, arguments), t.net.setProvider.apply(t, arguments);
        }, this.clearSubscriptions = t._requestManager.clearSubscriptions, this.net = new a(this.currentProvider), [new i({
          name: "subscribe",
          type: "shh",
          subscriptions: {
            messages: {
              params: 1
            }
          }
        }), new o({
          name: "getVersion",
          call: "shh_version",
          params: 0
        }), new o({
          name: "getInfo",
          call: "shh_info",
          params: 0
        }), new o({
          name: "setMaxMessageSize",
          call: "shh_setMaxMessageSize",
          params: 1
        }), new o({
          name: "setMinPoW",
          call: "shh_setMinPoW",
          params: 1
        }), new o({
          name: "markTrustedPeer",
          call: "shh_markTrustedPeer",
          params: 1
        }), new o({
          name: "newKeyPair",
          call: "shh_newKeyPair",
          params: 0
        }), new o({
          name: "addPrivateKey",
          call: "shh_addPrivateKey",
          params: 1
        }), new o({
          name: "deleteKeyPair",
          call: "shh_deleteKeyPair",
          params: 1
        }), new o({
          name: "hasKeyPair",
          call: "shh_hasKeyPair",
          params: 1
        }), new o({
          name: "getPublicKey",
          call: "shh_getPublicKey",
          params: 1
        }), new o({
          name: "getPrivateKey",
          call: "shh_getPrivateKey",
          params: 1
        }), new o({
          name: "newSymKey",
          call: "shh_newSymKey",
          params: 0
        }), new o({
          name: "addSymKey",
          call: "shh_addSymKey",
          params: 1
        }), new o({
          name: "generateSymKeyFromPassword",
          call: "shh_generateSymKeyFromPassword",
          params: 1
        }), new o({
          name: "hasSymKey",
          call: "shh_hasSymKey",
          params: 1
        }), new o({
          name: "getSymKey",
          call: "shh_getSymKey",
          params: 1
        }), new o({
          name: "deleteSymKey",
          call: "shh_deleteSymKey",
          params: 1
        }), new o({
          name: "newMessageFilter",
          call: "shh_newMessageFilter",
          params: 1
        }), new o({
          name: "getFilterMessages",
          call: "shh_getFilterMessages",
          params: 1
        }), new o({
          name: "deleteMessageFilter",
          call: "shh_deleteMessageFilter",
          params: 1
        }), new o({
          name: "post",
          call: "shh_post",
          params: 1,
          inputFormatter: [null]
        }), new o({
          name: "unsubscribe",
          call: "shh_unsubscribe",
          params: 1
        })].forEach(function (e) {
          e.attachToObject(t), e.setRequestManager(t._requestManager);
        });
      };

      n.addProviders(s), t.exports = s;
    }, {
      "web3-core": 218,
      "web3-core-method": 202,
      "web3-core-subscriptions": 215,
      "web3-net": 393
    }],
    408: [function (e, t, r) {
      arguments[4][387][0].apply(r, arguments);
    }, {
      dup: 387
    }],
    409: [function (e, t, r) {
      arguments[4][174][0].apply(r, arguments);
    }, {
      dup: 174
    }],
    410: [function (e, t, r) {
      var f = e("bn.js"),
          h = e("number-to-bn"),
          d = new f(0),
          l = new f(-1),
          p = {
        noether: "0",
        wei: "1",
        kwei: "1000",
        Kwei: "1000",
        babbage: "1000",
        femtoether: "1000",
        mwei: "1000000",
        Mwei: "1000000",
        lovelace: "1000000",
        picoether: "1000000",
        gwei: "1000000000",
        Gwei: "1000000000",
        shannon: "1000000000",
        nanoether: "1000000000",
        nano: "1000000000",
        szabo: "1000000000000",
        microether: "1000000000000",
        micro: "1000000000000",
        finney: "1000000000000000",
        milliether: "1000000000000000",
        milli: "1000000000000000",
        ether: "1000000000000000000",
        kether: "1000000000000000000000",
        grand: "1000000000000000000000",
        mether: "1000000000000000000000000",
        gether: "1000000000000000000000000000",
        tether: "1000000000000000000000000000000"
      };

      function b(e) {
        var t = e ? e.toLowerCase() : "ether",
            r = p[t];
        if ("string" != typeof r) throw new Error("[ethjs-unit] the unit provided " + e + " doesn't exists, please use the one of the following units " + JSON.stringify(p, null, 2));
        return new f(r, 10);
      }

      function y(e) {
        if ("string" == typeof e) {
          if (!e.match(/^-?[0-9.]+$/)) throw new Error("while converting number to string, invalid number value '" + e + "', should be a number matching (^-?[0-9.]+).");
          return e;
        }

        if ("number" == typeof e) return String(e);
        if ("object" === (void 0 === e ? "undefined" : _typeof(e)) && e.toString && (e.toTwos || e.dividedToIntegerBy)) return e.toPrecision ? String(e.toPrecision()) : e.toString(10);
        throw new Error("while converting number to string, invalid number value '" + e + "' type " + (void 0 === e ? "undefined" : _typeof(e)) + ".");
      }

      t.exports = {
        unitMap: p,
        numberToString: y,
        getValueOfUnit: b,
        fromWei: function fromWei(e, t, r) {
          var n = h(e),
              i = n.lt(d),
              o = b(t),
              a = p[t].length - 1 || 1,
              s = r || {};
          i && (n = n.mul(l));

          for (var u = n.mod(o).toString(10); u.length < a;) {
            u = "0" + u;
          }

          s.pad || (u = u.match(/^([0-9]*[1-9]|0)(0*)/)[1]);
          var c = n.div(o).toString(10);
          s.commify && (c = c.replace(/\B(?=(\d{3})+(?!\d))/g, ","));
          var f = c + ("0" == u ? "" : "." + u);
          return i && (f = "-" + f), f;
        },
        toWei: function toWei(e, t) {
          var r = y(e),
              n = b(t),
              i = p[t].length - 1 || 1,
              o = "-" === r.substring(0, 1);
          if (o && (r = r.substring(1)), "." === r) throw new Error("[ethjs-unit] while converting number " + e + " to wei, invalid value");
          var a = r.split(".");
          if (2 < a.length) throw new Error("[ethjs-unit] while converting number " + e + " to wei,  too many decimal points");
          var s = a[0],
              u = a[1];
          if (s || (s = "0"), u || (u = "0"), u.length > i) throw new Error("[ethjs-unit] while converting number " + e + " to wei, too many decimal places");

          for (; u.length < i;) {
            u += "0";
          }

          s = new f(s), u = new f(u);
          var c = s.mul(n).add(u);
          return o && (c = c.mul(l)), new f(c.toString(10), 10);
        }
      };
    }, {
      "bn.js": 408,
      "number-to-bn": 412
    }],
    411: [function (e, t, r) {
      t.exports = function (e) {
        if ("string" != typeof e) throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + (void 0 === e ? "undefined" : _typeof(e)) + ", while checking isHexPrefixed.");
        return "0x" === e.slice(0, 2);
      };
    }, {}],
    412: [function (e, t, r) {
      var o = e("bn.js"),
          a = e("strip-hex-prefix");

      t.exports = function (e) {
        if ("string" == typeof e || "number" == typeof e) {
          var t = new o(1),
              r = String(e).toLowerCase().trim(),
              n = "0x" === r.substr(0, 2) || "-0x" === r.substr(0, 3),
              i = a(r);
          if ("-" === i.substr(0, 1) && (i = a(i.slice(1)), t = new o(-1, 10)), !(i = "" === i ? "0" : i).match(/^-?[0-9]+$/) && i.match(/^[0-9A-Fa-f]+$/) || i.match(/^[a-fA-F]+$/) || !0 === n && i.match(/^[0-9A-Fa-f]+$/)) return new o(i, 16).mul(t);
          if ((i.match(/^-?[0-9]+$/) || "" === i) && !1 === n) return new o(i, 10).mul(t);
        } else if ("object" === (void 0 === e ? "undefined" : _typeof(e)) && e.toString && !e.pop && !e.push && e.toString(10).match(/^-?[0-9]+$/) && (e.mul || e.dividedToIntegerBy)) return new o(e.toString(10), 10);

        throw new Error("[number-to-bn] while converting number " + JSON.stringify(e) + " to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.");
      };
    }, {
      "bn.js": 408,
      "strip-hex-prefix": 416
    }],
    413: [function (e, t, r) {
      t.exports = window.crypto;
    }, {}],
    414: [function (e, t, r) {
      t.exports = e("crypto");
    }, {
      crypto: 413
    }],
    415: [function (u, e, t) {
      e.exports = function (e, r) {
        var t = u("./crypto.js"),
            n = "function" == typeof r;

        if (65536 < e) {
          if (!n) throw new Error("Requested too many random bytes.");
          r(new Error("Requested too many random bytes."));
        }

        if (void 0 !== t && t.randomBytes) {
          if (!n) return "0x" + t.randomBytes(e).toString("hex");
          t.randomBytes(e, function (e, t) {
            e ? r(s) : r(null, "0x" + t.toString("hex"));
          });
        } else {
          var i;

          if (void 0 !== t ? i = t : "undefined" != typeof msCrypto && (i = msCrypto), i && i.getRandomValues) {
            var o = i.getRandomValues(new Uint8Array(e)),
                a = "0x" + Array.from(o).map(function (e) {
              return e.toString(16);
            }).join("");
            if (!n) return a;
            r(null, a);
          } else {
            var s = new Error('No "crypto" object available. This Browser doesn\'t support generating secure random bytes.');
            if (!n) throw s;
            r(s);
          }
        }
      };
    }, {
      "./crypto.js": 414
    }],
    416: [function (e, t, r) {
      var n = e("is-hex-prefixed");

      t.exports = function (e) {
        return "string" != typeof e ? e : n(e) ? e.slice(2) : e;
      };
    }, {
      "is-hex-prefixed": 411
    }],
    417: [function (e, t, r) {
      arguments[4][187][0].apply(r, arguments);
    }, {
      dup: 187
    }],
    418: [function (e, v, g) {
      (function (m) {
        !function (e) {
          var t = "object" == (void 0 === g ? "undefined" : _typeof(g)) && g,
              r = "object" == (void 0 === v ? "undefined" : _typeof(v)) && v && v.exports == t && v,
              n = "object" == (void 0 === m ? "undefined" : _typeof(m)) && m;
          n.global !== n && n.window !== n || (e = n);
          var i,
              o,
              a,
              s = String.fromCharCode;

          function u(e) {
            for (var t, r, n = [], i = 0, o = e.length; i < o;) {
              55296 <= (t = e.charCodeAt(i++)) && t <= 56319 && i < o ? 56320 == (64512 & (r = e.charCodeAt(i++))) ? n.push(((1023 & t) << 10) + (1023 & r) + 65536) : (n.push(t), i--) : n.push(t);
            }

            return n;
          }

          function c(e) {
            if (55296 <= e && e <= 57343) throw Error("Lone surrogate U+" + e.toString(16).toUpperCase() + " is not a scalar value");
          }

          function f(e, t) {
            return s(e >> t & 63 | 128);
          }

          function h(e) {
            if (0 == (4294967168 & e)) return s(e);
            var t = "";
            return 0 == (4294965248 & e) ? t = s(e >> 6 & 31 | 192) : 0 == (4294901760 & e) ? (c(e), t = s(e >> 12 & 15 | 224), t += f(e, 6)) : 0 == (4292870144 & e) && (t = s(e >> 18 & 7 | 240), t += f(e, 12), t += f(e, 6)), t += s(63 & e | 128);
          }

          function d() {
            if (o <= a) throw Error("Invalid byte index");
            var e = 255 & i[a];
            if (a++, 128 == (192 & e)) return 63 & e;
            throw Error("Invalid continuation byte");
          }

          function l() {
            var e, t;
            if (o < a) throw Error("Invalid byte index");
            if (a == o) return !1;
            if (e = 255 & i[a], a++, 0 == (128 & e)) return e;

            if (192 == (224 & e)) {
              if (128 <= (t = (31 & e) << 6 | d())) return t;
              throw Error("Invalid continuation byte");
            }

            if (224 == (240 & e)) {
              if (2048 <= (t = (15 & e) << 12 | d() << 6 | d())) return c(t), t;
              throw Error("Invalid continuation byte");
            }

            if (240 == (248 & e) && 65536 <= (t = (15 & e) << 18 | d() << 12 | d() << 6 | d()) && t <= 1114111) return t;
            throw Error("Invalid UTF-8 detected");
          }

          var p = {
            version: "2.0.0",
            encode: function encode(e) {
              for (var t = u(e), r = t.length, n = -1, i = ""; ++n < r;) {
                i += h(t[n]);
              }

              return i;
            },
            decode: function decode(e) {
              i = u(e), o = i.length, a = 0;

              for (var t, r = []; !1 !== (t = l());) {
                r.push(t);
              }

              return function (e) {
                for (var t, r = e.length, n = -1, i = ""; ++n < r;) {
                  65535 < (t = e[n]) && (i += s((t -= 65536) >>> 10 & 1023 | 55296), t = 56320 | 1023 & t), i += s(t);
                }

                return i;
              }(r);
            }
          };
          if ("function" == typeof define && "object" == _typeof(define.amd) && define.amd) define(function () {
            return p;
          });else if (t && !t.nodeType) {
            if (r) r.exports = p;else {
              var b = {}.hasOwnProperty;

              for (var y in p) {
                b.call(p, y) && (t[y] = p[y]);
              }
            }
          } else e.utf8 = p;
        }(this);
      }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, {}],
    419: [function (e, t, r) {
      var s = e("underscore"),
          n = e("ethjs-unit"),
          o = e("./utils.js"),
          i = e("./soliditySha3.js"),
          a = e("randomhex"),
          u = function i(o, e) {
        var a = [];
        return e.forEach(function (e) {
          if ("object" === _typeof(e.components)) {
            if ("tuple" !== e.type.substring(0, 5)) throw new Error("components found but type is not tuple; report on GitHub");
            var t = "",
                r = e.type.indexOf("[");
            0 <= r && (t = e.type.substring(r));
            var n = i(o, e.components);
            s.isArray(n) && o ? a.push("tuple(" + n.join(",") + ")" + t) : o ? a.push("(" + n + ")") : a.push("(" + n.join(",") + ")" + t);
          } else a.push(e.type);
        }), a;
      },
          c = function c(e) {
        if (!o.isHexStrict(e)) throw new Error("The parameter must be a valid HEX string.");
        var t = "",
            r = 0,
            n = e.length;

        for ("0x" === e.substring(0, 2) && (r = 2); r < n; r += 2) {
          var i = parseInt(e.substr(r, 2), 16);
          t += String.fromCharCode(i);
        }

        return t;
      },
          f = function f(e) {
        if (!e) return "0x00";

        for (var t = "", r = 0; r < e.length; r++) {
          var n = e.charCodeAt(r).toString(16);
          t += n.length < 2 ? "0" + n : n;
        }

        return "0x" + t;
      },
          h = function h(e) {
        if (e = e ? e.toLowerCase() : "ether", !n.unitMap[e]) throw new Error('This unit "' + e + "\" doesn't exist, please use the one of the following units" + JSON.stringify(n.unitMap, null, 2));
        return e;
      };

      t.exports = {
        _fireError: function _fireError(e, t, r, n) {
          return !s.isObject(e) || e instanceof Error || !e.data || ((s.isObject(e.data) || s.isArray(e.data)) && (e.data = JSON.stringify(e.data, null, 2)), e = e.message + "\n" + e.data), s.isString(e) && (e = new Error(e)), s.isFunction(n) && n(e), s.isFunction(r) && ((t && s.isFunction(t.listeners) && t.listeners("error").length || s.isFunction(n)) && t["catch"](function () {}), setTimeout(function () {
            r(e);
          }, 1)), t && s.isFunction(t.emit) && setTimeout(function () {
            t.emit("error", e), t.removeAllListeners();
          }, 1), t;
        },
        _jsonInterfaceMethodToString: function _jsonInterfaceMethodToString(e) {
          return s.isObject(e) && e.name && -1 !== e.name.indexOf("(") ? e.name : e.name + "(" + u(!1, e.inputs).join(",") + ")";
        },
        _flattenTypes: u,
        randomHex: a,
        _: s,
        BN: o.BN,
        isBN: o.isBN,
        isBigNumber: o.isBigNumber,
        isHex: o.isHex,
        isHexStrict: o.isHexStrict,
        sha3: o.sha3,
        keccak256: o.sha3,
        soliditySha3: i,
        isAddress: o.isAddress,
        checkAddressChecksum: o.checkAddressChecksum,
        toChecksumAddress: function toChecksumAddress(e) {
          if (void 0 === e) return "";
          if (!/^(0x)?[0-9a-f]{40}$/i.test(e)) throw new Error('Given address "' + e + '" is not a valid Ethereum address.');
          e = e.toLowerCase().replace(/^0x/i, "");

          for (var t = o.sha3(e).replace(/^0x/i, ""), r = "0x", n = 0; n < e.length; n++) {
            7 < parseInt(t[n], 16) ? r += e[n].toUpperCase() : r += e[n];
          }

          return r;
        },
        toHex: o.toHex,
        toBN: o.toBN,
        bytesToHex: o.bytesToHex,
        hexToBytes: o.hexToBytes,
        hexToNumberString: o.hexToNumberString,
        hexToNumber: o.hexToNumber,
        toDecimal: o.hexToNumber,
        numberToHex: o.numberToHex,
        fromDecimal: o.numberToHex,
        hexToUtf8: o.hexToUtf8,
        hexToString: o.hexToUtf8,
        toUtf8: o.hexToUtf8,
        utf8ToHex: o.utf8ToHex,
        stringToHex: o.utf8ToHex,
        fromUtf8: o.utf8ToHex,
        hexToAscii: c,
        toAscii: c,
        asciiToHex: f,
        fromAscii: f,
        unitMap: n.unitMap,
        toWei: function toWei(e, t) {
          if (t = h(t), !o.isBN(e) && !s.isString(e)) throw new Error("Please pass numbers as strings or BigNumber objects to avoid precision errors.");
          return o.isBN(e) ? n.toWei(e, t) : n.toWei(e, t).toString(10);
        },
        fromWei: function fromWei(e, t) {
          if (t = h(t), !o.isBN(e) && !s.isString(e)) throw new Error("Please pass numbers as strings or BigNumber objects to avoid precision errors.");
          return o.isBN(e) ? n.fromWei(e, t) : n.fromWei(e, t).toString(10);
        },
        padLeft: o.leftPad,
        leftPad: o.leftPad,
        padRight: o.rightPad,
        rightPad: o.rightPad,
        toTwosComplement: o.toTwosComplement
      };
    }, {
      "./soliditySha3.js": 420,
      "./utils.js": 421,
      "ethjs-unit": 410,
      randomhex: 415,
      underscore: 417
    }],
    420: [function (e, t, r) {
      var o = e("underscore"),
          s = e("bn.js"),
          u = e("./utils.js"),
          c = function c(e) {
        var t = void 0 === e ? "undefined" : _typeof(e);
        if ("string" === t) return u.isHexStrict(e) ? new s(e.replace(/0x/i, ""), 16) : new s(e, 10);
        if ("number" === t) return new s(e);
        if (u.isBigNumber(e)) return new s(e.toString(10));
        if (u.isBN(e)) return e;
        throw new Error(e + " is not a number");
      },
          a = function a(e, t, r) {
        var n, i, o, a;

        if ("bytes" === (e = (o = e).startsWith("int[") ? "int256" + o.slice(3) : "int" === o ? "int256" : o.startsWith("uint[") ? "uint256" + o.slice(4) : "uint" === o ? "uint256" : o.startsWith("fixed[") ? "fixed128x128" + o.slice(5) : "fixed" === o ? "fixed128x128" : o.startsWith("ufixed[") ? "ufixed128x128" + o.slice(6) : "ufixed" === o ? "ufixed128x128" : o)) {
          if (t.replace(/^0x/i, "").length % 2 != 0) throw new Error("Invalid bytes characters " + t.length);
          return t;
        }

        if ("string" === e) return u.utf8ToHex(t);
        if ("bool" === e) return t ? "01" : "00";

        if (e.startsWith("address")) {
          if (n = r ? 64 : 40, !u.isAddress(t)) throw new Error(t + " is not a valid address, or the checksum is invalid.");
          return u.leftPad(t.toLowerCase(), n);
        }

        if (n = (a = /^\D+(\d+).*$/.exec(e)) ? parseInt(a[1], 10) : null, e.startsWith("bytes")) {
          if (!n) throw new Error("bytes[] not yet supported in solidity");
          if (r && (n = 32), n < 1 || 32 < n || n < t.replace(/^0x/i, "").length / 2) throw new Error("Invalid bytes" + n + " for " + t);
          return u.rightPad(t, 2 * n);
        }

        if (e.startsWith("uint")) {
          if (n % 8 || n < 8 || 256 < n) throw new Error("Invalid uint" + n + " size");
          if ((i = c(t)).bitLength() > n) throw new Error("Supplied uint exceeds width: " + n + " vs " + i.bitLength());
          if (i.lt(new s(0))) throw new Error("Supplied uint " + i.toString() + " is negative");
          return n ? u.leftPad(i.toString("hex"), n / 8 * 2) : i;
        }

        if (e.startsWith("int")) {
          if (n % 8 || n < 8 || 256 < n) throw new Error("Invalid int" + n + " size");
          if ((i = c(t)).bitLength() > n) throw new Error("Supplied int exceeds width: " + n + " vs " + i.bitLength());
          return i.lt(new s(0)) ? i.toTwos(n).toString("hex") : n ? u.leftPad(i.toString("hex"), n / 8 * 2) : i;
        }

        throw new Error("Unsupported or invalid type: " + e);
      },
          n = function n(e) {
        if (o.isArray(e)) throw new Error("Autodetection of array types is not supported.");
        var t,
            r,
            n,
            i = "";

        if (o.isObject(e) && (e.hasOwnProperty("v") || e.hasOwnProperty("t") || e.hasOwnProperty("value") || e.hasOwnProperty("type")) ? (t = e.hasOwnProperty("t") ? e.t : e.type, i = e.hasOwnProperty("v") ? e.v : e.value) : (t = u.toHex(e, !0), i = u.toHex(e), t.startsWith("int") || t.startsWith("uint") || (t = "bytes")), !t.startsWith("int") && !t.startsWith("uint") || "string" != typeof i || /^(-)?0x/i.test(i) || (i = new s(i)), o.isArray(i)) {
          if (n = /^\D+\d*\[(\d+)\]$/.exec(t), (r = n ? parseInt(n[1], 10) : null) && i.length !== r) throw new Error(t + " is not matching the given array " + JSON.stringify(i));
          r = i.length;
        }

        return o.isArray(i) ? i.map(function (e) {
          return a(t, e, r).toString("hex").replace("0x", "");
        }).join("") : a(t, i, r).toString("hex").replace("0x", "");
      };

      t.exports = function () {
        var e = Array.prototype.slice.call(arguments),
            t = o.map(e, n);
        return u.sha3("0x" + t.join(""));
      };
    }, {
      "./utils.js": 421,
      "bn.js": 408,
      underscore: 417
    }],
    421: [function (e, t, r) {
      var n = e("underscore"),
          i = e("bn.js"),
          o = e("number-to-bn"),
          a = e("utf8"),
          s = e("eth-lib/lib/hash"),
          u = function u(e) {
        return e instanceof i || e && e.constructor && "BN" === e.constructor.name;
      },
          c = function c(e) {
        return e && e.constructor && "BigNumber" === e.constructor.name;
      },
          f = function f(t) {
        try {
          return o.apply(null, arguments);
        } catch (e) {
          throw new Error(e + ' Given value: "' + t + '"');
        }
      },
          h = function h(e) {
        return !!/^(0x)?[0-9a-f]{40}$/i.test(e) && (!(!/^(0x|0X)?[0-9a-f]{40}$/.test(e) && !/^(0x|0X)?[0-9A-F]{40}$/.test(e)) || d(e));
      },
          d = function d(e) {
        e = e.replace(/^0x/i, "");

        for (var t = m(e.toLowerCase()).replace(/^0x/i, ""), r = 0; r < 40; r++) {
          if (7 < parseInt(t[r], 16) && e[r].toUpperCase() !== e[r] || parseInt(t[r], 16) <= 7 && e[r].toLowerCase() !== e[r]) return !1;
        }

        return !0;
      },
          l = function l(e) {
        var t = "";
        e = (e = (e = (e = (e = a.encode(e)).replace(/^(?:\u0000)*/, "")).split("").reverse().join("")).replace(/^(?:\u0000)*/, "")).split("").reverse().join("");

        for (var r = 0; r < e.length; r++) {
          var n = e.charCodeAt(r).toString(16);
          t += n.length < 2 ? "0" + n : n;
        }

        return "0x" + t;
      },
          p = function p(e) {
        if (n.isNull(e) || n.isUndefined(e)) return e;
        if (!isFinite(e) && !y(e)) throw new Error('Given input "' + e + '" is not a number.');
        var t = f(e),
            r = t.toString(16);
        return t.lt(new i(0)) ? "-0x" + r.substr(1) : "0x" + r;
      },
          b = function b(e) {
        if (e = e.toString(16), !y(e)) throw new Error('Given value "' + e + '" is not a valid hex string.');
        e = e.replace(/^0x/i, "");

        for (var t = [], r = 0; r < e.length; r += 2) {
          t.push(parseInt(e.substr(r, 2), 16));
        }

        return t;
      },
          y = function y(e) {
        return (n.isString(e) || n.isNumber(e)) && /^(-)?0x[0-9a-f]*$/i.test(e);
      },
          m = function m(e) {
        y(e) && /^0x/i.test(e.toString()) && (e = b(e));
        var t = s.keccak256(e);
        return "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470" === t ? null : t;
      };

      m._Hash = s, t.exports = {
        BN: i,
        isBN: u,
        isBigNumber: c,
        toBN: f,
        isAddress: h,
        isBloom: function isBloom(e) {
          return !(!/^(0x)?[0-9a-f]{512}$/i.test(e) || !/^(0x)?[0-9a-f]{512}$/.test(e) && !/^(0x)?[0-9A-F]{512}$/.test(e));
        },
        isTopic: function isTopic(e) {
          return !(!/^(0x)?[0-9a-f]{64}$/i.test(e) || !/^(0x)?[0-9a-f]{64}$/.test(e) && !/^(0x)?[0-9A-F]{64}$/.test(e));
        },
        checkAddressChecksum: d,
        utf8ToHex: l,
        hexToUtf8: function hexToUtf8(e) {
          if (!y(e)) throw new Error('The parameter "' + e + '" must be a valid HEX string.');

          for (var t = "", r = 0, n = (e = (e = (e = (e = (e = e.replace(/^0x/i, "")).replace(/^(?:00)*/, "")).split("").reverse().join("")).replace(/^(?:00)*/, "")).split("").reverse().join("")).length, i = 0; i < n; i += 2) {
            r = parseInt(e.substr(i, 2), 16), t += String.fromCharCode(r);
          }

          return a.decode(t);
        },
        hexToNumber: function hexToNumber(e) {
          return e ? f(e).toNumber() : e;
        },
        hexToNumberString: function hexToNumberString(e) {
          return e ? f(e).toString(10) : e;
        },
        numberToHex: p,
        toHex: function toHex(e, t) {
          if (h(e)) return t ? "address" : "0x" + e.toLowerCase().replace(/^0x/i, "");
          if (n.isBoolean(e)) return t ? "bool" : e ? "0x01" : "0x00";
          if (n.isObject(e) && !c(e) && !u(e)) return t ? "string" : l(JSON.stringify(e));

          if (n.isString(e)) {
            if (0 === e.indexOf("-0x") || 0 === e.indexOf("-0X")) return t ? "int256" : p(e);
            if (0 === e.indexOf("0x") || 0 === e.indexOf("0X")) return t ? "bytes" : e;
            if (!isFinite(e)) return t ? "string" : l(e);
          }

          return t ? e < 0 ? "int256" : "uint256" : p(e);
        },
        hexToBytes: b,
        bytesToHex: function bytesToHex(e) {
          for (var t = [], r = 0; r < e.length; r++) {
            t.push((e[r] >>> 4).toString(16)), t.push((15 & e[r]).toString(16));
          }

          return "0x" + t.join("");
        },
        isHex: function isHex(e) {
          return (n.isString(e) || n.isNumber(e)) && /^(-0x|0x)?[0-9a-f]*$/i.test(e);
        },
        isHexStrict: y,
        leftPad: function leftPad(e, t, r) {
          var n = /^0x/i.test(e) || "number" == typeof e,
              i = 0 <= t - (e = e.toString(16).replace(/^0x/i, "")).length + 1 ? t - e.length + 1 : 0;
          return (n ? "0x" : "") + new Array(i).join(r || "0") + e;
        },
        rightPad: function rightPad(e, t, r) {
          var n = /^0x/i.test(e) || "number" == typeof e,
              i = 0 <= t - (e = e.toString(16).replace(/^0x/i, "")).length + 1 ? t - e.length + 1 : 0;
          return (n ? "0x" : "") + e + new Array(i).join(r || "0");
        },
        toTwosComplement: function toTwosComplement(e) {
          return "0x" + f(e).toTwos(256).toString(16, 64);
        },
        sha3: m
      };
    }, {
      "bn.js": 408,
      "eth-lib/lib/hash": 409,
      "number-to-bn": 412,
      underscore: 417,
      utf8: 418
    }],
    422: [function (e, t, r) {
      t.exports = {
        name: "web3",
        namespace: "ethereum",
        version: "1.0.0-beta.36",
        description: "Ethereum JavaScript API",
        repository: "https://github.com/ethereum/web3.js/tree/master/packages/web3",
        license: "LGPL-3.0",
        main: "src/index.js",
        bugs: {
          url: "https://github.com/ethereum/web3.js/issues"
        },
        keywords: ["Ethereum", "JavaScript", "API"],
        author: "ethereum.org",
        authors: [{
          name: "Fabian Vogelsteller",
          email: "fabian@ethereum.org",
          homepage: "http://frozeman.de"
        }, {
          name: "Marek Kotewicz",
          email: "marek@parity.io",
          url: "https://github.com/debris"
        }, {
          name: "Marian Oancea",
          url: "https://github.com/cubedro"
        }, {
          name: "Gav Wood",
          email: "g@parity.io",
          homepage: "http://gavwood.com"
        }, {
          name: "Jeffery Wilcke",
          email: "jeffrey.wilcke@ethereum.org",
          url: "https://github.com/obscuren"
        }],
        dependencies: {
          "web3-bzz": "1.0.0-beta.36",
          "web3-core": "1.0.0-beta.36",
          "web3-eth": "1.0.0-beta.36",
          "web3-eth-personal": "1.0.0-beta.36",
          "web3-net": "1.0.0-beta.36",
          "web3-shh": "1.0.0-beta.36",
          "web3-utils": "1.0.0-beta.36"
        }
      };
    }, {}],
    BN: [function (e, t, r) {
      arguments[4][219][0].apply(r, arguments);
    }, {
      buffer: 17,
      dup: 219
    }],
    Web3: [function (e, t, r) {
      var i = e("../package.json").version,
          o = e("web3-core"),
          a = e("web3-eth"),
          n = e("web3-net"),
          s = e("web3-eth-personal"),
          u = e("web3-shh"),
          c = e("web3-bzz"),
          f = e("web3-utils"),
          h = function h() {
        var r = this;
        o.packageInit(this, arguments), this.version = i, this.utils = f, this.eth = new a(this), this.shh = new u(this), this.bzz = new c(this);
        var n = this.setProvider;

        this.setProvider = function (e, t) {
          return n.apply(r, arguments), this.eth.setProvider(e, t), this.shh.setProvider(e, t), this.bzz.setProvider(e), !0;
        };
      };

      h.version = i, h.utils = f, h.modules = {
        Eth: a,
        Net: n,
        Personal: s,
        Shh: u,
        Bzz: c
      }, o.addProviders(h), t.exports = h;
    }, {
      "../package.json": 422,
      "web3-bzz": 196,
      "web3-core": 218,
      "web3-eth": 392,
      "web3-eth-personal": 389,
      "web3-net": 393,
      "web3-shh": 407,
      "web3-utils": 419
    }]
  }, {}, ["Web3"])("Web3");
});

cc._RF.pop();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/indexof/index.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}
var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/index.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}module.exports = require('./lib/axios');
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/axios.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

var utils = require('./utils');
var bind = require('./helpers/bind');
var Axios = require('./core/Axios');
var mergeConfig = require('./core/mergeConfig');
var defaults = require('./defaults');

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Expose Cancel & CancelToken
axios.CanceledError = require('./cancel/CanceledError');
axios.CancelToken = require('./cancel/CancelToken');
axios.isCancel = require('./cancel/isCancel');
axios.VERSION = require('./env/data').version;
axios.toFormData = require('./helpers/toFormData');

// Expose AxiosError class
axios.AxiosError = require('../lib/core/AxiosError');

// alias for CanceledError for backward compatibility
axios.Cancel = axios.CanceledError;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = require('./helpers/spread');

// Expose isAxiosError
axios.isAxiosError = require('./helpers/isAxiosError');

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/core/AxiosError.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

var utils = require('../utils');

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}

utils.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});

var prototype = AxiosError.prototype;
var descriptors = {};

[
  'ERR_BAD_OPTION_VALUE',
  'ERR_BAD_OPTION',
  'ECONNABORTED',
  'ETIMEDOUT',
  'ERR_NETWORK',
  'ERR_FR_TOO_MANY_REDIRECTS',
  'ERR_DEPRECATED',
  'ERR_BAD_RESPONSE',
  'ERR_BAD_REQUEST',
  'ERR_CANCELED'
// eslint-disable-next-line func-names
].forEach(function(code) {
  descriptors[code] = {value: code};
});

Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, 'isAxiosError', {value: true});

// eslint-disable-next-line func-names
AxiosError.from = function(error, code, config, request, response, customProps) {
  var axiosError = Object.create(prototype);

  utils.toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  });

  AxiosError.call(axiosError, error.message, code, config, request, response);

  axiosError.name = error.name;

  customProps && Object.assign(axiosError, customProps);

  return axiosError;
};

module.exports = AxiosError;

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/helpers/toFormData.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}(function (Buffer){
'use strict';

var utils = require('../utils');

/**
 * Convert a data object to FormData
 * @param {Object} obj
 * @param {?Object} [formData]
 * @returns {Object}
 **/

function toFormData(obj, formData) {
  // eslint-disable-next-line no-param-reassign
  formData = formData || new FormData();

  var stack = [];

  function convertValue(value) {
    if (value === null) return '';

    if (utils.isDate(value)) {
      return value.toISOString();
    }

    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
      return typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
    }

    return value;
  }

  function build(data, parentKey) {
    if (utils.isPlainObject(data) || utils.isArray(data)) {
      if (stack.indexOf(data) !== -1) {
        throw Error('Circular reference detected in ' + parentKey);
      }

      stack.push(data);

      utils.forEach(data, function each(value, key) {
        if (utils.isUndefined(value)) return;
        var fullKey = parentKey ? parentKey + '.' + key : key;
        var arr;

        if (value && !parentKey && typeof value === 'object') {
          if (utils.endsWith(key, '{}')) {
            // eslint-disable-next-line no-param-reassign
            value = JSON.stringify(value);
          } else if (utils.endsWith(key, '[]') && (arr = utils.toArray(value))) {
            // eslint-disable-next-line func-names
            arr.forEach(function(el) {
              !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));
            });
            return;
          }
        }

        build(value, fullKey);
      });

      stack.pop();
    } else {
      formData.append(parentKey, convertValue(data));
    }
  }

  build(obj);

  return formData;
}

module.exports = toFormData;

}).call(this,require("buffer").Buffer)
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/cancel/CancelToken.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

var CanceledError = require('./CanceledError');

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;

  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;

  // eslint-disable-next-line func-names
  this.promise.then(function(cancel) {
    if (!token._listeners) return;

    var i;
    var l = token._listeners.length;

    for (i = 0; i < l; i++) {
      token._listeners[i](cancel);
    }
    token._listeners = null;
  });

  // eslint-disable-next-line func-names
  this.promise.then = function(onfulfilled) {
    var _resolve;
    // eslint-disable-next-line func-names
    var promise = new Promise(function(resolve) {
      token.subscribe(resolve);
      _resolve = resolve;
    }).then(onfulfilled);

    promise.cancel = function reject() {
      token.unsubscribe(_resolve);
    };

    return promise;
  };

  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new CanceledError(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `CanceledError` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Subscribe to the cancel signal
 */

CancelToken.prototype.subscribe = function subscribe(listener) {
  if (this.reason) {
    listener(this.reason);
    return;
  }

  if (this._listeners) {
    this._listeners.push(listener);
  } else {
    this._listeners = [listener];
  }
};

/**
 * Unsubscribe from the cancel signal
 */

CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
  if (!this._listeners) {
    return;
  }
  var index = this._listeners.indexOf(listener);
  if (index !== -1) {
    this._listeners.splice(index, 1);
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/utils.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

var bind = require('./helpers/bind');

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

// eslint-disable-next-line func-names
var kindOf = (function(cache) {
  // eslint-disable-next-line func-names
  return function(thing) {
    var str = toString.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
  };
})(Object.create(null));

function kindOfTest(type) {
  type = type.toLowerCase();
  return function isKindOf(thing) {
    return kindOf(thing) === type;
  };
}

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return Array.isArray(val);
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
var isArrayBuffer = kindOfTest('ArrayBuffer');


/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (kindOf(val) !== 'object') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
var isDate = kindOfTest('Date');

/**
 * Determine if a value is a File
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
var isFile = kindOfTest('File');

/**
 * Determine if a value is a Blob
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
var isBlob = kindOfTest('Blob');

/**
 * Determine if a value is a FileList
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
var isFileList = kindOfTest('FileList');

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} thing The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(thing) {
  var pattern = '[object FormData]';
  return thing && (
    (typeof FormData === 'function' && thing instanceof FormData) ||
    toString.call(thing) === pattern ||
    (isFunction(thing.toString) && thing.toString() === pattern)
  );
}

/**
 * Determine if a value is a URLSearchParams object
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
var isURLSearchParams = kindOfTest('URLSearchParams');

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 */

function inherits(constructor, superConstructor, props, descriptors) {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
  constructor.prototype.constructor = constructor;
  props && Object.assign(constructor.prototype, props);
}

/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function} [filter]
 * @returns {Object}
 */

function toFlatObject(sourceObj, destObj, filter) {
  var props;
  var i;
  var prop;
  var merged = {};

  destObj = destObj || {};

  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if (!merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = Object.getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

  return destObj;
}

/*
 * determines whether a string ends with the characters of a specified string
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 * @returns {boolean}
 */
function endsWith(str, searchString, position) {
  str = String(str);
  if (position === undefined || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  var lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
}


/**
 * Returns new array from array like object
 * @param {*} [thing]
 * @returns {Array}
 */
function toArray(thing) {
  if (!thing) return null;
  var i = thing.length;
  if (isUndefined(i)) return null;
  var arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
}

// eslint-disable-next-line func-names
var isTypedArray = (function(TypedArray) {
  // eslint-disable-next-line func-names
  return function(thing) {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== 'undefined' && Object.getPrototypeOf(Uint8Array));

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM,
  inherits: inherits,
  toFlatObject: toFlatObject,
  kindOf: kindOf,
  kindOfTest: kindOfTest,
  endsWith: endsWith,
  toArray: toArray,
  isTypedArray: isTypedArray,
  isFileList: isFileList
};

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/core/mergeConfig.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

var utils = require('../utils');

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  var mergeMap = {
    'url': valueFromConfig2,
    'method': valueFromConfig2,
    'data': valueFromConfig2,
    'baseURL': defaultToConfig2,
    'transformRequest': defaultToConfig2,
    'transformResponse': defaultToConfig2,
    'paramsSerializer': defaultToConfig2,
    'timeout': defaultToConfig2,
    'timeoutMessage': defaultToConfig2,
    'withCredentials': defaultToConfig2,
    'adapter': defaultToConfig2,
    'responseType': defaultToConfig2,
    'xsrfCookieName': defaultToConfig2,
    'xsrfHeaderName': defaultToConfig2,
    'onUploadProgress': defaultToConfig2,
    'onDownloadProgress': defaultToConfig2,
    'decompress': defaultToConfig2,
    'maxContentLength': defaultToConfig2,
    'maxBodyLength': defaultToConfig2,
    'beforeRedirect': defaultToConfig2,
    'transport': defaultToConfig2,
    'httpAgent': defaultToConfig2,
    'httpsAgent': defaultToConfig2,
    'cancelToken': defaultToConfig2,
    'socketPath': defaultToConfig2,
    'responseEncoding': defaultToConfig2,
    'validateStatus': mergeDirectKeys
  };

  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge(prop);
    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
};

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/core/Axios.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

var utils = require('./../utils');
var buildURL = require('../helpers/buildURL');
var InterceptorManager = require('./InterceptorManager');
var dispatchRequest = require('./dispatchRequest');
var mergeConfig = require('./mergeConfig');
var buildFullPath = require('./buildFullPath');
var validator = require('../helpers/validator');

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(configOrUrl, config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof configOrUrl === 'string') {
    config = config || {};
    config.url = configOrUrl;
  } else {
    config = configOrUrl || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean),
      forcedJSONParsing: validators.transitional(validators.boolean),
      clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
  }

  // filter out skipped interceptors
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });

  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];

    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);

    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }


  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  var fullPath = buildFullPath(config.baseURL, config.url);
  return buildURL(fullPath, config.params, config.paramsSerializer);
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/

  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method: method,
        headers: isForm ? {
          'Content-Type': 'multipart/form-data'
        } : {},
        url: url,
        data: data
      }));
    };
  }

  Axios.prototype[method] = generateHTTPMethod();

  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
});

module.exports = Axios;

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/helpers/spread.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/helpers/bind.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/cancel/isCancel.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/env/data.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}module.exports = {
  "version": "0.27.2"
};
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/helpers/isAxiosError.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

var utils = require('./../utils');

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return utils.isObject(payload) && (payload.isAxiosError === true);
};

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/cancel/CanceledError.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

var AxiosError = require('../core/AxiosError');
var utils = require('../utils');

/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function CanceledError(message) {
  // eslint-disable-next-line no-eq-null,eqeqeq
  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED);
  this.name = 'CanceledError';
}

utils.inherits(CanceledError, AxiosError, {
  __CANCEL__: true
});

module.exports = CanceledError;

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/defaults/index.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}(function (process){
'use strict';

var utils = require('../utils');
var normalizeHeaderName = require('../helpers/normalizeHeaderName');
var AxiosError = require('../core/AxiosError');
var transitionalDefaults = require('./transitional');
var toFormData = require('../helpers/toFormData');

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = require('../adapters/xhr');
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = require('../adapters/http');
  }
  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {

  transitional: transitionalDefaults,

  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }

    var isObjectPayload = utils.isObject(data);
    var contentType = headers && headers['Content-Type'];

    var isFileList;

    if ((isFileList = utils.isFileList(data)) || (isObjectPayload && contentType === 'multipart/form-data')) {
      var _FormData = this.env && this.env.FormData;
      return toFormData(isFileList ? {'files[]': data} : data, _FormData && new _FormData());
    } else if (isObjectPayload || contentType === 'application/json') {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }

    return data;
  }],

  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional || defaults.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  env: {
    FormData: require('./env/FormData')
  },

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

}).call(this,require("C:/CocosDashboard_1.2.0/resources/.editors/Creator/2.4.5/resources/app.asar/node_modules/process/browser.js"))
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/buffer/index.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}(function (global){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/base64-js/index.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/ieee754/index.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/helpers/buildURL.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

var utils = require('./../utils');

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/core/InterceptorManager.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

var utils = require('./../utils');

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/buffer/node_modules/isarray/index.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/process/browser.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/helpers/validator.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

var VERSION = require('../env/data').version;
var AxiosError = require('../core/AxiosError');

var validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

var deprecatedWarnings = {};

/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function(value, opt, opts) {
    if (validator === false) {
      throw new AxiosError(
        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
        AxiosError.ERR_DEPRECATED
      );
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);
    }
  }
}

module.exports = {
  assertOptions: assertOptions,
  validators: validators
};

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/core/buildFullPath.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

var isAbsoluteURL = require('../helpers/isAbsoluteURL');
var combineURLs = require('../helpers/combineURLs');

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/core/dispatchRequest.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

var utils = require('./../utils');
var transformData = require('./transformData');
var isCancel = require('../cancel/isCancel');
var defaults = require('../defaults');
var CanceledError = require('../cancel/CanceledError');

/**
 * Throws a `CanceledError` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new CanceledError();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/defaults/transitional.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

module.exports = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/helpers/normalizeHeaderName.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

var utils = require('../utils');

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/helpers/null.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}// eslint-disable-next-line strict
module.exports = null;

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/adapters/xhr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

var utils = require('./../utils');
var settle = require('./../core/settle');
var cookies = require('./../helpers/cookies');
var buildURL = require('./../helpers/buildURL');
var buildFullPath = require('../core/buildFullPath');
var parseHeaders = require('./../helpers/parseHeaders');
var isURLSameOrigin = require('./../helpers/isURLSameOrigin');
var transitionalDefaults = require('../defaults/transitional');
var AxiosError = require('../core/AxiosError');
var CanceledError = require('../cancel/CanceledError');
var parseProtocol = require('../helpers/parseProtocol');

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;
    var onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);

    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
        request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      var transitional = config.transitional || transitionalDefaults;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(new AxiosError(
        timeoutErrorMessage,
        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
        config,
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function(cancel) {
        if (!request) {
          return;
        }
        reject(!cancel || (cancel && cancel.type) ? new CanceledError() : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    if (!requestData) {
      requestData = null;
    }

    var protocol = parseProtocol(fullPath);

    if (protocol && [ 'http', 'https', 'file' ].indexOf(protocol) === -1) {
      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));
      return;
    }


    // Send the request
    request.send(requestData);
  });
};

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/core/transformData.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

var utils = require('./../utils');
var defaults = require('../defaults');

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });

  return data;
};

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/core/settle.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

var AxiosError = require('./AxiosError');

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError(
      'Request failed with status code ' + response.status,
      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
};

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/helpers/combineURLs.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/helpers/cookies.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

var utils = require('./../utils');

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/helpers/parseHeaders.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

var utils = require('./../utils');

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/helpers/isAbsoluteURL.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
};

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/helpers/isURLSameOrigin.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

var utils = require('./../utils');

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__node_modules/axios/lib/helpers/parseProtocol.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}'use strict';

module.exports = function parseProtocol(url) {
  var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || '';
};

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------
